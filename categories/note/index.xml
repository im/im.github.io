<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Note on Cotan</title><link>/categories/note/</link><description>Recent content in Note on Cotan</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 28 Nov 2023 00:00:00 -0500</lastBuildDate><atom:link href="/categories/note/index.xml" rel="self" type="application/rss+xml"/><item><title>HTML5 &lt;dialog></title><link>/blog/html/html5-dialog/</link><pubDate>Tue, 28 Nov 2023 00:00:00 -0500</pubDate><guid>/blog/html/html5-dialog/</guid><description>HTML5 中引入了 &amp;lt;dialog&amp;gt; 元素，它提供了一种简单的方式来创建对话框或模态框，用于与用户进行交互、显示信息或接收输入。
使用 &amp;lt;dialog&amp;gt; 元素 首先，我们需要创建一个 &amp;lt;dialog&amp;gt; 元素，并添加对话框的内容和控制按钮。以下是一个示例：</description></item><item><title>css view-transition</title><link>/blog/css/view-transition/</link><pubDate>Fri, 17 Nov 2023 00:00:00 -0500</pubDate><guid>/blog/css/view-transition/</guid><description>什么是 CSS View-Transition？ CSS View-Transition 是一种用于创建平滑过渡效果的 CSS 属性。它可以让元素在视图之间进行过渡，从而实现动画效果。通过使用 CSS View-Transition，我们可以在前端开发中创建各种各样的动态效果，提升用户体验。</description></item><item><title>navigator.registerProtocolHandler</title><link>/blog/other/navigator-registerprotocolhandler/</link><pubDate>Sun, 05 Nov 2023 00:00:00 -0400</pubDate><guid>/blog/other/navigator-registerprotocolhandler/</guid><description>navigator.registerProtocolHandler 是一个 Web API，用于注册自定义协议处理程序。通过使用这个 API，您可以告诉浏览器如何处理特定的自定义协议，例如打开特定的应用程序或执行特定的操作。这对于创建与操作系统或其他应用程序集成的 Web 应用程序非常有用。
如何使用 navigator.registerProtocolHandler :hammer_and_wrench: 使用 navigator.</description></item><item><title>URL Scheme（URL协议）</title><link>/blog/other/url-scheme/</link><pubDate>Tue, 04 Jul 2023 00:00:00 -0400</pubDate><guid>/blog/other/url-scheme/</guid><description>在移动应用程序中，URL Scheme是一种用于在应用程序之间进行通信的机制。它允许一个应用程序通过特定的URL来打开另一个应用程序，并在打开后执行一些特定的操作。
URL Scheme的结构 一个URL Scheme是一个以特定格式构建的URL。它通常由两部分组成：Scheme和Path。
Scheme：Scheme是URL的开头部分，用于指定要打开的应用程序。它以字母开头，后面跟随着字母、数字和一些特殊字符，例如myapp://。 Path：Path是Scheme之后的部分，用于指定在目标应用程序中要执行的具体操作。它可以是一个命令、参数或其他标识符，例如open?item=123。 URL Scheme的用途 URL Scheme可以用于多种用途，包括但不限于以下几个方面：</description></item><item><title>git 添加 ssh key</title><link>/blog/git/ssh-key/</link><pubDate>Fri, 30 Jun 2023 00:00:00 -0400</pubDate><guid>/blog/git/ssh-key/</guid><description>创建 SSH Key ssh-keygen -t rsa -C &amp;#34;tangxiaomiemail@gmail.com&amp;#34; cd ~/.ssh cat id_rsa.</description></item><item><title>Vue3中的ref解构与响应式问题</title><link>/blog/vue/vue3-responsive-lose/</link><pubDate>Thu, 29 Jun 2023 00:00:00 -0400</pubDate><guid>/blog/vue/vue3-responsive-lose/</guid><description>介绍 📝 Vue 3是一种流行的JavaScript框架，它提供了一种声明式的方式来构建用户界面。在Vue 3中，我们可以使用ref函数来创建响应式数据。然而，当我们尝试对ref解构进行操作时，可能会遇到一些响应式问题。本文将探讨Vue 3中ref解构的使用、为什么会丢失响应式以及如何解决相关的问题。
ref解构的使用 🧩 在Vue 3中，我们可以使用ref函数创建一个响应式的数据对象。下面是一个简单的例子：</description></item><item><title>TypeScript泛型</title><link>/blog/typescript/generic/</link><pubDate>Wed, 28 Jun 2023 00:00:00 -0400</pubDate><guid>/blog/typescript/generic/</guid><description>什么是泛型？ 泛型是一种在编程语言中用于创建可重用代码的工具。它允许我们在定义函数、类或接口时延迟指定具体类型，而是在使用时动态地传入类型参数。
泛型函数 📝 在TypeScript中，我们可以使用泛型来创建可接受不同类型参数的函数。下面是一个简单的例子：
function identity&amp;lt;T&amp;gt;(arg: T): T { return arg; } let result = identity&amp;lt;string&amp;gt;(&amp;#34;Hello, TypeScript!</description></item><item><title>husky</title><link>/blog/git/husky/</link><pubDate>Tue, 30 May 2023 00:00:00 -0400</pubDate><guid>/blog/git/husky/</guid><description>安装 Husky 使用 npm 进行安装：
npm install husky --save-dev 配置 Git 钩子 在 package.</description></item><item><title>git 将远程分支拉到本地</title><link>/blog/git/remote-branch/</link><pubDate>Mon, 29 May 2023 00:00:00 -0400</pubDate><guid>/blog/git/remote-branch/</guid><description>可以使用以下命令将远程分支拉到本地：
首先，使用 git remote 命令查看已经添加的远程仓库： git remote 然后，使用 git fetch 命令将远程分支拉取到本地仓库（不会进行合并）： git fetch origin remote_branch 最后，使用 git checkout 命令将远程分支切换到本地分支： git checkout local_branch 组合命令 git fetch origin remote_branch:local_branch 其中，remote_branch 为远程分支名称，origin 为远程仓库名称，local_branch 为本地分支名称，可以根据实际情况进行替换。</description></item><item><title>vscode 所有配置对照表</title><link>/blog/vscode/setting/</link><pubDate>Mon, 29 May 2023 00:00:00 -0400</pubDate><guid>/blog/vscode/setting/</guid><description>{ // 在保存时自动格式化代码 &amp;#34;editor.formatOnSave&amp;#34;: true, // 在按下“Commit”字符(如&amp;#34;.&amp;#34;或&amp;#34;;&amp;#34;)时接受建议 &amp;#34;editor.acceptSuggestionOnCommitCharacter&amp;#34;: true, // 在按下“Enter”时接受建议 &amp;#34;editor.</description></item><item><title>用VSCode配置ESLint自动保存校验</title><link>/blog/vscode/eslint/</link><pubDate>Mon, 29 May 2023 00:00:00 -0400</pubDate><guid>/blog/vscode/eslint/</guid><description>简介 ESLint是一个开源的 JavaScript 代码检查工具，可以帮助我们发现代码中存在的错误和潜在问题，并给出推荐的修复方案，从而提高代码的质量和可读性。
本文将要介绍如何在VSCode中配置ESLint，实现自动保存校验功能，让我们的代码更加健康。
步骤 第一步：安装ESLint插件 如果没有安装ESLint插件的话，我们需要先到VSCode插件商店中安装ESLint插件，安装过程非常简单，只需要在搜索框中输入“ESLint”即可。
第二步：安装ESLint模块 在项目中安装ESLint模块依赖，可以使用npm或yarn，如下：</description></item><item><title>js高阶函数</title><link>/blog/js/higher-order-function/</link><pubDate>Fri, 26 May 2023 00:00:00 -0400</pubDate><guid>/blog/js/higher-order-function/</guid><description>JavaScript的高阶函数是一个非常强大的特性，它允许我们编写更加灵活和可重用的代码。在本文中，我们将探讨高阶函数的概念、它们如何实现以及一些示例。
什么是高阶函数 高阶函数是指接受一个或多个函数作为参数，并可以返回函数作为结果的函数。这种函数可以用来将其他函数“包装起来”或者实现某种通用的行为。ES6的箭头函数使得编写高阶函数变得更加简单和方便。
高阶函数的实现 下面是一个使用普通函数实现高阶函数的例子：
function map(arr, fn) { const mappedArr = []; for (let i=0; i&amp;lt;arr.</description></item><item><title>git 命令手册 📖</title><link>/blog/git/guide/</link><pubDate>Tue, 23 May 2023 00:00:00 -0400</pubDate><guid>/blog/git/guide/</guid><description>这是一份 Git 命令的快速查找手册，包含了 Git 的常用命令和基本用法。快速找到你需要的命令和用法，让你的 Git 使用更加轻松自如。
🚀 初始化 git init : 初始化一个 Git 仓库。 git clone &amp;lt;URL&amp;gt; : 克隆一个远程 Git 仓库。 📝 添加与提交 git add &amp;lt;file&amp;gt; : 将文件添加到暂存区。 git add .</description></item><item><title>如何在 Vite 中拦截开发服务器并使用 express</title><link>/blog/vite/express/</link><pubDate>Tue, 23 May 2023 00:00:00 -0400</pubDate><guid>/blog/vite/express/</guid><description>Vite 是一个快速、轻量级、易于使用的前端工具。它为开发者提供了一种现代的构建方式，可以快速地构建出高效且易于维护的 Web 应用程序。
在 Vite 版本 4.2 及以上的版本中，我们可以使用 configureServer 方法来拦截 Vite 开发服务器，并将其替换为 express HTTP 服务器。这样，我们就可以使用更加灵活的 HTTP 服务器组合，并且可以方便地实现登录、鉴权等功能。</description></item></channel></rss>