<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cotan Notes</title>
    <link>https://cotan.top/</link>
    <description>Recent content on Cotan Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="https://cotan.top/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HTML5 &lt;dialog&gt;</title>
      <link>https://cotan.top/docs/html/html5-dialog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cotan.top/docs/html/html5-dialog/</guid>
      <description>使用 &amp;lt;dialog&amp;gt; 元素 link首先，我们需要创建一个 &amp;lt;dialog&amp;gt; 元素，并添加对话框的内容和控制按钮。以下是一个示例：
&amp;lt;dialog id=&amp;#34;myDialog&amp;#34;&amp;gt; &amp;lt;h2&amp;gt;对话框标题&amp;lt;/h2&amp;gt; &amp;lt;p&amp;gt;对话框内容&amp;lt;/p&amp;gt; &amp;lt;button id=&amp;#34;closeDialog&amp;#34;&amp;gt;关闭&amp;lt;/button&amp;gt; &amp;lt;/dialog&amp;gt; 要打开对话框，我们可以使用 JavaScript 的 showModal() 方法：
const dialog = document.getElementById(&amp;#39;myDialog&amp;#39;); dialog.showModal(); 要关闭对话框，我们可以使用 close() 方法：
const dialog = document.getElementById(&amp;#39;myDialog&amp;#39;); dialog.close(); 可以通过监听 close 事件来执行对话框关闭时的操作：
const dialog = document.getElementById(&amp;#39;myDialog&amp;#39;); dialog.addEventListener(&amp;#39;close&amp;#39;, () =&amp;gt; { // 对话框关闭时执行的操作 }); 类似地，可以监听 show 事件来执行对话框打开时的操作：
const dialog = document.getElementById(&amp;#39;myDialog&amp;#39;); dialog.addEventListener(&amp;#39;show&amp;#39;, () =&amp;gt; { // 对话框打开时执行的操作 }); 如果想在对话框中添加更多交互元素，可以像使用普通 HTML 元素一样在 &amp;lt;dialog&amp;gt; 内部添加其他元素。
实现原理 link&amp;lt;dialog&amp;gt; 元素的实现原理与浏览器有关。在一些现代浏览器中，对话框会以模态方式显示，阻止用户与页面的其他部分进行交互。对话框元素本身是一个浮动元素，可以通过 CSS 进行样式调整。
在一些不支持 &amp;lt;dialog&amp;gt; 元素的浏览器中，可以使用 JavaScript 库或框架来模拟对话框的行为。这些库通常会创建一个覆盖整个页面的元素，并在其上显示对话框内容，以模拟对话框的效果。</description>
    </item>
    
    <item>
      <title>husky</title>
      <link>https://cotan.top/docs/git/husky/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cotan.top/docs/git/husky/</guid>
      <description>安装 Husky
使用 npm 进行安装：
npm install husky --save-dev 配置 Git 钩子
在 package.json 文件中添加 &amp;ldquo;husky&amp;rdquo; 配置：
&amp;#34;husky&amp;#34;: { &amp;#34;hooks&amp;#34;: { &amp;#34;pre-commit&amp;#34;: &amp;#34;npm run lint&amp;#34;, // 在执行 git commit 命令时，会执行 npm run lint 命令 &amp;#34;pre-push&amp;#34;: &amp;#34;npm run test&amp;#34; // 在执行 git push 命令时，会执行 npm run test 命令 } } 配置 pre-commit 钩子
在 package.json 文件中添加 &amp;ldquo;scripts&amp;rdquo; 属性：
&amp;#34;scripts&amp;#34;: { &amp;#34;lint&amp;#34;: &amp;#34;eslint .&amp;#34; } 这里的 &amp;ldquo;lint&amp;rdquo; 命令使用 ESlint 对整个项目进行代码风格检查。
配置 pre-push 钩子</description>
    </item>
    
    <item>
      <title>LINKS</title>
      <link>https://cotan.top/docs/links/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cotan.top/docs/links/</guid>
      <description> lotusdocs patterns 设计模式教学 google icons </description>
    </item>
    
    <item>
      <title>ssh key</title>
      <link>https://cotan.top/docs/git/ssh-key/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cotan.top/docs/git/ssh-key/</guid>
      <description>创建 SSH Key
ssh-keygen -t rsa -C &amp;#34;tangxiaomiemail@gmail.com&amp;#34; cd ~/.ssh cat id_rsa.pub 如果一切顺利的话，可以在用户主目录里找到 .ssh 目录，里面有 id_rsa 和 id_rsa.pub 两个文件，这两个就是 SSH Key 的秘钥对，id_rsa 是私钥，不能泄露出去，id_rsa.pub 是公钥，可以放心地告诉任何人.
全局配置
git config --global user.name &amp;#34;tangxiaomi&amp;#34; git config --global user.email &amp;#34;tangxiaomiemail@gmail.com&amp;#34; 非全局配置
git config user.name &amp;#34;tangxiaomi&amp;#34; git config user.email &amp;#34;tangxiaomiemail@gmail.com&amp;#34; 查看配置
git config --global user.name git config --global user.email 取消全局配置
git config --global --unset user.name git config --global --unset user.email git config --global user.name #(查看)全局配置账户是否已经移除 git config --global user.</description>
    </item>
    
    <item>
      <title>submodule</title>
      <link>https://cotan.top/docs/git/submodule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cotan.top/docs/git/submodule/</guid>
      <description>添加
git submodule add -b [指定分支] [仓库地址] [路径] example: git submodule add -b icarus https://github.com/im/hexo-theme.git themes/icarus 命令执行完成，会在当前工程根路径下生成一个名为 .gitmodules 的文件，其中记录了子模块的信息。
.gitmodules
[submodule &amp;#34;themes/icarus&amp;#34;] path = themes/icarus url = https://github.com/im/hexo-theme.git branch = icarus 更新
git submodule update 删除 submodule 的删除稍微麻烦点：首先，要在 .gitmodules 文件中删除相应配置信息。然后，执行 git rm –cached 命令将子模块所在的文件从 git 中删除。
下载的工程带有 submodule
git submodule update --init --recursive 查看 sumodule 状态
git submodule foreach git status 不能更新
git submodule update --remote </description>
    </item>
    
    <item>
      <title>view-transition</title>
      <link>https://cotan.top/docs/css/view-transition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cotan.top/docs/css/view-transition/</guid>
      <description>如何使用 CSS View-Transition？
使用 CSS View-Transition 非常简单。我们只需要为目标元素添加一些必要的 CSS 属性即可。
首先，为目标元素添加 transition 属性，指定过渡的属性和持续时间。例如：
.element { transition: width 0.3s ease-in-out; } 在上面的例子中，我们指定了 width 属性在 0.3 秒内进行过渡，并且使用了 ease-in-out 缓动函数。
接下来，我们可以通过添加一些触发事件来激活过渡效果。例如，我们可以使用鼠标悬停事件来触发过渡效果：
.element:hover { width: 200px; } 在上面的例子中，当鼠标悬停在 .element 元素上时，它的宽度将过渡到 200 像素。
CSS View-Transition 的常用属性
除了 transition 属性外，CSS View-Transition 还提供了其他一些常用属性，用于进一步控制过渡效果。
transition-property：指定过渡的属性。可以使用多个属性，用逗号分隔。 transition-duration：指定过渡的持续时间。 transition-timing-function：指定过渡的缓动函数。 transition-delay：指定过渡的延迟时间。 使用场景示例
图片展示过渡 &amp;lt;div class=&amp;#34;image-container&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;image1.jpg&amp;#34; alt=&amp;#34;Image 1&amp;#34; class=&amp;#34;image&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;image2.jpg&amp;#34; alt=&amp;#34;Image 2&amp;#34; class=&amp;#34;image&amp;#34;&amp;gt; &amp;lt;/div&amp;gt; .image-container { display: flex; } .image { transition: transform 0.</description>
    </item>
    
    <item>
      <title>Vue Router 中的 back 和 go 方法的使用</title>
      <link>https://cotan.top/docs/vue/vue-router-go-back/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cotan.top/docs/vue/vue-router-go-back/</guid>
      <description>使用 back 方法
back 方法用于导航到上一个历史记录。它相当于用户点击浏览器的后退按钮。下面是使用 back 方法的示例代码：
// 在 Vue 组件中使用 back 方法 methods: { goBack() { this.$router.back(); } } 在上述代码中，我们定义了一个名为 goBack 的方法。当用户调用该方法时，this.$router.back() 会被执行，从而导航到上一个历史记录。这将触发相应的路由导航守卫，以确保导航的顺利进行。
使用 go 方法
go 方法用于在历史记录中进行相对导航。它接受一个整数参数，表示要前进或后退的步数。下面是使用 go 方法的示例代码：
// 在 Vue 组件中使用 go 方法 methods: { goForward() { this.$router.go(1); }, goBackward() { this.$router.go(-1); } } 在上述代码中，我们定义了两个方法：goForward 和 goBackward。goForward 方法调用 this.$router.go(1)，向前导航一步；而 goBackward 方法调用 this.$router.go(-1)，后退一步。通过修改参数，你可以在历史记录中进行任意步数的导航。
需要注意的是，back 方法和 go 方法只能用于导航到已经访问过的路由，而不能用于导航到新的路由。如果需要在 Vue 组件中进行路由导航到新的路由，可以使用 &amp;lt;router-link&amp;gt; 组件或编程式导航的方式来实现。
方法的内部实现
下面是 go 方法和 back 方法的简单实现代码：</description>
    </item>
    
    <item>
      <title>命令手册</title>
      <link>https://cotan.top/docs/git/guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cotan.top/docs/git/guide/</guid>
      <description>这是一份 Git 命令的快速查找手册，包含了 Git 的常用命令和基本用法。快速找到你需要的命令和用法，让你的 Git 使用更加轻松自如。
初始化
git init : 初始化一个 Git 仓库。 git clone &amp;lt;URL&amp;gt; : 克隆一个远程 Git 仓库。 添加与提交
git add &amp;lt;file&amp;gt; : 将文件添加到暂存区。 git add . : 将所有修改添加到暂存区。 git commit -m &amp;quot;&amp;lt;message&amp;gt;&amp;quot; : 提交变更并附上提交信息。 git commit -a : 跳过暂存区，直接提交所有变更。 分支和合并
git branch : 列出当前仓库的所有分支。 git branch &amp;lt;branch&amp;gt; : 创建一个新分支。 git checkout &amp;lt;branch&amp;gt; : 切换到一个分支。 git checkout -b &amp;lt;branch&amp;gt; : 创建一个新的分支并立即切换到该分支。 git merge &amp;lt;branch&amp;gt; : 合并指定分支到当前分支。 git merge --no-ff &amp;lt;branch&amp;gt; : 强制 Git 创建一个新的合并提交，即使当前分支可以通过快进合并到指定分支。 推送与拉取</description>
    </item>
    
    <item>
      <title>将远程分支拉到本地</title>
      <link>https://cotan.top/docs/git/remote-branch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cotan.top/docs/git/remote-branch/</guid>
      <description>首先，使用 git remote 命令查看已经添加的远程仓库： git remote 然后，使用 git fetch 命令将远程分支拉取到本地仓库（不会进行合并）： git fetch origin remote_branch 最后，使用 git checkout 命令将远程分支切换到本地分支： git checkout local_branch 组合命令 git fetch origin remote_branch:local_branch 其中，remote_branch 为远程分支名称，origin 为远程仓库名称，local_branch 为本地分支名称，可以根据实际情况进行替换。</description>
    </item>
    
    <item>
      <title>高阶函数</title>
      <link>https://cotan.top/docs/javascript/higher-order-function/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cotan.top/docs/javascript/higher-order-function/</guid>
      <description>高阶函数的实现
下面是一个使用普通函数实现高阶函数的例子：
function map(arr, fn) { const mappedArr = []; for (let i=0; i&amp;lt;arr.length; i&amp;#43;&amp;#43;) { const val = fn(arr[i], i, arr); mappedArr.push(val); } return mappedArr; } 这个函数实现了一个非常常见的高阶函数——map()。它接受一个数组和一个函数作为参数，并返回一个新数组，这个新数组的元素是将原数组的每个元素传递给函数之后得到的新值。
使用箭头函数，我们可以更加简洁地实现同样的功能：
const map = (arr, fn) =&amp;gt; arr.map(fn); 这个例子中，我们用箭头函数实现了一个新的map()函数。它使用了原生的Array.map()方法实现了同样的功能，代码更加简洁和优雅。
高阶函数的示例
现在我们来看一些常见的高阶函数例子，以及它们如何用于实现通用的行为。
forEach() forEach()是一个很常见的高阶函数，它用于遍历数组。我们可以使用它将一个函数应用于数组的每个元素：
const numbers = [1, 2, 3, 4, 5]; numbers.forEach(num =&amp;gt; console.log(num)); 这将会打印数组中的每个数字。
filter() filter()是另一个常见的高阶函数，它用于过滤数组。我们可以使用它筛选出我们想要的元素：
const people = [ {name: &amp;#39;John&amp;#39;, age: 25}, {name: &amp;#39;Jane&amp;#39;, age: 30}, {name: &amp;#39;Bob&amp;#39;, age: 20} ]; const adults = people.</description>
    </item>
    
  </channel>
</rss>
