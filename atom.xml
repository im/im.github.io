<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>糖小米 · 笔记</title>
  
  <subtitle>厚积薄发</subtitle>
  <link href="https://tangxiaomi.top/atom.xml" rel="self"/>
  
  <link href="https://tangxiaomi.top/"/>
  <updated>2021-06-04T02:48:49.769Z</updated>
  <id>https://tangxiaomi.top/</id>
  
  <author>
    <name>糖小米</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title> 数组扁平化</title>
    <link href="https://tangxiaomi.top/2021/06/03/javascript/fa59b4bb32/"/>
    <id>https://tangxiaomi.top/2021/06/03/javascript/fa59b4bb32/</id>
    <published>2021-06-03T05:36:57.000Z</published>
    <updated>2021-06-04T02:48:49.769Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Array-prototype-flat"><a href="#Array-prototype-flat" class="headerlink" title="Array.prototype.flat()"></a>Array.prototype.flat()</h1><p><strong>flat()</strong> 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1.flat());</span><br><span class="line"><span class="comment">// expected output: [0, 1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, [[[<span class="number">3</span>, <span class="number">4</span>]]]];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr2.flat(<span class="number">2</span>));</span><br><span class="line"><span class="comment">// expected output: [0, 1, 2, [3, 4]]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="替代方案"><a href="#替代方案" class="headerlink" title="替代方案"></a>替代方案</h2><p>使用 reduce 与 concat</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 展开一层数组</span></span><br><span class="line">arr.flat();</span><br><span class="line"><span class="comment">// 等效于</span></span><br><span class="line">arr.reduce(<span class="function">(<span class="params">acc, val</span>) =&gt;</span> acc.concat(val), []);</span><br><span class="line"><span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用扩展运算符 ...</span></span><br><span class="line"><span class="keyword">const</span> flattened = <span class="function"><span class="params">arr</span> =&gt;</span> [].concat(...arr);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="reduce-concat-isArray-recursivity"><a href="#reduce-concat-isArray-recursivity" class="headerlink" title="reduce + concat + isArray + recursivity"></a>reduce + concat + isArray + recursivity</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 reduce、concat 和递归展开无限多层嵌套的数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>, [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]]];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatDeep</span>(<span class="params">arr, d = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> d &gt; <span class="number">0</span> ? arr.reduce(<span class="function">(<span class="params">acc, val</span>) =&gt;</span> acc.concat(<span class="built_in">Array</span>.isArray(val) ? flatDeep(val, d - <span class="number">1</span>) : val), [])</span><br><span class="line">                : arr.slice();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">flatDeep(arr1, <span class="literal">Infinity</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3, 1, 2, 3, 4, 2, 3, 4]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="forEach-isArray-push-recursivity"><a href="#forEach-isArray-push-recursivity" class="headerlink" title="forEach + isArray + push + recursivity"></a>forEach + isArray + push + recursivity</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// forEach 遍历数组会自动跳过空元素</span></span><br><span class="line"><span class="keyword">const</span> eachFlat = <span class="function">(<span class="params">arr = [], depth = <span class="number">1</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> result = []; <span class="comment">// 缓存递归结果</span></span><br><span class="line">  <span class="comment">// 开始递归</span></span><br><span class="line">  (<span class="function"><span class="keyword">function</span> <span class="title">flat</span>(<span class="params">arr, depth</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// forEach 会自动去除数组空位</span></span><br><span class="line">    arr.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 控制递归深度</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(item) &amp;&amp; depth &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 递归数组</span></span><br><span class="line">        flat(item, depth - <span class="number">1</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 缓存元素</span></span><br><span class="line">        result.push(item)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)(arr, depth)</span><br><span class="line">  <span class="comment">// 返回递归结果</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for of 循环不能去除数组空位，需要手动去除</span></span><br><span class="line"><span class="keyword">const</span> forFlat = <span class="function">(<span class="params">arr = [], depth = <span class="number">1</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> <span class="title">flat</span>(<span class="params">arr, depth</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(item) &amp;&amp; depth &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        flat(item, depth - <span class="number">1</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 去除空元素，添加非undefined元素</span></span><br><span class="line">        item !== <span class="keyword">void</span> <span class="number">0</span> &amp;&amp; result.push(item);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(arr, depth)</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用堆栈stack"><a href="#使用堆栈stack" class="headerlink" title="使用堆栈stack"></a>使用堆栈stack</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无递归数组扁平化，使用堆栈</span></span><br><span class="line"><span class="comment">// 注意：深度的控制比较低效，因为需要检查每一个值的深度</span></span><br><span class="line"><span class="comment">// 也可能在 shift / unshift 上进行 w/o 反转，但是末端的数组 OPs 更快</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>, [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]]];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> stack = [...input];</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  <span class="keyword">while</span> (stack.length) &#123;</span><br><span class="line">    <span class="comment">// 使用 pop 从 stack 中取出并移除值</span></span><br><span class="line">    <span class="keyword">const</span> next = stack.pop();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(next)) &#123;</span><br><span class="line">      <span class="comment">// 使用 push 送回内层数组中的元素，不会改动原始输入</span></span><br><span class="line">      stack.push(...next);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.push(next);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 反转恢复原数组的顺序</span></span><br><span class="line">  <span class="keyword">return</span> res.reverse();</span><br><span class="line">&#125;</span><br><span class="line">flatten(arr1);<span class="comment">// [1, 2, 3, 1, 2, 3, 4, 2, 3, 4]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归版本的反嵌套</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> flattend = [];</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> <span class="title">flat</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    array.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(el)) flat(el);</span><br><span class="line">      <span class="keyword">else</span> flattend.push(el);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)(array);</span><br><span class="line">  <span class="keyword">return</span> flattend;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>#javascript</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Array-prototype-flat&quot;&gt;&lt;a href=&quot;#Array-prototype-flat&quot; class=&quot;headerlink&quot; title=&quot;Array.prototype.flat()&quot;&gt;&lt;/a&gt;Array.prototype.flat()&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;flat()&lt;/strong&gt; 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; arr1 = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arr1.flat());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// expected output: [0, 1, 2, 3, 4]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; arr2 = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, [[[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]]]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(arr2.flat(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// expected output: [0, 1, 2, [3, 4]]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://tangxiaomi.top/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://tangxiaomi.top/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title> JavaScript里的循环方法：forEach，for-in，for-of</title>
    <link href="https://tangxiaomi.top/2021/06/03/javascript/cbbeb436fb/"/>
    <id>https://tangxiaomi.top/2021/06/03/javascript/cbbeb436fb/</id>
    <published>2021-06-03T02:02:28.000Z</published>
    <updated>2021-06-04T02:48:49.769Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript诞生已经有20多年了，我们一直使用的用来循环一个数组的方法是这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; myArray.length; index++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(myArray[index]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自从JavaScript5起，我们开始可以使用内置的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach">forEach</a> 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myArray.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>写法简单了许多，但也有短处：你不能中断循环(使用break语句或使用return语句。<br>JavaScript里还有一种循环方法：for–in。<br>for-in 循环实际是为循环<strong>enumerable</strong>对象而设计的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;obj.&quot;</span> + prop + <span class="string">&quot; = &quot;</span> + obj[prop]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出:</span></span><br><span class="line"><span class="comment">// &quot;obj.a = 1&quot;</span></span><br><span class="line"><span class="comment">// &quot;obj.b = 2&quot;</span></span><br><span class="line"><span class="comment">// &quot;obj.c = 3&quot;</span></span><br></pre></td></tr></table></figure><p>你也可以用它来循环一个数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index <span class="keyword">in</span> myArray) &#123;    <span class="comment">// 不推荐这样</span></span><br><span class="line">  <span class="built_in">console</span>.log(myArray[index]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不推荐用for-in来循环一个数组，因为，不像对象，数组的index跟普通的对象属性不一样，是重要的数值序列指标。<br>总之，for–in是用来循环带有字符串key的对象的方法。</p><h2 id="for-of循环"><a href="#for-of循环" class="headerlink" title="for-of循环"></a>for-of循环</h2><p>JavaScript6里引入了一种新的循环方法，它就是for-of循环，它既比传统的for循环简洁，同时弥补了forEach和for-in循环的短板。<br>我们看一下它的for-of的语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> myArray) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for-of的语法看起来跟for-in很相似，但它的功能却丰富的多，它能循环很多东西。</p><h2 id="for-of循环使用例子："><a href="#for-of循环使用例子：" class="headerlink" title="for-of循环使用例子："></a>for-of循环使用例子：</h2><h3 id="循环一个数组-Array"><a href="#循环一个数组-Array" class="headerlink" title="循环一个数组(Array):"></a>循环一个数组(Array):</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iterable = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="comment">// 20</span></span><br><span class="line"><span class="comment">// 30</span></span><br></pre></td></tr></table></figure><p>我们可以使用const来替代let，这样它就变成了在循环里的不可修改的静态变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iterable = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="comment">// 20</span></span><br><span class="line"><span class="comment">// 30</span></span><br></pre></td></tr></table></figure><h3 id="循环一个字符串："><a href="#循环一个字符串：" class="headerlink" title="循环一个字符串："></a>循环一个字符串：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iterable = <span class="string">&quot;boo&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;b&quot;</span></span><br><span class="line"><span class="comment">// &quot;o&quot;</span></span><br><span class="line"><span class="comment">// &quot;o&quot;</span></span><br></pre></td></tr></table></figure><h3 id="循环一个类型化的数组-TypedArray-："><a href="#循环一个类型化的数组-TypedArray-：" class="headerlink" title="循环一个类型化的数组(TypedArray)："></a>循环一个类型化的数组(TypedArray)：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iterable = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([<span class="number">0x00</span>, <span class="number">0xff</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 255</span></span><br></pre></td></tr></table></figure><h3 id="循环一个Map"><a href="#循环一个Map" class="headerlink" title="循环一个Map:"></a>循环一个Map:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iterable = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">&quot;a&quot;</span>, <span class="number">1</span>], [<span class="string">&quot;b&quot;</span>, <span class="number">2</span>], [<span class="string">&quot;c&quot;</span>, <span class="number">3</span>]]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> entry <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(entry);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [a, 1]</span></span><br><span class="line"><span class="comment">// [b, 2]</span></span><br><span class="line"><span class="comment">// [c, 3]</span></span><br></pre></td></tr></table></figure><h3 id="循环一个Set"><a href="#循环一个Set" class="headerlink" title="循环一个Set:"></a>循环一个Set:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iterable = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="循环一个-DOM-collection"><a href="#循环一个-DOM-collection" class="headerlink" title="循环一个 DOM collection"></a>循环一个 DOM collection</h3><p>循环一个DOM collections，比如NodeList，之前我们讨论过 <a href="http://www.webhek.com/foreach-queryselectorall-nodelist">如何循环一个NodeList</a> ，现在方便了，可以直接使用for-of循环：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Note: This will only work in platforms that have</span></span><br><span class="line"><span class="comment">// implemented NodeList.prototype[Symbol.iterator]</span></span><br><span class="line"><span class="keyword">let</span> articleParagraphs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;article &gt; p&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> paragraph <span class="keyword">of</span> articleParagraphs) &#123;</span><br><span class="line">  paragraph.classList.add(<span class="string">&quot;read&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环一个拥有enumerable属性的对象"><a href="#循环一个拥有enumerable属性的对象" class="headerlink" title="循环一个拥有enumerable属性的对象"></a>循环一个拥有enumerable属性的对象</h3><p>for–of循环并不能直接使用在普通的对象上，但如果我们按对象所拥有的属性进行循环，可使用内置的Object.keys()方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(someObject)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">&quot;: &quot;</span> + someObject[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环一个生成器-generators"><a href="#循环一个生成器-generators" class="headerlink" title="循环一个生成器(generators)"></a>循环一个生成器(generators)</h3><p>我们可循环一个生成器( <a href="https://www.webhek.com/en-US/docs/Web/JavaScript/Reference/Statements/function*">generators</a> ):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fibonacci</span>(<span class="params"></span>) </span>&#123; <span class="comment">// a generator function</span></span><br><span class="line">  <span class="keyword">let</span> [prev, curr] = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    [prev, curr] = [curr, prev + curr];</span><br><span class="line">    <span class="keyword">yield</span> curr;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> n <span class="keyword">of</span> fibonacci()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(n);</span><br><span class="line">  <span class="comment">// truncate the sequence at 1000</span></span><br><span class="line">  <span class="keyword">if</span> (n &gt;= <span class="number">1000</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#javascript</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;JavaScript诞生已经有20多年了，我们一直使用的用来循环一个数组的方法是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/sp</summary>
      
    
    
    
    <category term="javascript" scheme="https://tangxiaomi.top/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://tangxiaomi.top/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title> 为什么要用setTimeout来模拟setInterval</title>
    <link href="https://tangxiaomi.top/2021/06/03/interview/ac86bf5243/"/>
    <id>https://tangxiaomi.top/2021/06/03/interview/ac86bf5243/</id>
    <published>2021-06-03T01:49:36.000Z</published>
    <updated>2021-06-04T02:48:49.769Z</updated>
    
    <content type="html"><![CDATA[<p>setTimeout(fn,time): 等待time时间后执行fn<br>setInterval(fn,time):  每隔time时间执行fn</p><p>我们希望setInterval是每隔一段时间自动执行，但是实际应用中，setInterval并不会按照我们预想的那样，它通常存在如下两个缺点。</p><pre><code>1. 在执行的时候可能会跳过指定时间间隔2. 多个定时器函数会立刻执行</code></pre><p>我们就实际场景来说一下这两个缺陷</p><a id="more"></a><h2 id="时间间隔"><a href="#时间间隔" class="headerlink" title="时间间隔"></a>时间间隔</h2><p>首先明确一个概念，定时器的时间间隔指的是什么？<br>它不是指函数的执行时间，而是函数<strong>被推入到消息队列的时间</strong>。<br>也就是说每隔time时间，fn就会被放入消息队列中，而不是执行。另外何时执行取决于何时被主线程的事件循环取到</p><p>另外，如果前一个任务没有被执行，也就是还处于消息队列中怎么办呢？ 浏览器规定<strong>：只有当前消息队列中不存在该任务，才会将下一个任务推进去</strong></p><p><img src="/images/20200609111645389.png"></p><p>我们分析一下上面的情况，</p><pre><code>* 隔了100ms之后，将t1推进去，因为js栈中主进程还没有执行完，所以t1这时候等待执行，* 又过了100ms，t1已经执行，t2被压入队列中* 又过了100ms，t1还没执行完，t2还存在在消息队列中，所以t3根据规定不能被压入队列中</code></pre><p>所以这时候你就会发现，t1 、 t2是连续执行的，他们之间没有时间间隔，满足不了我们的需求。</p><p>而我们可以用setTimeout模拟来弥补这两个缺陷。</p><h2 id="setTimeout-模拟-setInterval"><a href="#setTimeout-模拟-setInterval" class="headerlink" title="setTimeout 模拟 setInterval"></a>setTimeout 模拟 setInterval</h2><p>可以这么理解：<br>setTimeout执行后会立刻将fn放入到消息队列中，而setInterval每次在放入之前都会判断消息队列中存不存在上一个任务。</p><p>setTimeout的执行机制，也就是浏览器的事件循环机制，setTimeout是一个宏任务，当js栈空了，就会依次执行宏任务。</p><p>代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//.....</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(a,time)</span><br><span class="line"></span><br><span class="line">&#125;,time)</span><br></pre></td></tr></table></figure><h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2><p>在一个定时器执行完以前不会插入另一个定时器<br>确保了每个函数执行的等待时间间隔</p><p>#Interview/javascript #javascript</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;setTimeout(fn,time): 等待time时间后执行fn&lt;br&gt;setInterval(fn,time):  每隔time时间执行fn&lt;/p&gt;
&lt;p&gt;我们希望setInterval是每隔一段时间自动执行，但是实际应用中，setInterval并不会按照我们预想的那样，它通常存在如下两个缺点。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 在执行的时候可能会跳过指定时间间隔
2. 多个定时器函数会立刻执行
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们就实际场景来说一下这两个缺陷&lt;/p&gt;</summary>
    
    
    
    <category term="Interview" scheme="https://tangxiaomi.top/categories/Interview/"/>
    
    
    <category term="javascript" scheme="https://tangxiaomi.top/tags/javascript/"/>
    
    <category term="Interview" scheme="https://tangxiaomi.top/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title> JS事件循环（Event Loop）</title>
    <link href="https://tangxiaomi.top/2021/06/03/javascript/ef320f6e2a/"/>
    <id>https://tangxiaomi.top/2021/06/03/javascript/ef320f6e2a/</id>
    <published>2021-06-03T01:49:36.000Z</published>
    <updated>2021-06-04T02:48:49.769Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>众所周知，JavaScript 是一门单线程语言，虽然在 html5 中提出了 Web-Worker ，但这并未改变 JavaScript 是单线程这一核心,，可是浏览器又能很好的处理异步请求，那么到底是为什么呢？  </p></blockquote><p><strong>浏览器执行线程</strong></p><blockquote><p>在解释事件循环之前首先先解释一下浏览器的执行线程：<br>浏览器是多进程的，浏览器每一个 tab 标签都代表一个独立的进程，其中浏览器渲染进程（浏览器内核）属于浏览器多进程中的一种，主要负责页面渲染，脚本执行，事件处理等<br>其包含的线程有：GUI 渲染线程（负责渲染页面，解析 HTML，CSS 构成 DOM 树）、JS 引擎线程、事件触发线程、定时器触发线程、http 请求线程等主要线程  </p></blockquote><a id="more"></a><h3 id="关于执行中的线程："><a href="#关于执行中的线程：" class="headerlink" title="关于执行中的线程："></a>关于执行中的线程：</h3><p><strong>主线程</strong>：也就是 js 引擎执行的线程，这个线程只有一个，页面渲染、函数处理都在这个主线程上执行。<br><strong>工作线程</strong>：也称幕后线程，这个线程可能存在于浏览器或js引擎内，与主线程是分开的，处理文件读取、网络请求等异步事件。<br><strong>任务队列( Event Queue )</strong></p><blockquote><p>所有的任务可以分为同步任务和异步任务，同步任务，顾名思义，就是立即执行的任务，同步任务一般会直接进入到主线程中执行；而异步任务，就是异步执行的任务，比如ajax网络请求，setTimeout 定时函数等都属于异步任务，异步任务会通过任务队列的机制(先进先出的机制)来进行协调。具体的可以用下面的图来大致说明一下：  </p></blockquote><p><img src="/images/v2-1337770fcc29d10325ee4eb127496fff_1440w.jpg"></p><h3 id="同步和异步任务分别进入不同的执行环境，同步的进入主线程，即主执行栈，异步的进入任务队列。主线程内的任务执行完毕为空，会去任务队列读取对应的任务，推入主线程执行。-上述过程的不断重复就是我们说的-Event-Loop-事件循环-。"><a href="#同步和异步任务分别进入不同的执行环境，同步的进入主线程，即主执行栈，异步的进入任务队列。主线程内的任务执行完毕为空，会去任务队列读取对应的任务，推入主线程执行。-上述过程的不断重复就是我们说的-Event-Loop-事件循环-。" class="headerlink" title="同步和异步任务分别进入不同的执行环境，同步的进入主线程，即主执行栈，异步的进入任务队列。主线程内的任务执行完毕为空，会去任务队列读取对应的任务，推入主线程执行。 上述过程的不断重复就是我们说的 Event Loop (事件循环)。"></a>同步和异步任务分别进入不同的执行环境，同步的进入主线程，即主执行栈，异步的进入任务队列。主线程内的任务执行完毕为空，会去任务队列读取对应的任务，推入主线程执行。 上述过程的不断重复就是我们说的 Event Loop (事件循环)。</h3><p>在事件循环中，每进行一次循环操作称为tick，通过阅读规范可知，每一次 tick 的任务处理模型是比较复杂的，其关键的步骤可以总结如下：</p><ol><li>在此次 tick 中选择最先进入队列的任务( oldest task )，如果有则执行(一次)</li><li>检查是否存在 Microtasks ，如果存在则不停地执行，直至清空Microtask Queue</li><li>更新 render</li><li>主线程重复执行上述步骤</li></ol><p>可以用一张图来说明下流程：</p><p><img src="/images/v2-a38ad24f9109e1a4cb7b49cc1b90cafe_1440w.jpg"></p><p>这里相信有人会想问，什么是 microtasks ?规范中规定，task分为两大类, 分别是 Macro Task （宏任务）和 Micro Task（微任务）, 并且每个宏任务结束后, 都要清空所有的微任务,这里的 Macro Task也是我们常说的 task ，有些文章并没有对其做区分，后面文章中所提及的task皆看做宏任务( macro task)。</p><p><strong>宏任务主要包含：script( 整体代码)、setTimeout、setInterval、I/O、UI 交互事件、setImmediate(Node.js 环境)</strong></p><p><strong>微任务主要包含：Promise、MutaionObserver、process.nextTick(Node.js 环境)</strong></p><p>setTimeout/Promise 等API便是任务源，而进入任务队列的是由他们指定的具体执行任务。来自不同任务源的任务会进入到不同的任务队列。其中 setTimeout 与 setInterval 是同源的。</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>掌握概念之后，我们来做一个例子强化一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;script start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(**<span class="function"><span class="keyword">function</span>**(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(**<span class="function"><span class="keyword">function</span>**(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;promise1&#x27;</span>);</span><br><span class="line">&#125;).then(**<span class="function"><span class="keyword">function</span>**(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;promise2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;script end&#x27;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>整体 script 作为第一个宏任务进入主线程，遇到 console.log，输出 script start<br>遇到 setTimeout，其回调函数被分发到宏任务 Event Queue 中<br>遇到 Promise，其 then函数被分到到微任务 Event Queue 中,记为 then1，之后又遇到了 then 函数，将其分到微任务 Event Queue 中，记为 then2<br>遇到 console.log，输出 script end  </p></blockquote><p><strong>至此，Event Queue 中存在三个任务：宏任务：setTimeout 微任务：then1、then2</strong></p><p>执行微任务，首先执行then1，输出 promise1, 然后执行 then2，输出 promise2，这样就清空了所有微任务<br>执行 setTimeout 任务，输出 setTimeout 至此，输出的顺序是：script start, script end, promise1, promise2, setTimeout<br>再来一个题目，来做个练习：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;script start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(**<span class="function"><span class="keyword">function</span>**(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;timeout1&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">**<span class="keyword">new</span>** <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;promise1&#x27;</span>);</span><br><span class="line">    resolve();</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;timeout2&#x27;</span>), <span class="number">10</span>);</span><br><span class="line">&#125;).then(**<span class="function"><span class="keyword">function</span>**(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;then1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;script end&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这个题目就稍微有点复杂了，我们再分析下：<br>首先，事件循环从宏任务 (macrotask) 队列开始，最初始，宏任务队列中，只有一个 scrip t(整体代码)任务；当遇到任务源 (task source) 时，则会先分发任务到对应的任务队列中去。所以，就和上面例子类似，首先遇到了console.log，输出 script start； 接着往下走，遇到 setTimeout 任务源，将其分发到任务队列中去，记为 timeout1； 接着遇到 promise，new promise 中的代码立即执行，输出 promise1, 然后执行 resolve ,遇到 setTimeout ,将其分发到任务队列中去，记为 timemout2, 将其 then 分发到微任务队列中去，记为 then1； 接着遇到 console.log 代码，直接输出 script end 接着检查微任务队列，发现有个 then1 微任务，执行，输出then1 再检查微任务队列，发现已经清空，则开始检查宏任务队列，执行 timeout1,输出 timeout1； 接着执行 timeout2，输出 timeout2 至此，所有的都队列都已清空，执行完毕。其输出的顺序依次是：script start, promise1, script end, then1, timeout1, timeout2</p><p>用流程图看更清晰：<br><img src="/images/v2-a3ac02a230c49c9aa8c45af46eae2e1c_1440w.jpg"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>总结<br>有个小 tip：从规范来看，microtask 优先于 task 执行，所以如果有需要优先执行的逻辑，放入microtask 队列会比 task 更早的被执行。</p><p><strong>最后的最后，记住，JavaScript 是一门单线程语言，异步操作都是放到事件循环队列里面，等待主执行栈来执行的，并没有专门的异步执行线程。</strong></p><p>#javascript</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;众所周知，JavaScript 是一门单线程语言，虽然在 html5 中提出了 Web-Worker ，但这并未改变 JavaScript 是单线程这一核心,，可是浏览器又能很好的处理异步请求，那么到底是为什么呢？  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;浏览器执行线程&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在解释事件循环之前首先先解释一下浏览器的执行线程：&lt;br&gt;浏览器是多进程的，浏览器每一个 tab 标签都代表一个独立的进程，其中浏览器渲染进程（浏览器内核）属于浏览器多进程中的一种，主要负责页面渲染，脚本执行，事件处理等&lt;br&gt;其包含的线程有：GUI 渲染线程（负责渲染页面，解析 HTML，CSS 构成 DOM 树）、JS 引擎线程、事件触发线程、定时器触发线程、http 请求线程等主要线程  &lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="javascript" scheme="https://tangxiaomi.top/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://tangxiaomi.top/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title> Windows下如何查看某个端口被谁占用</title>
    <link href="https://tangxiaomi.top/2021/06/03/Windows/0748fd3045/"/>
    <id>https://tangxiaomi.top/2021/06/03/Windows/0748fd3045/</id>
    <published>2021-06-03T00:00:00.000Z</published>
    <updated>2021-06-04T02:48:49.769Z</updated>
    
    <content type="html"><![CDATA[<p>开始—-&gt;运行—-&gt; <code>cmd</code> ，或者是 <code>window+R</code> 组合键，调出命令窗口。</p><h2 id="查找所有运行的端口"><a href="#查找所有运行的端口" class="headerlink" title="查找所有运行的端口"></a>查找所有运行的端口</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano</span><br></pre></td></tr></table></figure><h2 id="查看被占用端口对应的-PID"><a href="#查看被占用端口对应的-PID" class="headerlink" title="查看被占用端口对应的 PID"></a>查看被占用端口对应的 PID</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -aon|findstr &quot;8081&quot;</span><br></pre></td></tr></table></figure><h2 id="查看指定-PID-的进程"><a href="#查看指定-PID-的进程" class="headerlink" title="查看指定 PID 的进程"></a>查看指定 PID 的进程</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist|findstr &quot;9088&quot;</span><br></pre></td></tr></table></figure><h2 id="结束进程"><a href="#结束进程" class="headerlink" title="结束进程"></a>结束进程</h2><p>强制（/F参数）杀死 pid 为 9088 的所有进程包括子进程（/T参数）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskkill /T /F /PID 9088</span><br></pre></td></tr></table></figure><p>#Windows#</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;开始—-&amp;gt;运行—-&amp;gt; &lt;code&gt;cmd&lt;/code&gt; ，或者是 &lt;code&gt;window+R&lt;/code&gt; 组合键，调出命令窗口。&lt;/p&gt;
&lt;h2 id=&quot;查找所有运行的端口&quot;&gt;&lt;a href=&quot;#查找所有运行的端口&quot; class=&quot;headerlink&quot; t</summary>
      
    
    
    
    <category term="Windows" scheme="https://tangxiaomi.top/categories/Windows/"/>
    
    
    <category term="Windows" scheme="https://tangxiaomi.top/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title> Flex 布局教程：语法篇</title>
    <link href="https://tangxiaomi.top/2021/06/03/css/457b24fe23/"/>
    <id>https://tangxiaomi.top/2021/06/03/css/457b24fe23/</id>
    <published>2021-06-03T00:00:00.000Z</published>
    <updated>2021-06-04T02:48:49.769Z</updated>
    
    <content type="html"><![CDATA[<p>网页布局（layout）是 CSS 的一个重点应用。</p><p><img src="/images/bg2015071001.gif"><br>布局的传统解决方案，基于 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box_model">盒状模型</a> ，依赖 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/display">display</a> 属性 + <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position">position</a> 属性 + <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/float">float</a> 属性。它对于那些特殊布局非常不方便，比如， <a href="https://css-tricks.com/centering-css-complete-guide/">垂直居中</a> 就不容易实现。</p><p><img src="/images/bg2015071002.png"><br>2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p><p><img src="/images/bg2015071003.jpg"><br>Flex 布局将成为未来布局的首选方案。本文介绍它的语法， <a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html">下一篇文章</a> 给出常见布局的 Flex 写法。网友 <a href="http://vgee.cn/">JailBreak</a> 为本文的所有示例制作了 <a href="http://static.vgee.cn/static/index.html">Demo</a> ，也可以参考。</p><p>以下内容主要参考了下面两篇文章： <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">A Complete Guide to Flexbox</a> 和 <a href="https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties">A Visual Guide to CSS3 Flexbox Properties</a> 。</p><a id="more"></a><h2 id="一、Flex-布局是什么？"><a href="#一、Flex-布局是什么？" class="headerlink" title="一、Flex 布局是什么？"></a>一、Flex 布局是什么？</h2><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p><p>任何一个容器都可以指定为 Flex 布局。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>行内元素也可以使用 Flex 布局。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">  display: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Webkit 内核的浏览器，必须加上 <code>-webkit</code> 前缀。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">  display: -webkit-flex; /* Safari */</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，设为 Flex 布局以后，子元素的 <code>float</code>、<code>clear</code> 和 <code>vertical-align</code> 属性将失效。</p><h2 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h2><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p><p><img src="/images/bg2015071004.png"><br>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做 <code>main start</code> ，结束位置叫做 <code>main end</code> ；交叉轴的开始位置叫做 <code>cross start</code> ，结束位置叫做 <code>cross end</code> 。</p><p>项目默认沿主轴排列。单个项目占据的主轴空间叫做 <code>main size</code> ，占据的交叉轴空间叫做 <code>cross size</code> 。</p><h2 id="三、容器的属性"><a href="#三、容器的属性" class="headerlink" title="三、容器的属性"></a>三、容器的属性</h2><p>以下6个属性设置在容器上。</p><ul><li>flex-direction</li><li>flex-wrap</li><li>flex-flow</li><li>justify-content</li><li>align-items</li><li>align-content</li></ul><h3 id="3-1-flex-direction属性"><a href="#3-1-flex-direction属性" class="headerlink" title="3.1 flex-direction属性"></a>3.1 flex-direction属性</h3><p><code>flex-direction</code> 属性决定主轴的方向（即项目的排列方向）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  flex-direction: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/bg2015071005.png"><br>它可能有4个值。</p><ul><li><code>row</code> （默认值）：主轴为水平方向，起点在左端。</li><li><code>row-reverse</code> ：主轴为水平方向，起点在右端。</li><li><code>column</code> ：主轴为垂直方向，起点在上沿。</li><li><code>column-reverse</code> ：主轴为垂直方向，起点在下沿。</li></ul><h3 id="3-2-flex-wrap属性"><a href="#3-2-flex-wrap属性" class="headerlink" title="3.2 flex-wrap属性"></a>3.2 flex-wrap属性</h3><p>默认情况下，项目都排在一条线（又称”轴线”）上。 <code>flex-wrap</code> 属性定义，如果一条轴线排不下，如何换行。</p><p><img src="/images/bg2015071006.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">  flex-wrap: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它可能取三个值。</p><p>（1） <code>nowrap</code> （默认）：不换行。</p><p><img src="/images/bg2015071007.png"><br>（2） <code>wrap</code> ：换行，第一行在上方。</p><p><img src="/images/bg2015071008.jpg"><br>（3） <code>wrap-reverse</code> ：换行，第一行在下方。</p><p><img src="/images/bg2015071009.jpg"></p><h3 id="3-3-flex-flow"><a href="#3-3-flex-flow" class="headerlink" title="3.3 flex-flow"></a>3.3 flex-flow</h3><p><code>flex-flow</code> 属性是 <code>flex-direction</code> 属性和 <code>flex-wrap</code> 属性的简写形式，默认值为 <code>row nowrap</code> 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-justify-content属性"><a href="#3-4-justify-content属性" class="headerlink" title="3.4 justify-content属性"></a>3.4 justify-content属性</h3><p><code>justify-content</code> 属性定义了项目在主轴上的对齐方式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  justify-content: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/bg2015071010.png"><br>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p><ul><li><code>flex-start</code> （默认值）：左对齐</li><li><code>flex-end</code> ：右对齐</li><li><code>center</code> ： 居中</li><li><code>space-between</code> ：两端对齐，项目之间的间隔都相等。</li><li><code>space-around</code> ：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul><h3 id="3-5-align-items属性"><a href="#3-5-align-items属性" class="headerlink" title="3.5 align-items属性"></a>3.5 align-items属性</h3><p><code>align-items</code> 属性定义项目在交叉轴上如何对齐。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  align-items: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/bg2015071011.png"><br>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p><ul><li><code>flex-start</code> ：交叉轴的起点对齐。</li><li><code>flex-end</code> ：交叉轴的终点对齐。</li><li><code>center</code> ：交叉轴的中点对齐。</li><li><code>baseline</code>: 项目的第一行文字的基线对齐。</li><li><code>stretch</code> （默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul><h3 id="3-6-align-content属性"><a href="#3-6-align-content属性" class="headerlink" title="3.6 align-content属性"></a>3.6 align-content属性</h3><p><code>align-content</code> 属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  align-content: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/bg2015071012.png"><br>该属性可能取6个值。</p><ul><li><code>flex-start</code> ：与交叉轴的起点对齐。</li><li><code>flex-end</code> ：与交叉轴的终点对齐。</li><li><code>center</code> ：与交叉轴的中点对齐。</li><li><code>space-between</code> ：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li><code>space-around</code> ：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li><code>stretch</code> （默认值）：轴线占满整个交叉轴。</li></ul><h3 id="四、项目的属性"><a href="#四、项目的属性" class="headerlink" title="四、项目的属性"></a>四、项目的属性</h3><p>以下6个属性设置在项目上。</p><ul><li><code>order</code></li><li><code>flex-grow</code></li><li><code>flex-shrink</code></li><li><code>flex-basis</code></li><li><code>flex</code></li><li><code>align-self</code></li></ul><h3 id="4-1-order属性"><a href="#4-1-order属性" class="headerlink" title="4.1 order属性"></a>4.1 order属性</h3><p><code>order</code> 属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  order: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/bg2015071013.png"></p><h3 id="4-2-flex-grow属性"><a href="#4-2-flex-grow属性" class="headerlink" title="4.2 flex-grow属性"></a>4.2 flex-grow属性</h3><p><code>flex-grow</code> 属性定义项目的放大比例，默认为 <code>0</code> ，即如果存在剩余空间，也不放大。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  flex-grow: &lt;number&gt;; /* default 0 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/bg2015071014.png"><br>如果所有项目的 <code>flex-grow</code> 属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的 <code>flex-grow</code> 属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p><h3 id="4-3-flex-shrink属性"><a href="#4-3-flex-shrink属性" class="headerlink" title="4.3 flex-shrink属性"></a>4.3 flex-shrink属性</h3><p><code>flex-shrink</code> 属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  flex-shrink: &lt;number&gt;; /* default 1 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/bg2015071015.jpg"><br>如果所有项目的 <code>flex-shrink</code> 属性都为1，当空间不足时，都将等比例缩小。如果一个项目的 <code>flex-shrink</code> 属性为0，其他项目都为1，则空间不足时，前者不缩小。</p><p>负值对该属性无效。</p><h3 id="4-4-flex-basis属性"><a href="#4-4-flex-basis属性" class="headerlink" title="4.4 flex-basis属性"></a>4.4 flex-basis属性</h3><p><code>flex-basis</code> 属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为 <code>auto</code> ，即项目的本来大小。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  flex-basis: &lt;length&gt; | auto; /* default auto */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它可以设为跟 <code>width</code> 或 <code>height</code> 属性一样的值（比如350px），则项目将占据固定空间。</p><h3 id="4-5-flex属性"><a href="#4-5-flex属性" class="headerlink" title="4.5 flex属性"></a>4.5 flex属性</h3><p><code>flex</code> 属性是 <code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code> 的简写，默认值为 <code>0 1 auto</code> 。后两个属性可选。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  flex: none | [ &lt;&#x27;flex-grow&#x27;&gt; &lt;&#x27;flex-shrink&#x27;&gt;? || &lt;&#x27;flex-basis&#x27;&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该属性有两个快捷值： <code>auto</code> ( <code>1 1 auto</code> ) 和 none ( <code>0 0 auto</code> )。</p><p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p><h3 id="4-6-align-self属性"><a href="#4-6-align-self属性" class="headerlink" title="4.6 align-self属性"></a>4.6 align-self属性</h3><p><code>align-self</code> 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 <code>align-items</code> 属性。默认值为 <code>auto</code> ，表示继承父元素的 <code>align-items</code> 属性，如果没有父元素，则等同于 <code>stretch</code> 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  align-self: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/bg2015071016.png"><br>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p><p>（完）</p><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">Flex 布局教程：语法篇</a></p><p>#css</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;网页布局（layout）是 CSS 的一个重点应用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/bg2015071001.gif&quot;&gt;&lt;br&gt;布局的传统解决方案，基于 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/box_model&quot;&gt;盒状模型&lt;/a&gt; ，依赖 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/display&quot;&gt;display&lt;/a&gt; 属性 + &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/position&quot;&gt;position&lt;/a&gt; 属性 + &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/float&quot;&gt;float&lt;/a&gt; 属性。它对于那些特殊布局非常不方便，比如， &lt;a href=&quot;https://css-tricks.com/centering-css-complete-guide/&quot;&gt;垂直居中&lt;/a&gt; 就不容易实现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/bg2015071002.png&quot;&gt;&lt;br&gt;2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/bg2015071003.jpg&quot;&gt;&lt;br&gt;Flex 布局将成为未来布局的首选方案。本文介绍它的语法， &lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/07/flex-examples.html&quot;&gt;下一篇文章&lt;/a&gt; 给出常见布局的 Flex 写法。网友 &lt;a href=&quot;http://vgee.cn/&quot;&gt;JailBreak&lt;/a&gt; 为本文的所有示例制作了 &lt;a href=&quot;http://static.vgee.cn/static/index.html&quot;&gt;Demo&lt;/a&gt; ，也可以参考。&lt;/p&gt;
&lt;p&gt;以下内容主要参考了下面两篇文章： &lt;a href=&quot;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&quot;&gt;A Complete Guide to Flexbox&lt;/a&gt; 和 &lt;a href=&quot;https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties&quot;&gt;A Visual Guide to CSS3 Flexbox Properties&lt;/a&gt; 。&lt;/p&gt;</summary>
    
    
    
    <category term="css" scheme="https://tangxiaomi.top/categories/css/"/>
    
    
    <category term="css" scheme="https://tangxiaomi.top/tags/css/"/>
    
  </entry>
  
  <entry>
    <title> css 中的 bfc（Block Formatting Contexts）</title>
    <link href="https://tangxiaomi.top/2021/06/03/css/496c418247/"/>
    <id>https://tangxiaomi.top/2021/06/03/css/496c418247/</id>
    <published>2021-06-03T00:00:00.000Z</published>
    <updated>2021-06-04T02:48:49.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常见定位方案"><a href="#常见定位方案" class="headerlink" title="常见定位方案"></a>常见定位方案</h2><p>在讲 BFC 之前，我们先来了解一下常见的定位方案，定位方案是控制元素的布局，有三种常见方案:</p><ul><li>普通流 (normal flow)</li></ul><blockquote><p>在普通流中，元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。    </p></blockquote><a id="more"></a><ul><li>浮动 (float)</li></ul><blockquote><p>在浮动布局中，元素首先按照普通流的位置出现，然后根据浮动的方向尽可能的向左边或右边偏移，其效果与印刷排版中的文本环绕相似。    </p></blockquote><ul><li>绝对定位 (absolute positioning)</li></ul><blockquote><p>在绝对定位布局中，元素会整体脱离普通流，因此绝对定位元素不会对其兄弟元素造成影响，而元素具体的位置由绝对定位的坐标决定。    </p></blockquote><h2 id="BFC-概念"><a href="#BFC-概念" class="headerlink" title="BFC 概念"></a>BFC 概念</h2><p>Formatting context(格式化上下文) 是 W3C CSS2.1 规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。</p><p>那么 BFC 是什么呢？</p><p>BFC 即 <code>Block Formatting Contexts</code> (块级格式化上下文)，它属于上述定位方案的普通流。</p><p><strong>具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。</strong></p><p>通俗一点来讲，可以把 BFC 理解为一个封闭的大箱子，箱子内部的元素无论如何翻江倒海，都不会影响到外部。</p><h2 id="触发-BFC"><a href="#触发-BFC" class="headerlink" title="触发 BFC"></a>触发 BFC</h2><p>只要元素满足下面任一条件即可触发 BFC 特性：</p><ul><li>body 根元素</li><li>浮动元素：float 除 none 以外的值</li><li>绝对定位元素：position (absolute、fixed)</li><li>display 为 inline-block、table-cells、flex</li><li>overflow 除了 visible 以外的值 (hidden、auto、scroll)</li></ul><h2 id="BFC-特性及应用"><a href="#BFC-特性及应用" class="headerlink" title="BFC 特性及应用"></a>BFC 特性及应用</h2><h3 id="同一个-BFC-下外边距会发生折叠"><a href="#同一个-BFC-下外边距会发生折叠" class="headerlink" title="同一个 BFC 下外边距会发生折叠"></a>同一个 BFC 下外边距会发生折叠</h3><p>从效果上看，因为两个 div 元素都处于同一个 BFC 容器下 (这里指 body 元素) 所以第一个 div 的下边距和第二个 div 的上边距发生了重叠，所以两个盒子之间距离只有 100px，而不是 200px。</p><iframe height="300" style="width: 100%;" scrolling="no" title="BFC边距重叠1" src="https://codepen.io/tangxiaomi/embed/odgNqg?height=300&theme-id=37757&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/tangxiaomi/pen/odgNqg'>BFC边距重叠1</a> by 糖小米 .  (<a href='https://codepen.io/tangxiaomi'>@tangxiaomi</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe><p>首先这不是 CSS 的 bug，我们可以理解为一种规范，<strong>如果想要避免外边距的重叠，可以将其放在不同的 BFC 容器中。</strong></p><iframe height="300" style="width: 100%;" scrolling="no" title="BFC边距重叠2" src="https://codepen.io/tangxiaomi/embed/RyNwJR?height=300&theme-id=37757&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/tangxiaomi/pen/RyNwJR'>BFC边距重叠2</a> by 糖小米 .  (<a href='https://codepen.io/tangxiaomi'>@tangxiaomi</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe><p><strong>### BFC 可以包含浮动的元素（清除浮动）</strong></p><p>我们都知道，浮动的元素会脱离普通文档流，来看下下面一个例子</p><iframe height="300" style="width: 100%;" scrolling="no" title="BFC浮动1" src="https://codepen.io/tangxiaomi/embed/LmEYXV?height=300&theme-id=37757&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/tangxiaomi/pen/LmEYXV'>BFC浮动1</a> by 糖小米 .  (<a href='https://codepen.io/tangxiaomi'>@tangxiaomi</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe><p>由于容器内元素浮动，脱离了文档流，所以容器只剩下 2px 的边距高度。如果使触发容器的 BFC，那么容器将会包裹着浮动元素。</p><iframe height="300" style="width: 100%;" scrolling="no" title="BFC浮动2" src="https://codepen.io/tangxiaomi/embed/NMPWJY?height=300&theme-id=37757&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/tangxiaomi/pen/NMPWJY'>BFC浮动2</a> by 糖小米 .  (<a href='https://codepen.io/tangxiaomi'>@tangxiaomi</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe><p><strong>### BFC 可以阻止元素被浮动元素覆盖</strong></p><p>先来看一个文字环绕效果：</p><iframe height="300" style="width: 100%;" scrolling="no" title="BFC浮动覆盖1" src="https://codepen.io/tangxiaomi/embed/GdgRLm?height=300&theme-id=37757&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/tangxiaomi/pen/GdgRLm'>BFC浮动覆盖1</a> by 糖小米 .  (<a href='https://codepen.io/tangxiaomi'>@tangxiaomi</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe><p>这时候其实第二个元素有部分被浮动元素所覆盖，(但是文本信息不会被浮动元素所覆盖) 如果想避免元素被覆盖，可触第二个元素的 BFC 特性，在第二个元素中加入 overflow: hidden，就会变成：</p><iframe height="300" style="width: 100%;" scrolling="no" title="BFC浮动覆盖2" src="https://codepen.io/tangxiaomi/embed/bMNGJL?height=300&theme-id=37757&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href='https://codepen.io/tangxiaomi/pen/bMNGJL'>BFC浮动覆盖2</a> by 糖小米 .  (<a href='https://codepen.io/tangxiaomi'>@tangxiaomi</a>) on <a href='https://codepen.io'>CodePen</a>.</iframe><p>这个方法可以用来实现两列自适应布局，效果不错，这时候左边的宽度固定，右边的内容自适应宽度(去掉上面右边内容的宽度)。</p><p>#css</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;常见定位方案&quot;&gt;&lt;a href=&quot;#常见定位方案&quot; class=&quot;headerlink&quot; title=&quot;常见定位方案&quot;&gt;&lt;/a&gt;常见定位方案&lt;/h2&gt;&lt;p&gt;在讲 BFC 之前，我们先来了解一下常见的定位方案，定位方案是控制元素的布局，有三种常见方案:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;普通流 (normal flow)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在普通流中，元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。    &lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="css" scheme="https://tangxiaomi.top/categories/css/"/>
    
    
    <category term="css" scheme="https://tangxiaomi.top/tags/css/"/>
    
  </entry>
  
  <entry>
    <title> Flex 布局教程：实例篇</title>
    <link href="https://tangxiaomi.top/2021/06/03/css/b875b59ff6/"/>
    <id>https://tangxiaomi.top/2021/06/03/css/b875b59ff6/</id>
    <published>2021-06-03T00:00:00.000Z</published>
    <updated>2021-06-04T02:48:49.769Z</updated>
    
    <content type="html"><![CDATA[<p>[[Flex 布局教程：语法篇]] 介绍了Flex布局的语法，今天介绍常见布局的Flex写法。</p><p>你会看到，不管是什么布局，Flex往往都可以几行命令搞定。</p><p><img src="/images/bg2015071327.png"><br>我只列出代码，详细的语法解释请查阅 [[Flex 布局教程：语法篇]]。我的主要参考资料是 <a href="http://davidwalsh.name/flexbox-dice">Landon Schropp</a> 的文章和 <a href="http://philipwalton.github.io/solved-by-flexbox/">Solved by Flexbox</a> 。</p><a id="more"></a><h2 id="一、骰子的布局"><a href="#一、骰子的布局" class="headerlink" title="一、骰子的布局"></a>一、骰子的布局</h2><p>骰子的一面，最多可以放置9个点。</p><p><img src="/images/bg2015071328.png"><br>下面，就来看看Flex如何实现，从1个点到9个点的布局。你可以到 <a href="http://codepen.io/LandonSchropp/pen/KpzzGo">codepen</a> 查看Demo。</p><p><img src="/images/bg2015071329.png"><br>如果不加说明，本节的HTML模板一律如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">  &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>上面代码中，div元素（代表骰子的一个面）是Flex容器，span元素（代表一个点）是Flex项目。如果有多个项目，就要添加多个span元素，以此类推。</p><h3 id="1-1-单项目"><a href="#1-1-单项目" class="headerlink" title="1.1 单项目"></a>1.1 单项目</h3><p>首先，只有左上角1个点的情况。Flex布局默认就是首行左对齐，所以一行代码就够了。</p><p><img src="/images/bg2015071301.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置项目的对齐方式，就能实现居中对齐和右对齐。</p><p><img src="/images/bg2015071302.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/bg2015071303.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置交叉轴对齐方式，可以垂直移动主轴。</p><p><img src="/images/bg2015071304.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  align-items: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/bg2015071305.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  align-items: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/bg2015071306.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  align-items: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/bg2015071307.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: flex-end;</span><br><span class="line">  align-items: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-双项目"><a href="#1-2-双项目" class="headerlink" title="1.2 双项目"></a>1.2 双项目</h3><p><img src="/images/bg2015071308.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/bg2015071309.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/bg2015071310.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  align-items: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/bg2015071311.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  align-items: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/bg2015071312.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.item:nth-child(2) &#123;</span><br><span class="line">  align-self: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/bg2015071313.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.item:nth-child(2) &#123;</span><br><span class="line">  align-self: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-三项目"><a href="#1-3-三项目" class="headerlink" title="1.3 三项目"></a>1.3 三项目</h3><p><img src="/images/bg2015071314.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.item:nth-child(2) &#123;</span><br><span class="line">  align-self: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.item:nth-child(3) &#123;</span><br><span class="line">  align-self: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-四项目"><a href="#1-4-四项目" class="headerlink" title="1.4 四项目"></a>1.4 四项目</h3><p><img src="/images/bg2015071315.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-wrap: wrap;</span><br><span class="line">  justify-content: flex-end;</span><br><span class="line">  align-content: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/bg2015071316.png"><br>HTML代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;column&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;column&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>CSS代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-wrap: wrap;</span><br><span class="line">  align-content: space-between;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.column &#123;</span><br><span class="line">  flex-basis: 100%;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-六项目"><a href="#1-5-六项目" class="headerlink" title="1.5 六项目"></a>1.5 六项目</h3><p><img src="/images/bg2015071317.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-wrap: wrap;</span><br><span class="line">  align-content: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/bg2015071318.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  flex-wrap: wrap;</span><br><span class="line">  align-content: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/bg2015071319.png"><br>HTML代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">     &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</span><br><span class="line">     &lt;span class=&quot;item&quot;&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>CSS代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-wrap: wrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.row&#123;</span><br><span class="line">  flex-basis: 100%;</span><br><span class="line">  display:flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.row:nth-child(2)&#123;</span><br><span class="line">  justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.row:nth-child(3)&#123;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-九项目"><a href="#1-6-九项目" class="headerlink" title="1.6 九项目"></a>1.6 九项目</h3><p><img src="/images/bg2015071320.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-wrap: wrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、网格布局"><a href="#二、网格布局" class="headerlink" title="二、网格布局"></a>二、网格布局</h2><h3 id="2-1-基本网格布局"><a href="#2-1-基本网格布局" class="headerlink" title="2.1 基本网格布局"></a>2.1 基本网格布局</h3><p>最简单的网格布局，就是平均分布。在容器里面平均分配空间，跟上面的骰子布局很像，但是需要设置项目的自动缩放。</p><p><img src="/images/bg2015071321.png"><br>HTML代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;Grid&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;Grid-cell&quot;&gt;...&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;Grid-cell&quot;&gt;...&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;Grid-cell&quot;&gt;...&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>CSS代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.Grid &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.Grid-cell &#123;</span><br><span class="line">  flex: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-百分比布局"><a href="#2-2-百分比布局" class="headerlink" title="2.2 百分比布局"></a>2.2 百分比布局</h3><p>某个网格的宽度为固定的百分比，其余网格平均分配剩余的空间。</p><p><img src="/images/bg2015071322.png"><br>HTML代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;Grid&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;Grid-cell u-1of4&quot;&gt;...&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;Grid-cell&quot;&gt;...&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;Grid-cell u-1of3&quot;&gt;...&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.Grid &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.Grid-cell &#123;</span><br><span class="line">  flex: 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.Grid-cell.u-full &#123;</span><br><span class="line">  flex: 0 0 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.Grid-cell.u-1of2 &#123;</span><br><span class="line">  flex: 0 0 50%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.Grid-cell.u-1of3 &#123;</span><br><span class="line">  flex: 0 0 33.3333%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.Grid-cell.u-1of4 &#123;</span><br><span class="line">  flex: 0 0 25%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、圣杯布局"><a href="#三、圣杯布局" class="headerlink" title="三、圣杯布局"></a>三、圣杯布局</h2><p><a href="https://en.wikipedia.org/wiki/Holy_Grail_%28web_design%29">圣杯布局</a> （Holy Grail Layout）指的是一种最常见的网站布局。页面从上到下，分成三个部分：头部（header），躯干（body），尾部（footer）。其中躯干又水平分成三栏，从左到右为：导航、主栏、副栏。</p><p><img src="/images/bg2015071323.png"><br>HTML代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;body class=&quot;HolyGrail&quot;&gt;</span><br><span class="line">  &lt;header&gt;...&lt;/header&gt;</span><br><span class="line">  &lt;div class=&quot;HolyGrail-body&quot;&gt;</span><br><span class="line">    &lt;main class=&quot;HolyGrail-content&quot;&gt;...&lt;/main&gt;</span><br><span class="line">    &lt;nav class=&quot;HolyGrail-nav&quot;&gt;...&lt;/nav&gt;</span><br><span class="line">    &lt;aside class=&quot;HolyGrail-ads&quot;&gt;...&lt;/aside&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;footer&gt;...&lt;/footer&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>CSS代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">.HolyGrail &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  min-height: 100vh;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">header,</span><br><span class="line">footer &#123;</span><br><span class="line">  flex: 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.HolyGrail-body &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex: 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.HolyGrail-content &#123;</span><br><span class="line">  flex: 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.HolyGrail-nav, .HolyGrail-ads &#123;</span><br><span class="line">  /* 两个边栏的宽度设为12em */</span><br><span class="line">  flex: 0 0 12em;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.HolyGrail-nav &#123;</span><br><span class="line">  /* 导航放到最左边 */</span><br><span class="line">  order: -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是小屏幕，躯干的三栏自动变为垂直叠加。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@media (max-width: 768px) &#123;</span><br><span class="line">  .HolyGrail-body &#123;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    flex: 1;</span><br><span class="line">  &#125;</span><br><span class="line">  .HolyGrail-nav,</span><br><span class="line">  .HolyGrail-ads,</span><br><span class="line">  .HolyGrail-content &#123;</span><br><span class="line">    flex: auto;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、输入框的布局"><a href="#四、输入框的布局" class="headerlink" title="四、输入框的布局"></a>四、输入框的布局</h2><p>我们常常需要在输入框的前方添加提示，后方添加按钮。</p><p><img src="/images/bg2015071324.png"><br>HTML代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;InputAddOn&quot;&gt;</span><br><span class="line">  &lt;span class=&quot;InputAddOn-item&quot;&gt;...&lt;/span&gt;</span><br><span class="line">  &lt;input class=&quot;InputAddOn-field&quot;&gt;</span><br><span class="line">  &lt;button class=&quot;InputAddOn-item&quot;&gt;...&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>CSS代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.InputAddOn &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.InputAddOn-field &#123;</span><br><span class="line">  flex: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、悬挂式布局"><a href="#五、悬挂式布局" class="headerlink" title="五、悬挂式布局"></a>五、悬挂式布局</h2><p>有时，主栏的左侧或右侧，需要添加一个图片栏。</p><p><img src="/images/bg2015071325.png"><br>HTML代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;Media&quot;&gt;</span><br><span class="line">  &lt;img class=&quot;Media-figure&quot; src=&quot;&quot; alt=&quot;&quot;&gt;</span><br><span class="line">  &lt;p class=&quot;Media-body&quot;&gt;...&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>CSS代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.Media &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  align-items: flex-start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.Media-figure &#123;</span><br><span class="line">  margin-right: 1em;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.Media-body &#123;</span><br><span class="line">  flex: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六、固定的底栏"><a href="#六、固定的底栏" class="headerlink" title="六、固定的底栏"></a>六、固定的底栏</h3><p>有时，页面内容太少，无法占满一屏的高度，底栏就会抬高到页面的中间。这时可以采用Flex布局，让底栏总是出现在页面的底部。</p><p><img src="/images/bg2015071326.png"><br>HTML代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;body class=&quot;Site&quot;&gt;</span><br><span class="line">  &lt;header&gt;...&lt;/header&gt;</span><br><span class="line">  &lt;main class=&quot;Site-content&quot;&gt;...&lt;/main&gt;</span><br><span class="line">  &lt;footer&gt;...&lt;/footer&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>CSS代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.Site &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  min-height: 100vh;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.Site-content &#123;</span><br><span class="line">  flex: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七，流式布局"><a href="#七，流式布局" class="headerlink" title="七，流式布局"></a>七，流式布局</h3><p>每行的项目数固定，会自动分行。</p><p><img src="/images/bg2015071330.png"><br>CSS的写法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.parent &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 150px;</span><br><span class="line">  background-color: black;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-flow: row wrap;</span><br><span class="line">  align-content: flex-start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.child &#123;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  background-color: white;</span><br><span class="line">  flex: 0 0 25%;</span><br><span class="line">  height: 50px;</span><br><span class="line">  border: 1px solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（完）</p><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html">Flex 布局教程：实例篇</a></p><p>#css</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[[Flex 布局教程：语法篇]] 介绍了Flex布局的语法，今天介绍常见布局的Flex写法。&lt;/p&gt;
&lt;p&gt;你会看到，不管是什么布局，Flex往往都可以几行命令搞定。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/bg2015071327.png&quot;&gt;&lt;br&gt;我只列出代码，详细的语法解释请查阅 [[Flex 布局教程：语法篇]]。我的主要参考资料是 &lt;a href=&quot;http://davidwalsh.name/flexbox-dice&quot;&gt;Landon Schropp&lt;/a&gt; 的文章和 &lt;a href=&quot;http://philipwalton.github.io/solved-by-flexbox/&quot;&gt;Solved by Flexbox&lt;/a&gt; 。&lt;/p&gt;</summary>
    
    
    
    <category term="css" scheme="https://tangxiaomi.top/categories/css/"/>
    
    
    <category term="css" scheme="https://tangxiaomi.top/tags/css/"/>
    
  </entry>
  
  <entry>
    <title> git 常用命令</title>
    <link href="https://tangxiaomi.top/2021/06/03/git/09dfcc188e/"/>
    <id>https://tangxiaomi.top/2021/06/03/git/09dfcc188e/</id>
    <published>2021-06-03T00:00:00.000Z</published>
    <updated>2021-06-04T02:48:49.769Z</updated>
    
    <content type="html"><![CDATA[<h3 id="恢复修改过的文件"><a href="#恢复修改过的文件" class="headerlink" title="恢复修改过的文件"></a>恢复修改过的文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout file_name</span><br></pre></td></tr></table></figure><h3 id="获取远程分支"><a href="#获取远程分支" class="headerlink" title="获取远程分支"></a>获取远程分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout --track origin/branch_name</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="本地分支关联远程分支"><a href="#本地分支关联远程分支" class="headerlink" title="本地分支关联远程分支"></a>本地分支关联远程分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/[branch_name] [branch_name]</span><br></pre></td></tr></table></figure><h3 id="合并某一次提交"><a href="#合并某一次提交" class="headerlink" title="合并某一次提交"></a>合并某一次提交</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick commit_id</span><br></pre></td></tr></table></figure><h3 id="查看最近3条更新日志，并且简单显示修改的文件"><a href="#查看最近3条更新日志，并且简单显示修改的文件" class="headerlink" title="查看最近3条更新日志，并且简单显示修改的文件"></a>查看最近3条更新日志，并且简单显示修改的文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看最近3条更新日志，并且简单显示修改的文件 </span></span><br><span class="line">git <span class="built_in">log</span> -3 -—<span class="built_in">stat</span></span><br></pre></td></tr></table></figure><h3 id="命令行看提交记录图形"><a href="#命令行看提交记录图形" class="headerlink" title="命令行看提交记录图形"></a>命令行看提交记录图形</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline --graph </span><br></pre></td></tr></table></figure><h3 id="查看指定提交的内容"><a href="#查看指定提交的内容" class="headerlink" title="查看指定提交的内容"></a>查看指定提交的内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show [commit_id] -—<span class="built_in">stat</span></span><br></pre></td></tr></table></figure><h3 id="恢复修改过的文件-1"><a href="#恢复修改过的文件-1" class="headerlink" title="恢复修改过的文件"></a>恢复修改过的文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git chekout [file_name]</span><br></pre></td></tr></table></figure><h3 id="本地分支推送到远程分支"><a href="#本地分支推送到远程分支" class="headerlink" title="本地分支推送到远程分支"></a>本地分支推送到远程分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -—set-upstream origin [branch_nam]</span><br></pre></td></tr></table></figure><h3 id="将远程分支拉到本地"><a href="#将远程分支拉到本地" class="headerlink" title="将远程分支拉到本地"></a>将远程分支拉到本地</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout —track origin/branch_name</span><br></pre></td></tr></table></figure><h3 id="合并某一次提交到指定分支"><a href="#合并某一次提交到指定分支" class="headerlink" title="合并某一次提交到指定分支"></a>合并某一次提交到指定分支</h3><pre><code>* 获取此次提交的commit_id * 切换到需要合并的分支 </code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick [commit_id]</span><br></pre></td></tr></table></figure><h3 id="远程分支覆盖本地分支"><a href="#远程分支覆盖本地分支" class="headerlink" title="远程分支覆盖本地分支"></a>远程分支覆盖本地分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch -—all // fetch所有分支上的内容，也可以选择只备份一部分内容  </span><br><span class="line">git reset -—hard origin/master // 重置本地分支（这里master要修改为对应的分支名）  </span><br><span class="line">git pull </span><br></pre></td></tr></table></figure><h3 id="clone-远程仓库"><a href="#clone-远程仓库" class="headerlink" title="clone 远程仓库"></a>clone 远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> ssh://git@github.com:im/im.github.io.git</span><br></pre></td></tr></table></figure><h3 id="初始化本地-git-仓库（新建仓库）"><a href="#初始化本地-git-仓库（新建仓库）" class="headerlink" title="初始化本地 git 仓库（新建仓库）"></a>初始化本地 git 仓库（新建仓库）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h3 id="查看当前版本状态（是否修改）"><a href="#查看当前版本状态（是否修改）" class="headerlink" title="查看当前版本状态（是否修改）"></a>查看当前版本状态（是否修改）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h3 id="显示所有未添加至-index-的变更"><a href="#显示所有未添加至-index-的变更" class="headerlink" title="显示所有未添加至 index 的变更"></a>显示所有未添加至 index 的变更</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure><h3 id="比较与上一个版本的差异"><a href="#比较与上一个版本的差异" class="headerlink" title="比较与上一个版本的差异"></a>比较与上一个版本的差异</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff HEAD^ / HEAD -- ./lib</span><br></pre></td></tr></table></figure><h3 id="增加更改过的文件至-index"><a href="#增加更改过的文件至-index" class="headerlink" title="增加更改过的文件至 index"></a>增加更改过的文件至 index</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add . / add * ...</span><br></pre></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m ‘xxx’</span><br></pre></td></tr></table></figure><h3 id="合并上一次提交（用于反复修改）"><a href="#合并上一次提交（用于反复修改）" class="headerlink" title="合并上一次提交（用于反复修改）"></a>合并上一次提交（用于反复修改）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git commit -amend -m ‘xxx’</span><br><span class="line"></span><br><span class="line">add 和 commit 合为一步</span><br><span class="line"></span><br><span class="line">git commit -am ‘xxx’</span><br></pre></td></tr></table></figure><h3 id="显示日志"><a href="#显示日志" class="headerlink" title="显示日志"></a>显示日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h3 id="显示某个提交的详细内容"><a href="#显示某个提交的详细内容" class="headerlink" title="显示某个提交的详细内容"></a>显示某个提交的详细内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show &lt;commit&gt;</span><br></pre></td></tr></table></figure><h3 id="在每一行显示-commit-号-提交者-最早提交日期"><a href="#在每一行显示-commit-号-提交者-最早提交日期" class="headerlink" title="在每一行显示 commit 号,提交者,最早提交日期"></a>在每一行显示 commit 号,提交者,最早提交日期</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git blame &lt;file&gt;</span><br></pre></td></tr></table></figure><h3 id="显示本地分支"><a href="#显示本地分支" class="headerlink" title="显示本地分支"></a>显示本地分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;branch&gt;</span><br></pre></td></tr></table></figure><h3 id="新建分支"><a href="#新建分支" class="headerlink" title="新建分支"></a>新建分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;new-branch&gt;</span><br></pre></td></tr></table></figure><h3 id="创建新分支跟踪远程分支"><a href="#创建新分支跟踪远程分支" class="headerlink" title="创建新分支跟踪远程分支"></a>创建新分支跟踪远程分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --track &lt;new&gt; &lt;remote&gt;</span><br></pre></td></tr></table></figure><h3 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &lt;branch&gt;</span><br></pre></td></tr></table></figure><h3 id="给当前分支打标签"><a href="#给当前分支打标签" class="headerlink" title="给当前分支打标签"></a>给当前分支打标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag &lt;tag-name&gt;</span><br></pre></td></tr></table></figure><h3 id="列出远程分支详细信息"><a href="#列出远程分支详细信息" class="headerlink" title="列出远程分支详细信息"></a>列出远程分支详细信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><h3 id="显示某个分支信息"><a href="#显示某个分支信息" class="headerlink" title="显示某个分支信息"></a>显示某个分支信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote show &lt;remote&gt;</span><br></pre></td></tr></table></figure><h3 id="添加一个新的远程仓库"><a href="#添加一个新的远程仓库" class="headerlink" title="添加一个新的远程仓库"></a>添加一个新的远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;remote&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure><h3 id="获取远程分支，但不更新本地分支，另需-merge"><a href="#获取远程分支，但不更新本地分支，另需-merge" class="headerlink" title="获取远程分支，但不更新本地分支，另需 merge"></a>获取远程分支，但不更新本地分支，另需 merge</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch &lt;remote&gt;</span><br></pre></td></tr></table></figure><h3 id="获取远程分支，并更新本地分支"><a href="#获取远程分支，并更新本地分支" class="headerlink" title="获取远程分支，并更新本地分支"></a>获取远程分支，并更新本地分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull &lt;remote&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure><h3 id="推送本地更新到远程分支"><a href="#推送本地更新到远程分支" class="headerlink" title="推送本地更新到远程分支"></a>推送本地更新到远程分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;remote&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure><h3 id="删除一个远程分支"><a href="#删除一个远程分支" class="headerlink" title="删除一个远程分支"></a>删除一个远程分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;remote&gt; --delete &lt;branch&gt;</span><br></pre></td></tr></table></figure><h3 id="推送本地标签"><a href="#推送本地标签" class="headerlink" title="推送本地标签"></a>推送本地标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --tags</span><br></pre></td></tr></table></figure><h3 id="合并分支到当前分支，存在两个"><a href="#合并分支到当前分支，存在两个" class="headerlink" title="合并分支到当前分支，存在两个"></a>合并分支到当前分支，存在两个</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure><h3 id="合并分支到当前分支，存在一个"><a href="#合并分支到当前分支，存在一个" class="headerlink" title="合并分支到当前分支，存在一个"></a>合并分支到当前分支，存在一个</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase &lt;branch&gt;</span><br></pre></td></tr></table></figure><h3 id="回到执行-rebase-之前"><a href="#回到执行-rebase-之前" class="headerlink" title="回到执行 rebase 之前"></a>回到执行 rebase 之前</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rebase --abort 解决矛盾后继续执行 rebase  git rebase --<span class="built_in">continue</span> 使用 mergetool 解决冲突</span><br><span class="line"></span><br><span class="line">git mergetool</span><br></pre></td></tr></table></figure><h3 id="使用冲突文件解决冲突"><a href="#使用冲突文件解决冲突" class="headerlink" title="使用冲突文件解决冲突"></a>使用冲突文件解决冲突</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;resolve-file&gt;</span><br><span class="line"></span><br><span class="line">git rm &lt;resolved-file&gt;</span><br></pre></td></tr></table></figure><h3 id="将当前版本重置为-HEAD（用于-merge-失败）"><a href="#将当前版本重置为-HEAD（用于-merge-失败）" class="headerlink" title="将当前版本重置为 HEAD（用于 merge 失败）"></a>将当前版本重置为 HEAD（用于 merge 失败）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD</span><br></pre></td></tr></table></figure><h3 id="将当前版本重置至某一个提交状态（慎用！）"><a href="#将当前版本重置至某一个提交状态（慎用！）" class="headerlink" title="将当前版本重置至某一个提交状态（慎用！）"></a>将当前版本重置至某一个提交状态（慎用！）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard &lt;commit&gt;</span><br></pre></td></tr></table></figure><h3 id="将当前版本重置至某一个提交状态，代码不变"><a href="#将当前版本重置至某一个提交状态，代码不变" class="headerlink" title="将当前版本重置至某一个提交状态，代码不变"></a>将当前版本重置至某一个提交状态，代码不变</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset &lt;commit&gt;</span><br></pre></td></tr></table></figure><h3 id="重置至某一状态，保留版本库中不同的文件"><a href="#重置至某一状态，保留版本库中不同的文件" class="headerlink" title="重置至某一状态，保留版本库中不同的文件"></a>重置至某一状态，保留版本库中不同的文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --merge &lt;commit&gt;</span><br></pre></td></tr></table></figure><h3 id="重置至某一状态，重置变化的文件，代码改变"><a href="#重置至某一状态，重置变化的文件，代码改变" class="headerlink" title="重置至某一状态，重置变化的文件，代码改变"></a>重置至某一状态，重置变化的文件，代码改变</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --keep &lt;commit&gt;</span><br></pre></td></tr></table></figure><h3 id="丢弃本地更改信息并将其存入特定文件"><a href="#丢弃本地更改信息并将其存入特定文件" class="headerlink" title="丢弃本地更改信息并将其存入特定文件"></a>丢弃本地更改信息并将其存入特定文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure><h3 id="撤销提交"><a href="#撤销提交" class="headerlink" title="撤销提交"></a>撤销提交</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert &lt;commit&gt;</span><br></pre></td></tr></table></figure><p>#git</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;恢复修改过的文件&quot;&gt;&lt;a href=&quot;#恢复修改过的文件&quot; class=&quot;headerlink&quot; title=&quot;恢复修改过的文件&quot;&gt;&lt;/a&gt;恢复修改过的文件&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git checkout file_name&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;获取远程分支&quot;&gt;&lt;a href=&quot;#获取远程分支&quot; class=&quot;headerlink&quot; title=&quot;获取远程分支&quot;&gt;&lt;/a&gt;获取远程分支&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git checkout --track origin/branch_name&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="git" scheme="https://tangxiaomi.top/categories/git/"/>
    
    
    <category term="git" scheme="https://tangxiaomi.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title> git submodule</title>
    <link href="https://tangxiaomi.top/2021/06/03/git/38399f8bee/"/>
    <id>https://tangxiaomi.top/2021/06/03/git/38399f8bee/</id>
    <published>2021-06-03T00:00:00.000Z</published>
    <updated>2021-06-04T02:48:49.769Z</updated>
    
    <content type="html"><![CDATA[<h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git submodule add -b [指定分支] [仓库地址] [路径]</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line"></span><br><span class="line">git submodule add -b icarus https://github.com/im/hexo-theme.git themes/icarus</span><br></pre></td></tr></table></figure><p>命令执行完成，会在当前工程根路径下生成一个名为 <code>.gitmodules</code> 的文件，其中记录了子模块的信息。</p><h3 id="gitmodules"><a href="#gitmodules" class="headerlink" title=".gitmodules"></a>.gitmodules</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[submodule &quot;themes/icarus&quot;]</span><br><span class="line">    path = themes/icarus</span><br><span class="line">    url = https://github.com/im/hexo-theme.git</span><br><span class="line">    branch = icarus</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p><code>submodule</code> 的删除稍微麻烦点：首先，要在 <code>.gitmodules</code> 文件中删除相应配置信息。然后，执行 <code>git rm –cached</code> 命令将子模块所在的文件从 <code>git</code> 中删除。</p><h3 id="下载的工程带有submodule"><a href="#下载的工程带有submodule" class="headerlink" title="下载的工程带有submodule"></a>下载的工程带有submodule</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure><h3 id="查看sumodule状态"><a href="#查看sumodule状态" class="headerlink" title="查看sumodule状态"></a>查看sumodule状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule foreach git status</span><br></pre></td></tr></table></figure><h3 id="不能更新"><a href="#不能更新" class="headerlink" title="不能更新"></a>不能更新</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --remote</span><br></pre></td></tr></table></figure><p>#git</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;添加&quot;&gt;&lt;a href=&quot;#添加&quot; class=&quot;headerlink&quot; title=&quot;添加&quot;&gt;&lt;/a&gt;添加&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git submodule add -b [指定分支] [仓库地址] [路径]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;example:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git submodule add -b icarus https://github.com/im/hexo-theme.git themes/icarus&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;命令执行完成，会在当前工程根路径下生成一个名为 &lt;code&gt;.gitmodules&lt;/code&gt; 的文件，其中记录了子模块的信息。&lt;/p&gt;
&lt;h3 id=&quot;gitmodules&quot;&gt;&lt;a href=&quot;#gitmodules&quot; class=&quot;headerlink&quot; title=&quot;.gitmodules&quot;&gt;&lt;/a&gt;.gitmodules&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[submodule &amp;quot;themes/icarus&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    path = themes/icarus&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    url = https://github.com/im/hexo-theme.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    branch = icarus&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="git" scheme="https://tangxiaomi.top/categories/git/"/>
    
    
    <category term="git" scheme="https://tangxiaomi.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title> git rebase -i</title>
    <link href="https://tangxiaomi.top/2021/06/03/git/516fccc759/"/>
    <id>https://tangxiaomi.top/2021/06/03/git/516fccc759/</id>
    <published>2021-06-03T00:00:00.000Z</published>
    <updated>2021-06-04T02:48:49.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变基时有六个命令可用："><a href="#变基时有六个命令可用：" class="headerlink" title="变基时有六个命令可用："></a>变基时有六个命令可用：</h2><ul><li><p>pick<br>pick只是意味着包括提交。重新进行命令时，重新安排pick命令的顺序会更改提交的顺序。如果选择不包括提交，则应删除整行。</p></li><li><p>reword<br>该reword命令与相似pick，但是使用后，重新设置过程将暂停并为您提供更改提交消息的机会。提交所做的任何更改均不受影响。</p></li><li><p>edit<br>如果您选择edit提交，则将有机会修改提交，这意味着您可以完全添加或更改提交。您还可以进行更多提交，然后再继续进行变基。这使您可以将大型提交拆分为较小的提交，或者删除在提交中所做的错误更改。</p></li><li><p>squash<br>该命令使您可以将两个或多个提交合并为一个提交。提交被压缩到其上方的提交中。Git使您有机会编写描述这两个更改的新提交消息。</p></li><li><p>fixup<br>这类似于squash，但是要合并的提交已丢弃其消息。提交仅合并到其上方的提交中，并且较早提交的消息用于描述这两个更改。</p></li><li><p>exec<br>这使您可以对提交运行任意的Shell命令。</p></li></ul><a id="more"></a><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我们初始化一个项目</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 制造一些提交</span></span><br><span class="line">touch base.txt</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;add base&quot;</span></span><br><span class="line"></span><br><span class="line">touch 1.txt</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;add 1&quot;</span></span><br><span class="line"></span><br><span class="line">touch 2.txt</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;add 2&quot;</span></span><br><span class="line"></span><br><span class="line">touch 3.txt</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;add 3&quot;</span></span><br><span class="line"></span><br><span class="line">touch 4.txt</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;add 4&quot;</span></span><br><span class="line"></span><br><span class="line">touch 5.txt</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;add 5&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看现在的提交</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line">commit a75ed742838ebc1ef1073502623478f73e1ec21f</span><br><span class="line">Author: </span><br><span class="line">Date:   Wed Mar 4 10:02:51 2020 +0800</span><br><span class="line"></span><br><span class="line">    add 5</span><br><span class="line"></span><br><span class="line">commit 8b485bb4768b2abf8f6400dcba069f1a650ed5ec</span><br><span class="line">Author: </span><br><span class="line">Date:   Wed Mar 4 09:59:27 2020 +0800</span><br><span class="line"></span><br><span class="line">    add 4</span><br><span class="line"></span><br><span class="line">commit 63ce9fb010da550c668aca66758c45fbfad46e2b</span><br><span class="line">Author:</span><br><span class="line">Date:   Wed Mar 4 09:59:04 2020 +0800</span><br><span class="line"></span><br><span class="line">    add 3</span><br><span class="line"></span><br><span class="line">commit 9cd34c4d42f52cfb40026dae613c8ad29d7cbc66</span><br><span class="line">Author: </span><br><span class="line">Date:   Wed Mar 4 09:58:45 2020 +0800</span><br><span class="line"></span><br><span class="line">    add 2</span><br><span class="line"></span><br><span class="line">commit 77bd0eb1a97e1676367ea236c1c47c155eaa8430</span><br><span class="line">Author: </span><br><span class="line">Date:   Wed Mar 4 09:58:23 2020 +0800</span><br><span class="line"></span><br><span class="line">    add 1</span><br></pre></td></tr></table></figure><p>现在我们已经有了一些，提交了，接下来开始练习</p><h2 id="pick-更改提交顺序、删除提交"><a href="#pick-更改提交顺序、删除提交" class="headerlink" title="pick 更改提交顺序、删除提交"></a>pick 更改提交顺序、删除提交</h2><p>pick只是意味着包括提交。重新进行命令时，重新安排pick`命令的顺序会更改提交的顺序。如果选择不包括提交，则应删除整行。</p><p>::假定，我们现在要改变提交 5.txt 和 4.txt 的顺序，该怎么操作::</p><p>更改涉及到了两次提交，最早提交次数为2（4.txt是倒数第二次提交）</p><ol><li>告诉git 我要改变倒数第2次后的提交</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i HEAD~2</span><br></pre></td></tr></table></figure><p><strong>接着，git给你一个文本，告诉你我知道了，你说的这些可以有以下操作</strong></p><p>下面是执行命令后的样子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pick 8b485bb add 4</span><br><span class="line">pick a75ed74 add 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebase 63ce9fb..a75ed74 onto 63ce9fb (2 command(s))</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Commands:</span></span><br><span class="line"><span class="comment"># p, pick = use commit</span></span><br><span class="line"><span class="comment"># r, reword = use commit, but edit the commit message</span></span><br><span class="line"><span class="comment"># e, edit = use commit, but stop for amending</span></span><br><span class="line"><span class="comment"># s, squash = use commit, but meld into previous commit</span></span><br><span class="line"><span class="comment"># f, fixup = like &quot;squash&quot;, but discard this commit&#x27;s log message</span></span><br><span class="line"><span class="comment"># x, exec = run command (the rest of the line) using shell</span></span><br><span class="line"><span class="comment"># d, drop = remove commit</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># These lines can be re-ordered; they are executed from top to bottom.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you remove a line here THAT COMMIT WILL BE LOST.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># However, if you remove everything, the rebase will be aborted.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that empty commits are commented out</span></span><br><span class="line">~</span><br><span class="line">~</span><br><span class="line">~</span><br></pre></td></tr></table></figure><p>解释：我们刚刚执行的命令中 HEAD~2代表选择离HEAD最近的两条提交<br>下面注释的是提示，我们不需要管，只要专注前两行就ok</p><ol start="2"><li>把 第一行 和 第二行 交换顺序</li></ol><p><strong>小技巧：这个是vi编辑器，首先Esc ，进入命令模式，移动到第一行 按dd,本行就被剪切，pick a75ed74 add 5就变成了第一行，接着按 p刚刚剪切的就成了第二行，快速交换顺序</strong></p><p>不会用vi建议百度篇教程学习一哈</p><p>变成下面的样子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pick a75ed74 add 5</span><br><span class="line">pick 8b485bb add 4</span><br></pre></td></tr></table></figure><p>接着 Esc,:wq 保存退出<br>成功！</p><p>git log查看，4 和 5 的顺序改变了<br><img src="/images/aHR0cHM6Ly9naXRlZS5jb20vcmVuc2hlbl8wNTIvbXlOb3RlLWltZy9yYXcvbWFzdGVyL2ltYWdlLzIwMjAwMzA4MTkzNTQxLTQzOTMucG5n.png"></p><h2 id="假定，我们现在要删除-某一个提交，该怎么操作"><a href="#假定，我们现在要删除-某一个提交，该怎么操作" class="headerlink" title="假定，我们现在要删除 某一个提交，该怎么操作"></a>假定，我们现在要删除 某一个提交，该怎么操作</h2><p>我们来删除 add 4 的那条提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i HEAD~2</span><br></pre></td></tr></table></figure><p>出现如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pick a75ed74 add 5</span><br><span class="line">pick 8b485bb add 4</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebase 575fd8b..bb2a77d onto 575fd8b (1 command(s))</span></span><br><span class="line"><span class="comment"># .....略</span></span><br></pre></td></tr></table></figure><p>我们删除 第二行</p><p>接着 Esc,:wq 保存退出<br><img src="/images/aHR0cHM6Ly9naXRlZS5jb20vcmVuc2hlbl8wNTIvbXlOb3RlLWltZy9yYXcvbWFzdGVyL2ltYWdlLzIwMjAwMzA0MTA0MTMwLTY1NjExOS5wbmc.png"></p><p>git log查看，4 和 5 的顺序改变了<br><img src="/images/aHR0cHM6Ly9naXRlZS5jb20vcmVuc2hlbl8wNTIvbXlOb3RlLWltZy9yYXcvbWFzdGVyL2ltYWdlLzIwMjAwMzA0MTA0MzE2LTc3MzYwMC5wbmc.png"></p><h2 id="record-修改提交消息-提交内容不变"><a href="#record-修改提交消息-提交内容不变" class="headerlink" title="record 修改提交消息(提交内容不变)"></a>record 修改提交消息(提交内容不变)</h2><p>该reword命令与相似pick，但是使用后，重新设置过程将暂停并为您提供更改提交消息的机会。提交所做的任何更改均不受影响。</p><p><strong>假定，我们现在要 修改某个提交的消息，该怎么操作</strong><br>修改一下 add 2 的提交消息</p><p>git log 查看 add 2 距离 HEAD 有多少的距离，得：3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i HEAD~3</span><br></pre></td></tr></table></figure><p>出现如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pick 9cd34c4 add 2</span><br><span class="line">pick 63ce9fb add 3</span><br><span class="line">pick 575fd8b add 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebase 77bd0eb..575fd8b onto 77bd0eb (3 command(s))</span></span><br><span class="line"><span class="comment"># .... 略</span></span><br></pre></td></tr></table></figure><p>我们只需要修改 第一行 add 2 ，其余保持不变</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">r 9cd34c4 add 2</span><br><span class="line">pick 63ce9fb add 3</span><br><span class="line">pick 575fd8b add 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebase 77bd0eb..575fd8b onto 77bd0eb (3 command(s))</span></span><br><span class="line"><span class="comment"># .... 略</span></span><br></pre></td></tr></table></figure><p>r 是 record简写</p><p>接着 Esc,:wq 保存退出</p><p>git会说 开始执行，接着弹出一个编辑窗口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">add 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># Please enter the commit message for your changes. Lines starting</span></span><br><span class="line"><span class="comment"># with &#x27;#&#x27; will be ignored, and an empty message aborts the commit.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Date:      Wed Mar 4 09:58:45 2020 +0800</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># interactive rebase in progress; onto 77bd0eb</span></span><br><span class="line"><span class="comment"># Last command done (1 command done):</span></span><br><span class="line"><span class="comment">#    r 9cd34c4 add 2</span></span><br><span class="line"><span class="comment"># Next commands to do (2 remaining commands):</span></span><br><span class="line"><span class="comment">#    pick 63ce9fb add 3</span></span><br><span class="line"><span class="comment">#    pick 575fd8b add 5</span></span><br><span class="line"><span class="comment"># You are currently editing a commit while rebasing branch &#x27;master&#x27; on &#x27;77bd0eb&#x27;.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Changes to be committed:</span></span><br><span class="line"><span class="comment">#       new file:   2.txt</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure><p>我们就可以修改 add 2 了</p><p>下面的注释是对当前状态的一些说明</p><p>大致是说，上一次执行的命令 是 <code>r 9cd34c4 add 2</code></p><p>下面还有两条命令</p><p>当前命令改变的committed的文件 是 2.txt 等等</p><p><strong>修改 add 2</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add 2 ~ new comment</span><br></pre></td></tr></table></figure><p>接着 Esc,:wq 保存退出</p><p>成功<br><img src="/images/aHR0cHM6Ly9naXRlZS5jb20vcmVuc2hlbl8wNTIvbXlOb3RlLWltZy9yYXcvbWFzdGVyL2ltYWdlLzIwMjAwMzA0MTA1OTEzLTE2Mzk3Ny5wbmc.png"></p><p>git log查看, 消息 “add 2” 变为了 “add 2 ~ new comment”<br><img src="/images/aHR0cHM6Ly9naXRlZS5jb20vcmVuc2hlbl8wNTIvbXlOb3RlLWltZy9yYXcvbWFzdGVyL2ltYWdlLzIwMjAwMzA4MTkzODEzLTE4OTI4My5wbmc.png"></p><p>::只要不动pick的 顺序，就代表什么都不做::</p><h2 id="edit修改提交"><a href="#edit修改提交" class="headerlink" title="edit修改提交"></a>edit修改提交</h2><p>如果您选择edit提交，则将有机会修改提交，这意味着您可以完全添加或更改提交。您还可以进行更多提交，然后再继续进行变基。这使您可以将大型提交拆分为较小的提交，或者删除在提交中所做的错误更改。</p><p><strong>假定 我想要在两个提交之间 再加提交，怎么办</strong><br>假定，我们要在 add 3 和 add 5 之间 添加一条提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i HEAD~2</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pick 6934312 add 3</span><br><span class="line">pick 5ce6dde add 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebase 7f9d45d..5ce6dde onto 7f9d45d (2 command(s))</span></span><br><span class="line"><span class="comment"># ....</span></span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e 6934312 add 3</span><br><span class="line">pick 5ce6dde add 5</span><br></pre></td></tr></table></figure><p>接着 Esc,:wq 保存退出</p><p>有如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase -i HEAD~2</span><br><span class="line">Stopped at 6934312135c150bf74bead26e371df1443273ca4... add 3</span><br><span class="line">You can amend the commit now, with</span><br><span class="line"></span><br><span class="line">        git commit --amend</span><br><span class="line"></span><br><span class="line">Once you are satisfied with your changes, run</span><br><span class="line"></span><br><span class="line">        git rebase --<span class="built_in">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xxxxxx MINGW32 ~/Desktop/git-demo (master|REBASE-i 1/2)</span><br></pre></td></tr></table></figure><p>可以看到，我们的master分支多了REBASE-i 1/2</p><p>我们尝试做一些修改，给3.txt 增加一些内容，然后提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add 3.txt</span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">&quot;edit 3.txt&quot;</span></span><br><span class="line">[detached HEAD 7262a57] edit 3.txt</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><p>接着，我们继续 rebase</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rebase --<span class="built_in">continue</span></span><br><span class="line">Successfully rebased and updated refs/heads/master.</span><br></pre></td></tr></table></figure><p>git log 查看，在 add 5 和 add 3 中间 增加了我们刚刚的修改<br><img src="/images/aHR0cHM6Ly9naXRlZS5jb20vcmVuc2hlbl8wNTIvbXlOb3RlLWltZy9yYXcvbWFzdGVyL2ltYWdlLzIwMjAwMzA0MTEzMDU2LTczMjkzMS5wbmc.png"></p><p><strong>假定 我想要单纯的修改这次提交内容和消息，怎么办</strong></p><p>参照上面的做到这一步，我们选择提交的方式 加一个参数 git commit –amend修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git add 3.txt</span><br><span class="line"></span><br><span class="line">git commit --amend</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这样 就不会在多出一次提交</span></span><br><span class="line"><span class="comment"># 本次对 3.txt的修改会记录 到  add 3  这次提交记录中</span></span><br></pre></td></tr></table></figure><p>接着结束这次 rebase</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rebase --<span class="built_in">continue</span></span><br><span class="line">Successfully rebased and updated refs/heads/master.</span><br></pre></td></tr></table></figure><h2 id="squash合并提交"><a href="#squash合并提交" class="headerlink" title="squash合并提交"></a>squash合并提交</h2><p>squash</p><p>该命令使您可以将两个或多个提交合并为一个提交。提交被压缩到其上方的提交中。Git使您有机会编写描述这两个更改的新提交消息。</p><p><strong>假定，我想合并某几个提交，怎么办</strong></p><p>如下<br><img src="/images/aHR0cHM6Ly9naXRlZS5jb20vcmVuc2hlbl8wNTIvbXlOb3RlLWltZy9yYXcvbWFzdGVyL2ltYWdlLzIwMjAwMzA0MTIzODIyLTY3NTQyMy5wbmc.png"></p><p>我们合并 add 5 和 add 3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase - i HEAD~2</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pick 6934312 add 3</span><br><span class="line">pick 6fa47e4 add 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebase 7f9d45d..6fa47e4 onto 7f9d45d (2 command(s))</span></span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pick 6934312 add 3</span><br><span class="line">s 6fa47e4 add 5</span><br></pre></td></tr></table></figure><p>接着 Esc,:wq 保存退出</p><p>开始执行变更</p><p>然后 在弹出来的编辑框里 写提交信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is a combination of 2 commits.</span></span><br><span class="line"><span class="comment"># The first commit&#x27;s message is:</span></span><br><span class="line"></span><br><span class="line">add 3</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the 2nd commit message:</span></span><br><span class="line"></span><br><span class="line">add 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># Please enter the commit message for your changes. Lines starting</span></span><br><span class="line"><span class="comment"># with &#x27;#&#x27; will be ignored, and an empty message aborts the commit.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Date:      Wed Mar 4 09:59:04 2020 +0800</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># interactive rebase in progress; onto 7f9d45d</span></span><br><span class="line"><span class="comment"># Last commands done (2 commands done):</span></span><br><span class="line"><span class="comment">#    pick 6934312 add 3</span></span><br><span class="line"><span class="comment">#    s 6fa47e4 add 5</span></span><br><span class="line"><span class="comment"># No commands remaining.</span></span><br><span class="line"><span class="comment"># You are currently editing a commit while rebasing branch &#x27;master&#x27; on &#x27;7f9d45d&#x27;.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Changes to be committed:</span></span><br><span class="line"><span class="comment">#       new file:   3.txt</span></span><br><span class="line"><span class="comment">#       new file:   5.txt</span></span><br></pre></td></tr></table></figure><p>我们可以修改提交消息，默认是把两个消息都合并</p><p>接着 Esc,:wq 保存退出</p><p>git log查看，合并成功<br><img src="/images/aHR0cHM6Ly9naXRlZS5jb20vcmVuc2hlbl8wNTIvbXlOb3RlLWltZy9yYXcvbWFzdGVyL2ltYWdlLzIwMjAwMzA0MTI0NjU3LTUwMDk0MC5wbmc.png"></p><h2 id="fixup合并提交，只保留较早的提交信息"><a href="#fixup合并提交，只保留较早的提交信息" class="headerlink" title="fixup合并提交，只保留较早的提交信息"></a>fixup合并提交，只保留较早的提交信息</h2><p>这类似于squash，但是要合并的提交已丢弃其消息。提交仅合并到其上方的提交中，并且较早提交的消息用于描述这两个更改。</p><p>最后两次提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i HEAD~2</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pick 7f9d45d add 2 ~ new comment</span><br><span class="line">pick 311adc9 add 3</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebase 77bd0eb..311adc9 onto 77bd0eb (2 command(s))</span></span><br><span class="line"><span class="comment">#  ----------------------</span></span><br><span class="line"><span class="comment"># 变更为</span></span><br><span class="line"><span class="comment"># -----------------------</span></span><br><span class="line"></span><br><span class="line">pick 7f9d45d add 2 ~ new comment</span><br><span class="line">f 311adc9 add 3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存</span></span><br></pre></td></tr></table></figure><h2 id="exec-执行任意shell命令"><a href="#exec-执行任意shell命令" class="headerlink" title="exec 执行任意shell命令"></a>exec 执行任意shell命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i HEAD~3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 弹出编辑框</span></span><br><span class="line"><span class="comment">#----------------------------</span></span><br><span class="line">pick 81fe4d0 添加test2.txt和test3.txt</span><br><span class="line">pick 77bd0eb add 1</span><br><span class="line">pick e7c68b8 add 2 ~ new comment</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebase 258a059..e7c68b8 onto 258a059 (3 command(s))</span></span><br><span class="line"><span class="comment">#....</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------</span></span><br><span class="line"><span class="comment"># 加一行 命令</span></span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line">x <span class="built_in">echo</span> <span class="string">&quot;Hello is echo do .......&quot;</span></span><br><span class="line">pick 81fe4d0 添加test2.txt和test3.txt</span><br><span class="line">pick 77bd0eb add 1</span><br><span class="line">pick e7c68b8 add 2 ~ new comment</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 执行了我们刚刚键入的命令</span></span><br><span class="line">Executing: <span class="built_in">echo</span> <span class="string">&quot;Hello is echo do .......&quot;</span></span><br><span class="line">Hello is <span class="built_in">echo</span> <span class="keyword">do</span> .......</span><br><span class="line">Successfully rebased and updated refs/heads/master.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其他</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Commands:</span></span><br><span class="line"><span class="comment"># p, pick = use commit</span></span><br><span class="line"><span class="comment"># r, reword = use commit, but edit the commit message</span></span><br><span class="line"><span class="comment"># e, edit = use commit, but stop for amending</span></span><br><span class="line"><span class="comment"># s, squash = use commit, but meld into previous commit</span></span><br><span class="line"><span class="comment"># f, fixup = like &quot;squash&quot;, but discard this commit&#x27;s log message</span></span><br><span class="line"><span class="comment"># x, exec = run command (the rest of the line) using shell</span></span><br><span class="line"><span class="comment"># d, drop = remove commit</span></span><br></pre></td></tr></table></figure><h2 id="drop"><a href="#drop" class="headerlink" title="drop"></a>drop</h2><p>删除提交<br>用法与 p,r,e,s,f,x 一致</p><h2 id="命令写错了怎么办"><a href="#命令写错了怎么办" class="headerlink" title="命令写错了怎么办"></a>命令写错了怎么办</h2><p>看提示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">You can fix this with <span class="string">&#x27;git rebase --edit-todo&#x27;</span>.</span><br><span class="line"><span class="comment"># 用 git rebase --edit--todo  来重新编辑命令</span></span><br></pre></td></tr></table></figure><p>#git</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;变基时有六个命令可用：&quot;&gt;&lt;a href=&quot;#变基时有六个命令可用：&quot; class=&quot;headerlink&quot; title=&quot;变基时有六个命令可用：&quot;&gt;&lt;/a&gt;变基时有六个命令可用：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;pick&lt;br&gt;pick只是意味着包括提交。重新进行命令时，重新安排pick命令的顺序会更改提交的顺序。如果选择不包括提交，则应删除整行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;reword&lt;br&gt;该reword命令与相似pick，但是使用后，重新设置过程将暂停并为您提供更改提交消息的机会。提交所做的任何更改均不受影响。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;edit&lt;br&gt;如果您选择edit提交，则将有机会修改提交，这意味着您可以完全添加或更改提交。您还可以进行更多提交，然后再继续进行变基。这使您可以将大型提交拆分为较小的提交，或者删除在提交中所做的错误更改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;squash&lt;br&gt;该命令使您可以将两个或多个提交合并为一个提交。提交被压缩到其上方的提交中。Git使您有机会编写描述这两个更改的新提交消息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;fixup&lt;br&gt;这类似于squash，但是要合并的提交已丢弃其消息。提交仅合并到其上方的提交中，并且较早提交的消息用于描述这两个更改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;exec&lt;br&gt;这使您可以对提交运行任意的Shell命令。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="git" scheme="https://tangxiaomi.top/categories/git/"/>
    
    
    <category term="git" scheme="https://tangxiaomi.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title> git 添加 ssh key</title>
    <link href="https://tangxiaomi.top/2021/06/03/git/59a209dce6/"/>
    <id>https://tangxiaomi.top/2021/06/03/git/59a209dce6/</id>
    <published>2021-06-03T00:00:00.000Z</published>
    <updated>2021-06-04T02:48:49.769Z</updated>
    
    <content type="html"><![CDATA[<ul><li>  创建 SSH Key<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;tangxiaomiemail@gmail.com&quot;</span></span><br><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure></li></ul><p>如果一切顺利的话，可以在用户主目录里找到 .ssh 目录，里面有 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件，这两个就是 SSH Key 的秘钥对，id_rsa 是私钥，不能泄露出去，id_rsa.pub 是公钥，可以放心地告诉任何人.</p><a id="more"></a><h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;tangxiaomi&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;tangxiaomiemail@gmail.com&quot;</span></span><br></pre></td></tr></table></figure><h2 id="非全局配置-删除-global"><a href="#非全局配置-删除-global" class="headerlink" title="非全局配置 删除 --global"></a>非全局配置 <code>删除 --global</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config  user.name <span class="string">&quot;tangxiaomi&quot;</span></span><br><span class="line">git config  user.email <span class="string">&quot;tangxiaomiemail@gmail.com&quot;</span></span><br></pre></td></tr></table></figure><h2 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a>查看配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name</span><br><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure><h2 id="取消全局配置"><a href="#取消全局配置" class="headerlink" title="取消全局配置"></a>取消全局配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> user.name</span><br><span class="line">git config --global --<span class="built_in">unset</span> user.email</span><br><span class="line"></span><br><span class="line">git config --global user.name    <span class="comment">#(查看)全局配置账户是否已经移除</span></span><br><span class="line">git config --global user.email   <span class="comment">#(查看)全局配置邮箱是否已经移除</span></span><br></pre></td></tr></table></figure><p>#git</p>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;  创建 SSH Key&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssh-keygen -t rsa -C &lt;span class=&quot;string&quot;&gt;&amp;quot;tangxiaomiemail@gmail.com&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ~/.ssh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat id_rsa.pub&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果一切顺利的话，可以在用户主目录里找到 .ssh 目录，里面有 &lt;code&gt;id_rsa&lt;/code&gt; 和 &lt;code&gt;id_rsa.pub&lt;/code&gt; 两个文件，这两个就是 SSH Key 的秘钥对，id_rsa 是私钥，不能泄露出去，id_rsa.pub 是公钥，可以放心地告诉任何人.&lt;/p&gt;</summary>
    
    
    
    <category term="git" scheme="https://tangxiaomi.top/categories/git/"/>
    
    
    <category term="git" scheme="https://tangxiaomi.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title> git 修改远程仓库地址</title>
    <link href="https://tangxiaomi.top/2021/06/03/git/c4b1781fcc/"/>
    <id>https://tangxiaomi.top/2021/06/03/git/c4b1781fcc/</id>
    <published>2021-06-03T00:00:00.000Z</published>
    <updated>2021-06-04T02:48:49.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令直接修改"><a href="#命令直接修改" class="headerlink" title="命令直接修改"></a>命令直接修改</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin [url]</span><br></pre></td></tr></table></figure><h2 id="先删后加"><a href="#先删后加" class="headerlink" title="先删后加"></a>先删后加</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br><span class="line">git remote add origin [url]</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="直接修改配置文件"><a href="#直接修改配置文件" class="headerlink" title="直接修改配置文件"></a>直接修改配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> .git</span><br><span class="line">vim config</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[core]</span><br><span class="line">    repositoryformatversion = 0</span><br><span class="line">    filemode = <span class="literal">true</span></span><br><span class="line">    bare = <span class="literal">false</span></span><br><span class="line">    logallrefupdates = <span class="literal">true</span></span><br><span class="line">    ignorecase = <span class="literal">true</span></span><br><span class="line">    precomposeunicode = <span class="literal">true</span></span><br><span class="line">[remote <span class="string">&quot;origin&quot;</span>]</span><br><span class="line">    url = https://github.com/im/im.github.io.git</span><br><span class="line">    fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch <span class="string">&quot;main&quot;</span>]</span><br><span class="line">    remote = origin</span><br><span class="line">    merge = refs/heads/main</span><br><span class="line">[submodule <span class="string">&quot;themes/icarus&quot;</span>]</span><br><span class="line">    active = <span class="literal">true</span></span><br><span class="line">    url = https://github.com/im/hexo-theme.git</span><br><span class="line">[submodule <span class="string">&quot;themes/cactus&quot;</span>]</span><br><span class="line">    url = https://github.com/im/hexo-theme.git</span><br><span class="line">    active = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="查看远程地址"><a href="#查看远程地址" class="headerlink" title="查看远程地址"></a>查看远程地址</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p>#git</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;命令直接修改&quot;&gt;&lt;a href=&quot;#命令直接修改&quot; class=&quot;headerlink&quot; title=&quot;命令直接修改&quot;&gt;&lt;/a&gt;命令直接修改&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git remote set-url origin [url]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;先删后加&quot;&gt;&lt;a href=&quot;#先删后加&quot; class=&quot;headerlink&quot; title=&quot;先删后加&quot;&gt;&lt;/a&gt;先删后加&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git remote rm origin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git remote add origin [url]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="git" scheme="https://tangxiaomi.top/categories/git/"/>
    
    
    <category term="git" scheme="https://tangxiaomi.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title> 7. HTML全局属性(global attribute)有哪些（包含H5）？</title>
    <link href="https://tangxiaomi.top/2021/06/03/interview/09a7ebb8b8/"/>
    <id>https://tangxiaomi.top/2021/06/03/interview/09a7ebb8b8/</id>
    <published>2021-06-03T00:00:00.000Z</published>
    <updated>2021-06-04T02:48:49.769Z</updated>
    
    <content type="html"><![CDATA[<p><code>accesskey</code>   设置快捷键<br><code>class</code>  为元素设置类标识<br><code>contenteditable</code>  指定元素内容是否可编辑<br><code>contextmenu</code>  自定义鼠标右键弹出上下文菜单内容（仅firefox支持）<br><code>data-*</code>  为元素增加自定义属性<br>dir：设置元素文本方向（默认ltr；rtl）<br><code>draggable</code>  设置元素是否可拖拽<br><code>dropzone</code>  设置元素拖放类型（copy|move|link,H5新属性，主流均不支持）<br><code>hidden</code>  规定元素仍未或不在相关<br><code>id</code>  元素id，文档内唯一<br><code>lang</code>  元素内容的语言<br><code>spellcheck</code>  是否启动拼写和语法检查<br><code>style</code>  行内css样式<br><code>tabindex</code>  设置元素可以获得焦点，通过tab导航<br><code>title</code>  规定元素有关的额外信息</p><blockquote><p>相关链接：<a href="~https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes~">Global attributes</a>  </p></blockquote><p>#interview/html #interview/everyday</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;accesskey&lt;/code&gt;   设置快捷键&lt;br&gt;&lt;code&gt;class&lt;/code&gt;  为元素设置类标识&lt;br&gt;&lt;code&gt;contenteditable&lt;/code&gt;  指定元素内容是否可编辑&lt;br&gt;&lt;code&gt;contextmenu&lt;/code&gt;  </summary>
      
    
    
    
    <category term="interview" scheme="https://tangxiaomi.top/categories/interview/"/>
    
    
    <category term="interview" scheme="https://tangxiaomi.top/tags/interview/"/>
    
    <category term="html" scheme="https://tangxiaomi.top/tags/html/"/>
    
    <category term="everyday" scheme="https://tangxiaomi.top/tags/everyday/"/>
    
  </entry>
  
  <entry>
    <title> 4. html的元素有哪些（包含H5）？</title>
    <link href="https://tangxiaomi.top/2021/06/03/interview/1d841137c9/"/>
    <id>https://tangxiaomi.top/2021/06/03/interview/1d841137c9/</id>
    <published>2021-06-03T00:00:00.000Z</published>
    <updated>2021-06-04T02:48:49.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>区分出行内元素、块级元素、空元素并在后面简要标注下作用</p><a id="more"></a><h2 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h2><ul><li>a</li><li>b</li><li>span</li><li>strong</li><li>i</li><li>em</li><li>button</li><li>input</li><li>label</li><li>br</li><li>textarea</li><li>select</li></ul><h2 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h2><ul><li>div</li><li>p</li><li>h1-h6</li><li>ol</li><li>ul</li><li>li</li><li>table</li><li>tbody</li><li>td</li><li>tr</li><li>thead</li><li>dl</li><li>dt</li><li>dd</li></ul><h2 id="H5新增元素"><a href="#H5新增元素" class="headerlink" title="H5新增元素"></a>H5新增元素</h2><ul><li><code>section</code>  标签定义文档中的节</li><li><code>article </code> 标签的内容独立于文档的其余部分</li><li><code>audio</code> 标签定义声音，比如音乐或其他音频流</li><li><code>video</code> 标签定义视频，比如电影片段或其他视频流</li><li><code>hearder</code> 标签定义文档的页眉（介绍信息）</li><li><code>footer</code> 标签定义文档或节的页脚</li><li><code>small</code> 标签呈现小号字体效果</li><li><code>canvas</code> 定义画布</li></ul><p>#interview/html #interview/everyday</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;区分出行内元素、块级元素、空元素并在后面简要标注下作用&lt;/p&gt;</summary>
    
    
    
    <category term="interview" scheme="https://tangxiaomi.top/categories/interview/"/>
    
    
    <category term="interview" scheme="https://tangxiaomi.top/tags/interview/"/>
    
    <category term="html" scheme="https://tangxiaomi.top/tags/html/"/>
    
    <category term="everyday" scheme="https://tangxiaomi.top/tags/everyday/"/>
    
  </entry>
  
  <entry>
    <title> 3. 用递归算法实现，数组长度为5且元素的随机数在2-32间不重复的值</title>
    <link href="https://tangxiaomi.top/2021/06/03/interview/362e778681/"/>
    <id>https://tangxiaomi.top/2021/06/03/interview/362e778681/</id>
    <published>2021-06-03T00:00:00.000Z</published>
    <updated>2021-06-04T02:48:49.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>这是一道大题目，把考点拆成了4个小项；需要侯选人用递归算法实现（限制15行代码以内实现；限制时间10分钟内完成）： </p><ul><li>生成一个长度为5的空数组 <code>arr</code> 。 </li><li>生成一个（2－32）之间的随机整数 <code>rand</code>。</li><li>把随机数 <code>rand</code> 插入到数组 <code>arr</code> 内，如果数组arr内已存在与 <code>rand</code> 相同的数字，则重新生成随机数<code>rand</code>并插入到<code>arr</code>内[需要使用递归实现，不能使用 <code>for/while</code> 等循环] </li><li>最终输出一个长度为5，且内容不重复的数组 <code>arr</code> 。</li></ul><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">const</span> randomNum = <span class="function">() =&gt;</span> (<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">31</span> + <span class="number">2</span>))</span><br><span class="line"><span class="keyword">const</span> randomArr = <span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">0</span>) <span class="keyword">return</span> arr;</span><br><span class="line">    <span class="keyword">const</span> num = randomNum();</span><br><span class="line">    <span class="keyword">if</span> (arr.includes(num)) <span class="keyword">return</span> randomArr(n)</span><br><span class="line">    arr[n -<span class="number">1</span>] = num;</span><br><span class="line">    <span class="keyword">return</span> randomArr(n - <span class="number">1</span>)</span><br><span class="line">&#125;;</span><br><span class="line">randomArr(arr.length)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>#interview/javascript #interview/everyday</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;这是一道大题目，把考点拆成了4个小项；需要侯选人用递归算法实现（限制15行代码以内实现；限制时间10分钟内完成）： &lt;/p&gt;
&lt;ul&gt;
&lt;l</summary>
      
    
    
    
    <category term="interview" scheme="https://tangxiaomi.top/categories/interview/"/>
    
    
    <category term="interview" scheme="https://tangxiaomi.top/tags/interview/"/>
    
    <category term="everyday" scheme="https://tangxiaomi.top/tags/everyday/"/>
    
    <category term="javascript" scheme="https://tangxiaomi.top/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title> 2. 圣杯布局和双飞翼布局的理解和区别，并用代码实现</title>
    <link href="https://tangxiaomi.top/2021/06/03/interview/82674f606e/"/>
    <id>https://tangxiaomi.top/2021/06/03/interview/82674f606e/</id>
    <published>2021-06-03T00:00:00.000Z</published>
    <updated>2021-06-04T02:48:49.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>圣杯布局和双飞翼布局都是为了解决两边定宽，中间自适应且优先渲染的布局需求，那么为了自适应且优先渲染，必须要把中间的 <code>dom</code> 放在最顶端，以保证主要内容能最先被浏览器解析</p><h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><p>为了中间 <code>div</code> 内容不被遮挡，将中间 <code>div</code> 设置了左右 <code>padding-left</code> 和 <code>padding-right</code> 后，将左右两个 <code>div</code> 用相对布局 <code>position: relative</code> 并分别配合 <code>right</code> 和 <code>left</code> 属性，以便左右两栏 <code>div</code> 移动后不遮挡中间 <code>div</code></p><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;hd&quot;</span>&gt;</span>header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;bd&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;middle&quot;</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#hd</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span></span><br><span class="line">    background:<span class="number">666</span></span><br><span class="line">    text-align: center</span><br><span class="line"></span><br><span class="line">#bd</span><br><span class="line">    /* 左右栏通过添加负的margin放到正确的位置了，此段代码是为了摆正中间栏的位置 */</span><br><span class="line">    padding: <span class="number">0</span> <span class="number">200px</span> <span class="number">0</span> <span class="number">180px</span></span><br><span class="line">    height: <span class="number">100px</span></span><br><span class="line"></span><br><span class="line">#middle</span><br><span class="line">    float: left</span><br><span class="line">    width: <span class="number">100%</span> /* 左栏上去到第一行 */</span><br><span class="line">    height: <span class="number">100px</span></span><br><span class="line">    background: blue</span><br><span class="line"></span><br><span class="line">#left</span><br><span class="line">    float: left</span><br><span class="line">    width: <span class="number">180px</span></span><br><span class="line">    height: <span class="number">100px</span></span><br><span class="line">    margin-left: -<span class="number">100%</span></span><br><span class="line">    background:<span class="number">#0c9</span></span><br><span class="line">    /* 中间栏的位置摆正之后，左栏的位置也相应右移，通过相对定位的left恢复到正确位置 */</span><br><span class="line">    position: relative</span><br><span class="line">    left: -<span class="number">180px</span></span><br><span class="line"></span><br><span class="line">#right</span><br><span class="line">    float: left</span><br><span class="line">    width: <span class="number">200px</span></span><br><span class="line">    height: <span class="number">100px</span></span><br><span class="line">    margin-left: -<span class="number">200px</span></span><br><span class="line">    background:<span class="number">#0c9</span></span><br><span class="line">    /* 中间栏的位置摆正之后，右栏的位置也相应左移，通过相对定位的right恢复到正确位置 */</span><br><span class="line">    position: relative</span><br><span class="line">    right: -<span class="number">200px</span></span><br><span class="line"></span><br><span class="line">#footer</span><br><span class="line">    height: <span class="number">50px</span></span><br><span class="line">    background:<span class="number">#666</span></span><br><span class="line">    text-align: center</span><br></pre></td></tr></table></figure><h2 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h2><p>为了中间 <code>div</code> 内容不被遮挡，直接在中间 <code>div</code> 内部创建子 <code>div</code> 用于放置内容，在该子 <code>div</code> 里用 <code>margin-left</code> 和 <code>margin-right</code> 为左右两栏 <code>div</code> 留出位置。多了1个 <code>div</code> ，少用大致4个 <code>css</code> 属性（圣杯布局中间 <code>div</code>   <code>padding-left</code> 和 <code>padding-right</code> 这2个属性，加上左右两个 <code>div</code> 用相对布局 <code>position: relative</code> 及对应的 <code>right</code> 和 <code>left</code> 共4个属性，一共6个；而双飞翼布局子div里用 <code>margin-left</code> 和 <code>margin-right</code> 共2个属性，6-2=4），个人感觉比圣杯布局思路更直接和简洁一点。</p><h3 id="hrml"><a href="#hrml" class="headerlink" title="hrml"></a>hrml</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;hd&quot;</span>&gt;</span>header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;middle&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;inside&quot;</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="css-1"><a href="#css-1" class="headerlink" title="css"></a>css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#hd</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span></span><br><span class="line">    background:<span class="number">#666</span></span><br><span class="line">    text-align: center</span><br><span class="line"></span><br><span class="line">#middle</span><br><span class="line">    float: left</span><br><span class="line">    width: <span class="number">100%</span> /* 左栏上去到第一行 */</span><br><span class="line">    height: <span class="number">100px</span></span><br><span class="line">    background: blue</span><br><span class="line"></span><br><span class="line">#left</span><br><span class="line">    float: left</span><br><span class="line">    width: <span class="number">180px</span></span><br><span class="line">    height: <span class="number">100px</span></span><br><span class="line">    margin-left: -<span class="number">100%</span></span><br><span class="line">    background:<span class="number">#0c9</span></span><br><span class="line"></span><br><span class="line">#right</span><br><span class="line">    float: left</span><br><span class="line">    width: <span class="number">200px</span></span><br><span class="line">    height: <span class="number">100px</span></span><br><span class="line">    margin-left: -<span class="number">200px</span></span><br><span class="line">    background:<span class="number">#0c9</span></span><br><span class="line"></span><br><span class="line">/* 给内部div添加margin，把内容放到中间栏，其实整个背景还是<span class="number">100%</span> */</span><br><span class="line">#inside</span><br><span class="line">    margin: <span class="number">0</span> <span class="number">200px</span> <span class="number">0</span> <span class="number">180px</span></span><br><span class="line">    height: <span class="number">100px</span></span><br><span class="line"></span><br><span class="line">#footer</span><br><span class="line">    clear: both /* 记得清楚浮动 */</span><br><span class="line">    height: <span class="number">50px</span></span><br><span class="line">    background:<span class="number">#666</span></span><br><span class="line">    text-align: center</span><br></pre></td></tr></table></figure><h2 id="flex-实现圣杯布局"><a href="#flex-实现圣杯布局" class="headerlink" title="flex 实现圣杯布局"></a>flex 实现圣杯布局</h2><h3 id="html-1"><a href="#html-1" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;center&quot;</span>&gt;</span>center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="css-2"><a href="#css-2" class="headerlink" title="css"></a>css</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span></span><br><span class="line">    <span class="attribute">display</span>: flex</span><br><span class="line"></span><br><span class="line">#center</span><br><span class="line">    flex: <span class="number">1</span></span><br><span class="line">    height <span class="number">50px</span></span><br><span class="line">    background blue</span><br><span class="line"></span><br><span class="line">#left</span><br><span class="line">    flex: <span class="number">0</span> <span class="number">0</span> <span class="number">200px</span></span><br><span class="line">    order: -<span class="number">1</span></span><br><span class="line">    height <span class="number">50px</span></span><br><span class="line">    background yellow</span><br><span class="line"></span><br><span class="line">#right</span><br><span class="line">    flex: <span class="number">0</span> <span class="number">0</span> <span class="number">150px</span></span><br><span class="line">    height <span class="number">50px</span></span><br><span class="line">    background green</span><br></pre></td></tr></table></figure><blockquote><p>参考文章： <a href="~https://www.jianshu.com/p/81ef7e7094e8~">圣杯布局和双飞翼布局的理解与思考</a>  </p></blockquote><p>#interview/css #interview/everyday</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;理解&quot;&gt;&lt;a href=&quot;#理解&quot; class=&quot;headerlink&quot; title=&quot;理解&quot;&gt;&lt;/a&gt;理解&lt;/h2&gt;&lt;p&gt;圣杯布局和双飞翼布局都是为了解决两边定宽，中间自适应且优先渲染的布局需求，那么为了自适应且优先渲染，必须要把中间的 &lt;code&gt;dom&lt;/code&gt; 放在最顶端，以保证主要内容能最先被浏览器解析&lt;/p&gt;
&lt;h2 id=&quot;圣杯布局&quot;&gt;&lt;a href=&quot;#圣杯布局&quot; class=&quot;headerlink&quot; title=&quot;圣杯布局&quot;&gt;&lt;/a&gt;圣杯布局&lt;/h2&gt;&lt;p&gt;为了中间 &lt;code&gt;div&lt;/code&gt; 内容不被遮挡，将中间 &lt;code&gt;div&lt;/code&gt; 设置了左右 &lt;code&gt;padding-left&lt;/code&gt; 和 &lt;code&gt;padding-right&lt;/code&gt; 后，将左右两个 &lt;code&gt;div&lt;/code&gt; 用相对布局 &lt;code&gt;position: relative&lt;/code&gt; 并分别配合 &lt;code&gt;right&lt;/code&gt; 和 &lt;code&gt;left&lt;/code&gt; 属性，以便左右两栏 &lt;code&gt;div&lt;/code&gt; 移动后不遮挡中间 &lt;code&gt;div&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;html&quot;&gt;&lt;a href=&quot;#html&quot; class=&quot;headerlink&quot; title=&quot;html&quot;&gt;&lt;/a&gt;html&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;hd&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;header&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;bd&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;middle&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;middle&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;left&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;left&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;right&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;right&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;footer&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;footer&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="interview" scheme="https://tangxiaomi.top/categories/interview/"/>
    
    
    <category term="css" scheme="https://tangxiaomi.top/tags/css/"/>
    
    <category term="interview" scheme="https://tangxiaomi.top/tags/interview/"/>
    
    <category term="everyday" scheme="https://tangxiaomi.top/tags/everyday/"/>
    
  </entry>
  
  <entry>
    <title> 6 . 写一个方法去掉字符串中的空格</title>
    <link href="https://tangxiaomi.top/2021/06/03/interview/8d5ea4ab3d/"/>
    <id>https://tangxiaomi.top/2021/06/03/interview/8d5ea4ab3d/</id>
    <published>2021-06-03T00:00:00.000Z</published>
    <updated>2021-06-04T02:48:49.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>写一个方法去掉字符串中的空格，要求传入不同的类型分别能去掉前、后、前后、中间的空格 </p><a id="more"></a><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;  s t  r  &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> POSITION = <span class="built_in">Object</span>.freeze(&#123;</span><br><span class="line">    <span class="attr">left</span>: <span class="built_in">Symbol</span>(),</span><br><span class="line">    <span class="attr">right</span>: <span class="built_in">Symbol</span>(),</span><br><span class="line">    <span class="attr">both</span>: <span class="built_in">Symbol</span>(),</span><br><span class="line">    <span class="attr">center</span>: <span class="built_in">Symbol</span>(),</span><br><span class="line">    <span class="attr">all</span>: <span class="built_in">Symbol</span>()</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span>(<span class="params">str, position = POSITION.both</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!!POSITION[position]) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;unexpected position value&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (position) &#123;</span><br><span class="line">        <span class="keyword">case</span> POSITION.left:</span><br><span class="line">            str = str.replace(<span class="regexp">/^\s+/</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> POSITION.right:</span><br><span class="line">            str = str.replace(<span class="regexp">/\s+$/</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> POSITION.both:</span><br><span class="line">            str = str.replace(<span class="regexp">/^\s+/</span>, <span class="string">&quot;&quot;</span>).replace(<span class="regexp">/\s+$/</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> POSITION.center:</span><br><span class="line">            <span class="keyword">while</span> (str.match(<span class="regexp">/\w\s+\w/</span>)) &#123;</span><br><span class="line">                str = str.replace(<span class="regexp">/(\w)(\s+)(\w)/</span>, <span class="string">`$1$3`</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> POSITION.all:</span><br><span class="line">            str = str.replace(<span class="regexp">/\s/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = trim(str);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`|<span class="subst">$&#123;result&#125;</span>|`</span>); <span class="comment">//  |s t  r|</span></span><br></pre></td></tr></table></figure><p>#interview/javascript #interview/everyday</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;写一个方法去掉字符串中的空格，要求传入不同的类型分别能去掉前、后、前后、中间的空格 &lt;/p&gt;</summary>
    
    
    
    <category term="interview" scheme="https://tangxiaomi.top/categories/interview/"/>
    
    
    <category term="interview" scheme="https://tangxiaomi.top/tags/interview/"/>
    
    <category term="everyday" scheme="https://tangxiaomi.top/tags/everyday/"/>
    
    <category term="javascript" scheme="https://tangxiaomi.top/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title> 1. 页面导入样式时，使用link和@import有什么区别？</title>
    <link href="https://tangxiaomi.top/2021/06/03/interview/d9026b0618/"/>
    <id>https://tangxiaomi.top/2021/06/03/interview/d9026b0618/</id>
    <published>2021-06-03T00:00:00.000Z</published>
    <updated>2021-06-04T02:48:49.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>  页面导入样式时，使用link和@import有什么区别？</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><ol><li>link 是HTML标签，@import 是 css 提供的。</li><li>link 引入的样式页面加载时同时加载，@import 引入的样式需等页面加载完成后再加载。</li><li>link 没有兼容性问题，@import 不兼容 ie5 以下。</li><li>link 可以通过 js 操作 DOM 动态引入样式表改变样式，而 @import 不可以。</li></ol><p>#interview/html #interview/everyday</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;  页面导入样式时，使用link和@import有什么区别？&lt;/p&gt;
&lt;h2 id=&quot;解答&quot;&gt;&lt;a href=&quot;#解答&quot; class=&quot;he</summary>
      
    
    
    
    <category term="interview" scheme="https://tangxiaomi.top/categories/interview/"/>
    
    
    <category term="interview" scheme="https://tangxiaomi.top/tags/interview/"/>
    
    <category term="html" scheme="https://tangxiaomi.top/tags/html/"/>
    
    <category term="everyday" scheme="https://tangxiaomi.top/tags/everyday/"/>
    
  </entry>
  
  <entry>
    <title> 8. 在页面上隐藏元素的方法有哪些？</title>
    <link href="https://tangxiaomi.top/2021/06/03/interview/f4d551d5c3/"/>
    <id>https://tangxiaomi.top/2021/06/03/interview/f4d551d5c3/</id>
    <published>2021-06-03T00:00:00.000Z</published>
    <updated>2021-06-04T02:48:49.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>在页面上隐藏元素的方法有哪些？ 并简述出第一种方法的应用场景和优劣势</p><a id="more"></a><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><ul><li>占位:</li></ul><p><code>visibility: hidden;</code>  看不见但是会占据空间<br><code>margin-left: -100%;</code><br><code>opacity: 0;</code> 看不见但是会占据空间<br><code>transform: scale(0);</code><br><code>filter: opacity(0);</code></p><ul><li>不占位:</li></ul><p><code>display: none;</code>  页面不会渲染<br><code>width: 0;</code><br><code>height: 0;</code><br><code>overflow: hidden;</code> 页面会渲染但是不显示<br><code>position</code> 配合 <code>z-index</code>; 或者 <code>left/top/bottom/right ： -100%；</code><br><code>transform: scale(0);</code><br><code>translateX(+-100%);</code><br><code>translateY(+-100%);</code><br><code>rotateX(90deg);</code></p><ul><li>仅对块内文本元素:</li></ul><p><code>text-indent: -9999px;</code><br><code>font-size: 0;</code></p><p>#interview/css #interview/everyday</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;在页面上隐藏元素的方法有哪些？ 并简述出第一种方法的应用场景和优劣势&lt;/p&gt;</summary>
    
    
    
    <category term="interview" scheme="https://tangxiaomi.top/categories/interview/"/>
    
    
    <category term="css" scheme="https://tangxiaomi.top/tags/css/"/>
    
    <category term="interview" scheme="https://tangxiaomi.top/tags/interview/"/>
    
    <category term="everyday" scheme="https://tangxiaomi.top/tags/everyday/"/>
    
  </entry>
  
</feed>
