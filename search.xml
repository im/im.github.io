<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTML5 &lt;dialog&gt;</title>
      <link href="/2023/11/28/html/html5-dialog/"/>
      <url>/2023/11/28/html/html5-dialog/</url>
      
        <content type="html"><![CDATA[<p>HTML5 中引入了 <code>&lt;dialog&gt;</code> 元素，它提供了一种简单的方式来创建对话框或模态框，用于与用户进行交互、显示信息或接收输入。</p><h2 id="使用-元素"><a href="#使用-元素" class="headerlink" title="使用 &lt;dialog&gt; 元素"></a>使用 <code>&lt;dialog&gt;</code> 元素</h2><p>首先，我们需要创建一个 <code>&lt;dialog&gt;</code> 元素，并添加对话框的内容和控制按钮。以下是一个示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dialog</span> <span class="attr">id</span>=<span class="string">&quot;myDialog&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>对话框标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>对话框内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;closeDialog&quot;</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dialog</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要打开对话框，我们可以使用 JavaScript 的 <code>showModal()</code> 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dialog = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myDialog&#x27;</span>);</span><br><span class="line">dialog.<span class="title function_">showModal</span>();</span><br></pre></td></tr></table></figure><p>要关闭对话框，我们可以使用 <code>close()</code> 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dialog = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myDialog&#x27;</span>);</span><br><span class="line">dialog.<span class="title function_">close</span>();</span><br></pre></td></tr></table></figure><p>可以通过监听 <code>close</code> 事件来执行对话框关闭时的操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dialog = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myDialog&#x27;</span>);</span><br><span class="line">dialog.<span class="title function_">addEventListener</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 对话框关闭时执行的操作</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>类似地，可以监听 <code>show</code> 事件来执行对话框打开时的操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dialog = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myDialog&#x27;</span>);</span><br><span class="line">dialog.<span class="title function_">addEventListener</span>(<span class="string">&#x27;show&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 对话框打开时执行的操作</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果想在对话框中添加更多交互元素，可以像使用普通 HTML 元素一样在 <code>&lt;dialog&gt;</code> 内部添加其他元素。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p><code>&lt;dialog&gt;</code> 元素的实现原理与浏览器有关。在一些现代浏览器中，对话框会以模态方式显示，阻止用户与页面的其他部分进行交互。对话框元素本身是一个浮动元素，可以通过 CSS 进行样式调整。</p><p>在一些不支持 <code>&lt;dialog&gt;</code> 元素的浏览器中，可以使用 JavaScript 库或框架来模拟对话框的行为。这些库通常会创建一个覆盖整个页面的元素，并在其上显示对话框内容，以模拟对话框的效果。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><code>&lt;dialog&gt;</code> 元素在不同浏览器中的支持程度可能有所差异，部分浏览器可能不支持或需要使用前缀。在使用时，建议先检查浏览器的兼容性。</li><li>对话框应该包含明确的标题和内容，以便用户理解对话框的用途和内容。</li><li>对话框应该提供关闭按钮或其他关闭方式，以便用户可以随时关闭对话框。</li><li>对话框的样式可以通过 CSS 进行自定义，以适应特定的设计需求。</li><li>使用对话框时应注意用户体验，避免滥用对话框，确保对话框的使用具有明确的目的和价值。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css view-transition</title>
      <link href="/2023/11/17/css/view-transition/"/>
      <url>/2023/11/17/css/view-transition/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-CSS-View-Transition？"><a href="#什么是-CSS-View-Transition？" class="headerlink" title="什么是 CSS View-Transition？"></a>什么是 CSS View-Transition？</h2><p>CSS View-Transition 是一种用于创建平滑过渡效果的 CSS 属性。它可以让元素在视图之间进行过渡，从而实现动画效果。通过使用 CSS View-Transition，我们可以在前端开发中创建各种各样的动态效果，提升用户体验。</p><h2 id="如何使用-CSS-View-Transition？"><a href="#如何使用-CSS-View-Transition？" class="headerlink" title="如何使用 CSS View-Transition？"></a>如何使用 CSS View-Transition？</h2><p>使用 CSS View-Transition 非常简单。我们只需要为目标元素添加一些必要的 CSS 属性即可。</p><ol><li>首先，为目标元素添加 <code>transition</code> 属性，指定过渡的属性和持续时间。例如：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: width <span class="number">0.3s</span> ease-in-out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，我们指定了 <code>width</code> 属性在 0.3 秒内进行过渡，并且使用了 <code>ease-in-out</code> 缓动函数。</p><ol start="2"><li>接下来，我们可以通过添加一些触发事件来激活过渡效果。例如，我们可以使用鼠标悬停事件来触发过渡效果：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.element</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，当鼠标悬停在 <code>.element</code> 元素上时，它的宽度将过渡到 200 像素。</p><h2 id="CSS-View-Transition-的常用属性"><a href="#CSS-View-Transition-的常用属性" class="headerlink" title="CSS View-Transition 的常用属性"></a>CSS View-Transition 的常用属性</h2><p>除了 <code>transition</code> 属性外，CSS View-Transition 还提供了其他一些常用属性，用于进一步控制过渡效果。</p><ul><li><code>transition-property</code>：指定过渡的属性。可以使用多个属性，用逗号分隔。</li><li><code>transition-duration</code>：指定过渡的持续时间。</li><li><code>transition-timing-function</code>：指定过渡的缓动函数。</li><li><code>transition-delay</code>：指定过渡的延迟时间。</li></ul><h2 id="使用场景示例"><a href="#使用场景示例" class="headerlink" title="使用场景示例"></a>使用场景示例</h2><h3 id="1-图片展示过渡"><a href="#1-图片展示过渡" class="headerlink" title="1. 图片展示过渡"></a>1. 图片展示过渡</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;image-container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Image 1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image2.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Image 2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.image-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.image</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">0.3s</span> ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.image</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，当鼠标悬停在图片上时，图片将以 1.2 倍的比例进行放大，创建出平滑的过渡效果。</p><h3 id="2-菜单项过渡"><a href="#2-菜单项过渡" class="headerlink" title="2. 菜单项过渡"></a>2. 菜单项过渡</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;menu-item&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;menu-item&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;menu-item&quot;</span>&gt;</span>Services<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;menu-item&quot;</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.menu-item</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: background-color <span class="number">0.3s</span> ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu-item</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f2f2f2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，当鼠标悬停在菜单项上时，背景颜色将以平滑的过渡效果变为灰色。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>CSS View-Transition 是一种非常强大的前端开发工具，可以帮助我们创建各种各样的动态效果。通过简单地添加一些 CSS 属性，我们就可以实现平滑的过渡效果，提升用户体验。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>navigator.registerProtocolHandler</title>
      <link href="/2023/11/05/other/navigator-registerProtocolHandler/"/>
      <url>/2023/11/05/other/navigator-registerProtocolHandler/</url>
      
        <content type="html"><![CDATA[<p><code>navigator.registerProtocolHandler</code> 是一个 Web API，用于注册自定义协议处理程序。通过使用这个 API，您可以告诉浏览器如何处理特定的自定义协议，例如打开特定的应用程序或执行特定的操作。这对于创建与操作系统或其他应用程序集成的 Web 应用程序非常有用。</p><h2 id="如何使用-navigator-registerProtocolHandler-hammer-and-wrench"><a href="#如何使用-navigator-registerProtocolHandler-hammer-and-wrench" class="headerlink" title="如何使用 navigator.registerProtocolHandler :hammer_and_wrench:"></a>如何使用 <code>navigator.registerProtocolHandler</code> :hammer_and_wrench:</h2><p>使用 <code>navigator.registerProtocolHandler</code> 需要以下步骤：</p><ol><li><p><strong>确定自定义协议</strong>：首先，您需要确定您要注册的自定义协议。这个协议应该是唯一的，并且与其他现有的协议不冲突。例如，您可以选择 <code>myapp</code> 作为您的自定义协议。</p></li><li><p><strong>创建处理程序</strong>：接下来，您需要创建一个处理程序，用于处理您的自定义协议。这可以是一个本地应用程序、一个网页或一个特定的操作。处理程序应该能够接收来自浏览器的自定义协议请求，并做出相应的响应。</p></li><li><p><strong>注册协议处理程序</strong>：使用 <code>navigator.registerProtocolHandler</code> 方法来注册您的自定义协议处理程序。该方法接受三个参数：协议名称、处理程序的 URL 和一个可选的标题。以下是一个示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigator.<span class="title function_">registerProtocolHandler</span>(<span class="string">&#x27;myapp&#x27;</span>, <span class="string">&#x27;https://example.com/myapp-handler?url=%s&#x27;</span>, <span class="string">&#x27;My App&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在上面的示例中，<code>myapp</code> 是自定义协议的名称，<code>https://example.com/myapp-handler?url=%s</code> 是处理程序的 URL，<code>My App</code> 是可选的标题。</p></li><li><p><strong>测试协议处理程序</strong>：注册完成后，您可以测试您的协议处理程序是否正常工作。您可以尝试在浏览器中输入 <code>myapp://example.com</code>（将 <code>example.com</code> 替换为您的实际网址），并查看处理程序是否正确地响应。</p></li></ol><h2 id="示例应用场景-bulb"><a href="#示例应用场景-bulb" class="headerlink" title="示例应用场景 :bulb:"></a>示例应用场景 :bulb:</h2><ul><li><p><strong>桌面应用程序集成</strong>：您可以使用 <code>navigator.registerProtocolHandler</code> 将您的 Web 应用程序与桌面应用程序集成。例如，当用户点击您的网页中的特定链接时，您可以打开您的桌面应用程序并传递相应的参数。</p></li><li><p><strong>自定义处理程序</strong>：您可以创建一个自定义的处理程序，用于处理特定的自定义协议。例如，您可以创建一个处理程序，用于处理邮件链接，并直接打开用户默认的邮件客户端。</p></li></ul><h2 id="支持的浏览器-globe-with-meridians"><a href="#支持的浏览器-globe-with-meridians" class="headerlink" title="支持的浏览器 :globe_with_meridians:"></a>支持的浏览器 :globe_with_meridians:</h2><p>目前，<code>navigator.registerProtocolHandler</code> 在大多数现代浏览器中得到支持，包括 Chrome、Firefox 和 Safari 等。但是，不同浏览器对于自定义协议的支持程度可能有所不同，因此在使用时请注意兼容性。</p><h2 id="结论-memo"><a href="#结论-memo" class="headerlink" title="结论 :memo:"></a>结论 :memo:</h2><p><code>navigator.registerProtocolHandler</code> 是一个强大的 Web API，可以帮助您注册自定义协议处理程序，实现与操作系统或其他应用程序的集成。通过使用这个 API，您可以为您的 Web 应用程序带来更多的灵活性和功能性。在使用时，请确保考虑兼容性，并进行充分的测试，以确保您的协议处理程序正常工作。</p><p>希望本文对您理解和使用 <code>navigator.registerProtocolHandler</code> 有所帮助！:sparkles:</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题合集</title>
      <link href="/2023/07/11/interview/interview-list/"/>
      <url>/2023/07/11/interview/interview-list/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML-CSS​"><a href="#HTML-CSS​" class="headerlink" title="HTML + CSS​"></a>HTML + CSS​</h1><ul><li>什么是 BFC ？如何触发？有何特点？如何解决 margin“塌陷”？</li><li>CSS 如何出来溢出？说一下 overflow 不同值的区别。 ​</li><li>三栏布局有什么实现方式？​</li><li>css calc 属性作用是什么？主要用于解决什么问题？ ​</li><li>有一个固定长宽div，怎么实现在屏幕上垂直水平居中​</li><li>描述一下渐进增强（progressive enhancement）和优雅降级（graceful degradation）​</li><li>iframe 有哪些优点？哪些缺点？用它来解决过什么问题？​</li><li>Google Chrome 如何支持大小小于 12px 的文字？​</li><li>描述一下 css 盒子模型​</li><li>HTML5 的特性有哪些？​</li><li>CSS3 的特性有哪些？​</li><li>如何实现水平居中？​</li><li>如何实现垂直居中？​</li><li>如何实现双圣杯布局？​</li><li>CSS 中选择器的优先级？​</li><li>CSS 权重如何计算？​</li><li>HTML5 input 元素 type 属性有哪些？​</li><li>CSS 中哪些属性可继承，哪些不可以​</li><li>CSS 单位中 px、em 和 rem 的区别？配合 font-size 如何计算？（移动端适配方案）​</li><li>如何画一条 0.5px 的线​</li><li>隐藏一个元素有哪些方法？display: none 与 visibility: hidden 与 opacity: 0 之间的区别？​</li><li>position 的值有哪些，分别有什么特点？​</li><li>什么是浮动，浮动会引起什么问题，有何解决方案？​</li><li>line-height 和 height 的区别​</li><li>设置一个元素的背景颜色，背景颜色会填充哪些区域？​</li><li>inline-block、inline 和 block 的区别；为什么 img 是 inline 还可以设置宽高​</li><li>什么是重绘？什么是回流？如何减少？如何让文档脱离文档流？​</li><li>box-sizing 的作用，如何使用？​</li><li>如何实现清除浮动​</li><li>css 动画如何实现​</li><li>如何实现在某个容器中居中的？​</li><li>如何改变一个 DOM 元素的字体颜色？​</li><li>相对布局和绝对布局，position:relative 和 obsolute。​</li><li>什么是弹性盒子 flex 布局？​</li><li>什么是 rem 布局？​</li><li>less 和 scss 有什么区别？​</li><li>::before 和::after 中双冒号和单冒号的区别？​</li><li>CSS3 新增伪类，以及伪元素？​</li><li>响应式布局实现方案？​</li><li>link 标签和 import 标签的区别？​</li><li>transition 和 animation 的区别？​</li><li>说一下块元素、行元素、置换元素​</li><li>多行元素的文本省略号如何实现？​</li><li>Doctype 作用? 严格模式与混杂模式如何区分？它们有何意义?</li></ul><h1 id="Javascript​"><a href="#Javascript​" class="headerlink" title="Javascript​"></a>Javascript​</h1><ul><li>javascript 的数据类型有哪些？​</li><li>javascript 有哪些引用类型？​</li><li>如何判断 javascript 的数据类型？​</li><li>怎么判断两个对象相等？如何判断空对象？​</li><li>0.1 + 0.2 为什么不等于 0.3 ？（解释原理）​</li><li>强制类型转换、隐式类型转换分别是什么，列举场景说明。​</li><li>创建函数的几种方式？ ​</li><li>javascript 创建对象的几种方式？ ​</li><li>列举宿主对象、内置对象、原生对象并说明其定义。​</li><li>&#x3D;&#x3D;&#x3D; 和 &#x3D;&#x3D;的区别？​</li><li>null，undefined 的区别​</li><li>什么情况下会返回 undefined 值？​</li><li>如何区分数组和对象？​</li><li>多维数组如何降维？​</li><li>怎么获取当前日期（年-月-日 时:分:秒）？​</li><li>什么是类数组（伪数组），如何将其转化为真实的数组？​</li><li>如何遍历对象的属性？​</li><li>如何给一个按钮绑定两个 onclick 事件？​</li><li>变量提升是什么？与函数提升的区别？​</li><li>什么是作用域链？如何延长？​</li><li>如何实现数组的随机排序？​</li><li>dom 节点的 Attribute 和 Property 有何区别？​</li><li>dom 结构操作怎样添加、移除、移动、复制、创建和查找节点？​</li><li>什么是事件冒泡，它是如何工作的？如何阻止事件冒泡？​</li><li>什么是事件捕获，它是如何工作的？​</li><li>如何让事件先冒泡后捕获？​</li><li>JavaScript 动画和 CSS3 动画有什么区别？ ​</li><li>dom 的事件模型​</li><li>事件三要素是什么？​</li><li>获取元素位置？​</li><li>如何绑定事件，如何解除事件？​</li><li>对事件委托的理解​</li><li>setTimeout 和 setInterval 的区别及用法是什么？​</li><li>用 setTimeout 来实现 setInterval​</li><li>document.write 和 innerHTML 的区别？​</li><li>元素拖动如何实现，原理是怎样？​</li><li>什么是重绘(repaint)？什么是回流(reflow)？如何最小化重绘和回流？​</li><li>延迟加载的方式有哪些？​</li><li>垃圾回收机制有哪些？具体怎么如何执行？​</li><li>什么是内存泄漏 ？​</li><li>数组遍历的方法有哪些，分别有什么特点，性能如何 ？​</li><li>ES5 和 ES6 的区别，ES6 新增了什么？​</li><li>ES6 的继承和 ES5 的继承有什么区别？​</li><li>var、let、const 之间的区别？暂时性死区如何理解？​</li><li>Class、extends 是什么，有什么作用？​</li><li>什么是 JS 闭包​</li><li>说一下类的创建和继承，列举一下你所知道的继承方式​</li><li>如何解决异步回调地狱​</li><li>说一下图片的懒加载和预加载​</li><li>mouseover 和 mouseenter 的区别​</li><li>new 操作符做了哪些事情​</li><li>改变函数内部 this 指针的指向函数（bind，apply，call 的区别），内在分别是如何实现的？​</li><li>JS 的各种位置，比如 clientHeight, scrollHeight, offsetHeight ,以及 scrollTop, offsetTop, clientTop * 的区别？​</li><li>异步加载 JS 的方法​</li><li>Ajax 解决浏览器缓存问题​</li><li>节流和防抖​</li><li>eval 是做什么的​</li><li>对象深拷贝的简单实现​</li><li>实现 JS 中所有对象的深度克隆（包装对象，Date 对象，正则对象）​</li><li>实现一个 once 函数，传入函数参数只执行一次​</li><li>将原生的 ajax 封装成 promise​</li><li>JS 监听对象属性的改变​</li><li>如何实现一个私有变量，用 get 可以访问，不能直接访问​</li><li>怎么控制一次加载一张图片，加载完后再加载下一张​</li><li>如何实现 sleep 的效果（es5 或者 es6）​</li><li>Function.<em>proto</em>(getPrototypeOf)是什么？​</li><li>箭头函数中 this 指向​</li><li>数组常用方法有哪些​</li><li>数组去重有哪些方法？​</li><li>如何去除字符串首尾空格​</li><li>说说你所知道的 JS 语言特性？​</li><li>如何判断一个数组？​</li><li>JS 的全排列​</li><li>谈谈你所理解的跨域，为什么会有这个问题？如何解决？​</li><li>null &#x3D;&#x3D; undefined 输出什么？null &#x3D;&#x3D;&#x3D; undefined 呢？​</li><li>什么是按需加载​</li><li>简单介绍一下 symbol​</li><li>介绍一下 promise，及其底层如何实现​</li><li>JS 原型链，原型链的顶端是什么？Object 的原型是什么？Object 的原型的原型是什么？​</li><li>promise+Generator+Async 的使用​</li><li>JS 中 string 的 startwith 和 indexof 两种方法的区别​</li><li>JS 字符串转数字的方法​</li><li>平时是怎么调试 JS 的​</li><li>怎么获得对象上的属性​</li><li>async 和 await 具体该怎么用？​</li><li>知道哪些 ES6，ES7 的语法 ​</li><li>promise 和 await&#x2F;async 的关系​</li><li>JS 加载过程阻塞，解决方法。​</li><li>JS 对象类型，基本对象类型以及引用对象类型的区别​</li><li>轮播的实现原理？假如一个页面上有两个轮播，你会怎么实现？</li><li>解释一下 JS 的事件循​</li><li>Localstorage、sessionStorage、cookie 的区别​</li><li>解释一下 HTML5 Drag API​</li><li>解释一下 webworker ​</li><li>{} 和 [] 的 valueOf 和 toString 的结果是什么？​</li><li>三种事件模型是什么？​</li><li>介绍一下 V8 隐藏类​</li><li>AMD 和 CMD 规范的区别？说一下 CommonJS、AMD 和 CMD？​</li><li>谈谈 JS 的运行机制​</li></ul><h1 id="Vue生态"><a href="#Vue生态" class="headerlink" title="Vue生态"></a>Vue生态</h1><ul><li>说说你对 Vue 的理解，有何优缺点？​</li><li>Vue 和 React 有什么不同？​</li><li>什么是虚拟 DOM？​</li><li>描述下 vue 的生命周期有哪些？分别做了什么事情？​</li><li>watch 怎么深度监听对象变化​</li><li>删除数组用 delete 和 Vue.delete 有什么区别？​</li><li>watch 和 computed 有什么区别？​</li><li>v-for 没有 key 会发生什么问题？​</li><li>谈谈 Vue 双向绑定原理​</li><li>v-model 是什么？有什么用呢？​</li><li>在 vue 项目中如何引入第三方库？有哪些具体操作方法？​</li><li>Vue3.0 里为什么要用 Proxy API 替代 defineProperty API？​</li><li>Vue3.0 编译做了哪些优化？​</li><li>Vue3.0 新特性 —— Composition API 与 React.js 中 Hooks 的异同点​</li><li>Vue3.0 是如何变得更快的？dom diff 算法有何优化？​</li><li>vue 要做权限管理该怎么做？如果控制到按钮级别的权限怎么做？​</li><li>vue 在 created 和 mounted 这两个生命周期中请求数据有什么区别呢？​</li><li>说说你对 Proxy 的理解。​</li><li>Vue3.0性能提升主要是体现在哪些方面？​</li><li>vue3有哪些新的组件？​</li><li>Vue2.0 和 Vue3.0 有什么区别？​</li><li>Composition Api 与 Options Api 有什么不同？​</li><li>对Vue项目你做过哪些性能优化？​</li><li>Vue组件通信的方式有哪些？​</li><li>Vue常用的修饰符有哪些？​</li><li>Vue中的$nextTick有什么作用？底层如何实现？​</li><li>v-show和v-if有什么区别？​</li><li>有用过keep-alive吗？它有什么作用？​</li><li>如何实现一个虚拟DOM吗？​</li><li>为什么data属性是一个函数而不是一个对象，具体原因是什么？​</li><li>Vue2的初始化过程你有过了解吗，做了哪些事情？​</li><li>Vue3初始化的一个大概流程？​</li><li>vue3响应式api如何编写？​</li><li>在Vue项目中你是如何做的SSR渲染？​</li></ul><h1 id="计算机网络​"><a href="#计算机网络​" class="headerlink" title="计算机网络​"></a>计算机网络​</h1><ul><li>什么是 Ajax，Ajax 都有哪些优点和缺点？​</li><li>请介绍一下 XMLHTTPrequest 对象及常用方法和属性​</li><li>Ajax 的实现流程是怎样的？​</li><li>Ajax 接收到的数据类型有哪些，数据如何处理？​</li><li>封装好的 Ajax 里的常见参数及其代表的含义 ​</li><li>Ajax 注意事项及适用和不适用场景​</li><li>常见的 HTTP 状态码以及代表的意义​</li><li>301 302 303 状态码的区别？​</li><li>什么是同源策略​</li><li>为什么会有跨域的问题出现，如何解决跨域问题​</li><li>Get 和 Post 的区别以及使用场景​</li><li>解释 jsonp 的原理​</li><li>HTTP 与 HTTPS 的区别 ​</li><li>简述 web 前端 Cookie 机制，并结合该机制说明会话保持原理​</li><li>你知道的 HTTP 请求方式有几种​</li><li>谈谈你理解的 RESTFUL  规范​</li><li>解释一下三次握手是什么，具体流程。变为二次握手会发生什么问题？​</li><li>TCP 和 UDP  分别是什么？​</li><li>WebSocket 的实现和应用。​</li><li>一个图片 url 访问后直接下载怎样实现？       ​</li><li>说一下 http2.0 ​</li><li>补充 400 和 401、403 状态码       ​</li><li>fetch发送2次请求的原因       ​</li><li>对 HTML 语义化标签的理解       ​</li><li>Cookie 和 session 的区别    ​</li><li>强缓存 和 协商缓存  区别？什么时候用哪个 ？本质是？​</li><li>cache-control 的值有哪些       ​</li><li>谈谈 304 状态码      ​</li><li>什么是 CDN，以及如何优化？​</li><li>DNS是什么​</li><li>什么是四层、七层网络模型？​<br>​</li></ul><h1 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h1><ul><li>什么是 xss 攻击及如何防范    ​</li><li>什么是 ddox 攻击及如何防范？​</li><li>什么是 csrf 攻击及如何防范？​<br>​</li></ul><h1 id="前端工程化​"><a href="#前端工程化​" class="headerlink" title="前端工程化​"></a>前端工程化​</h1><ul><li>如何理解前端模块化、前端组件化，二者有何区别？​</li><li>如何理解前后端分离？​</li><li>webpack​</li><li>有自己配置过 webpack 吗？如果需求是多页面与单页面并行，需要如何配置？​</li><li>Webpack 的优点是什么？​</li><li>Webpack 的构建流程是什么?从读取配置到输出文件这个过程尽量说全​</li><li>说一下 Webpack 的热更新原理​</li><li>有哪些常见的 Loader？他们是解决什么问题的？​</li><li>Loader 和 Plugin 的不同？​</li><li>如何利用 Webpack 来优化前端性能​</li><li>是否写过 Loader 和 Plugin？描述一下编写 loader 或 plugin 的思路？​</li><li>使用 Webpack 开发时，你用过哪些可以提高效率的插件？​</li><li>什么是长缓存？在 Webpack 中如何做到长缓存优化？​</li><li>如何提高 Webpack 的构建速度？​</li><li>怎么实现 Webpack 的按需加载？什么是神奇注释？​</li><li>Babel 的原理是什么? ​</li><li>如何写一个 babel 插件？​</li><li>rebase 与 merge 的区别？​</li><li>git reset、git revert 和 git checkout 有什么区别 ？​</li><li>webpack 和 vite 区别（模块化与流的区别）​</li><li>webpack文件指纹策略：hash chunkhash contenthash​<br>​</li></ul><h1 id="性能优化​"><a href="#性能优化​" class="headerlink" title="性能优化​"></a>性能优化​</h1><ul><li>做过哪些前端性能优化相关的事情？​</li><li>要加载大量图片，你有哪些方法优化方案？​</li><li>列表无限滚动，数据越来越多，页面卡顿，如何解决？ ​</li><li>for（let i&#x3D;0;i&lt;1000000;i++）{console.log(i)} 如何优化？​</li><li>谈谈你是如何判断网站的性能的？​</li><li>解释一下，性能指标 FP FCP FMP，如何查看 。​</li><li>谈谈浏览器的渲染过程，DOM 树和渲染树的区别。​</li><li>一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么。​</li><li>什么是SPA单页面应用，首屏加载你是如何优化的</li></ul><h1 id="移动-web-开发​"><a href="#移动-web-开发​" class="headerlink" title="移动 web 开发​"></a>移动 web 开发​</h1><ul><li>知道 PWA 吗​</li><li>移动布局方案​</li><li>Rem 布局及其优缺点​</li><li>讲讲 viewport 和移动端布局       ​</li><li>移动端适配 1px 的问题​</li><li>移动端性能优化相关经验​</li><li>移动端兼容性​</li><li>小程序​</li><li>2X 图 3X 图适配​</li><li>图片在安卓上，有些设备模糊问题​</li><li>固定定位布局键盘挡住输入框内容​</li><li>click 的 300ms 延迟问题和点击穿透问题​</li><li>防止手机中页面放大和缩小​</li><li>px、em、rem、%、vw、vh、vm 这些单位的区别​</li><li>移动端适配- dpr 浅析​</li><li>移动端扩展点击区域​</li><li>上下拉动滚动条时卡顿、慢​</li><li>长时间按住页面出现闪退​</li><li>webkit mask 兼容处理​</li><li>transiton 闪屏​<br>​</li></ul><h1 id="研发流程​"><a href="#研发流程​" class="headerlink" title="研发流程​"></a>研发流程​</h1><ul><li>技术设计​</li><li>设计文档需要涵盖哪些部分？​</li><li>代码规范​</li><li>谈谈 eslint​</li><li>谈谈 commit message 规范​</li><li>研发协同（Git）​</li><li>git 的基本使用方法​</li><li>git 工作流程​</li><li>需要合并别人代码进来 ​</li><li>需要切换分支​</li><li>我们如何使用 git 和开源的码云或 github 上面的远端仓库的项目进行工作呢​</li><li>git、github、gitlab 三者之间的联系以及区别​</li><li>github 和码云的区别​</li><li>提交时发生冲突，你能解释冲突是如何产生的吗？你是如何解决的​</li><li>如果本次提交误操作，如何撤销​</li><li>git 修改提交的历史信息​</li><li>如何删除 github 和 gitlab 上的文件夹​</li><li>如何查看分支提交的历史记录？查看某个文件的历史记录呢​</li><li>git 跟 svn 有什么区别​</li><li>我们在本地工程常会修改一些配置文件，这些文件不需要被提交，而我们又不想每次执行 git status 时都让这些文件显示出来，我们该如何操作？​</li><li>git fetch 和 git merge 和 git pull 的区别。​</li><li>如何把本地仓库的内容推向一个空的远程仓库​</li><li>测试​</li><li>单元测试如何做？​</li><li>如何解决联调依赖问题？​</li><li>提测阶段bug 和 线上bug 解决过程有和区别？​</li><li>发布上线​</li><li>流水线如何搭建​</li><li>对 Docker 理解​</li><li>pm2 与 docker 有何区别？​<br>​</li></ul><h1 id="Nodejs​"><a href="#Nodejs​" class="headerlink" title="Nodejs​"></a>Nodejs​</h1><ul><li>对 Node.js 有没有了解，它有什么特点，适合做什么业务​</li><li>Node 和 前端项目怎么解决跨域的​</li><li>Node 的优点是什么？缺点是什么​</li><li>commonJS 中的 require&#x2F;exports 和 ES6 中import&#x2F;export 的区别是什么​</li><li>简述同步和异步的区别，如何避免回调地狱，Node 的异步问题是如何解决的</li><li>dependencies 和 devDependencies 两者区别​</li><li>描述一下从接到 url 开始，到逻辑处理，到DB查询，到返回结果，整个过程是怎么处理的？​</li><li>谈谈你对 Koa 和 Express 的理解，二者的区别是？​</li><li>谈谈对 egg 和 nest.js 的理解，二者的区别是？​</li></ul>]]></content>
      
      
      <categories>
          
          <category> interview </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>URL Scheme（URL协议）</title>
      <link href="/2023/07/04/other/url-scheme/"/>
      <url>/2023/07/04/other/url-scheme/</url>
      
        <content type="html"><![CDATA[<p>在移动应用程序中，URL Scheme是一种用于在应用程序之间进行通信的机制。它允许一个应用程序通过特定的URL来打开另一个应用程序，并在打开后执行一些特定的操作。</p><h2 id="URL-Scheme的结构"><a href="#URL-Scheme的结构" class="headerlink" title="URL Scheme的结构"></a>URL Scheme的结构</h2><p>一个URL Scheme是一个以特定格式构建的URL。它通常由两部分组成：Scheme和Path。</p><ul><li>Scheme：Scheme是URL的开头部分，用于指定要打开的应用程序。它以字母开头，后面跟随着字母、数字和一些特殊字符，例如<code>myapp://</code>。</li><li>Path：Path是Scheme之后的部分，用于指定在目标应用程序中要执行的具体操作。它可以是一个命令、参数或其他标识符，例如<code>open?item=123</code>。</li></ul><h2 id="URL-Scheme的用途"><a href="#URL-Scheme的用途" class="headerlink" title="URL Scheme的用途"></a>URL Scheme的用途</h2><p>URL Scheme可以用于多种用途，包括但不限于以下几个方面：</p><ol><li>打开应用程序：通过URL Scheme，可以从一个应用程序打开另一个应用程序。例如，可以通过点击一个URL链接或在其他应用程序中点击一个按钮来打开目标应用程序。</li><li>传递参数：URL Scheme可以传递一些参数给目标应用程序，以便应用程序知道要执行的操作或显示的内容。例如，可以通过URL Scheme传递一个商品ID，以便在目标应用程序中显示该商品的详细信息。</li><li>执行特定操作：URL Scheme还可以用于执行一些特定的操作，例如发送电子邮件、拨打电话、分享内容等。通过在URL中指定特定的命令，目标应用程序可以根据命令执行相应的操作。</li></ol><h2 id="如何使用URL-Scheme"><a href="#如何使用URL-Scheme" class="headerlink" title="如何使用URL Scheme"></a>如何使用URL Scheme</h2><p>要在应用程序中使用URL Scheme，通常需要完成以下几个步骤：</p><ol><li>注册URL Scheme：目标应用程序需要在其配置文件或代码中注册自己的URL Scheme。这样，其他应用程序才能通过URL打开它。</li><li>构建URL：在发送URL请求时，需要构建一个合法的URL，包括Scheme和Path等必要的信息。</li><li>处理URL请求：目标应用程序需要处理接收到的URL请求，并根据URL中的信息执行相应的操作。</li></ol><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>以下是一个示例URL Scheme的URL：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myapp://open?item=123</span><br></pre></td></tr></table></figure><p>这个URL使用了名为<code>myapp</code>的Scheme，并传递了一个名为<code>item</code>的参数，值为<code>123</code>。目标应用程序可以解析这个URL，执行打开操作，并显示ID为<code>123</code>的商品详细信息。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 添加 ssh key</title>
      <link href="/2023/06/30/git/ssh-key/"/>
      <url>/2023/06/30/git/ssh-key/</url>
      
        <content type="html"><![CDATA[<h2 id="创建-SSH-Key"><a href="#创建-SSH-Key" class="headerlink" title="创建 SSH Key"></a>创建 SSH Key</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;tangxiaomiemail@gmail.com&quot;</span></span><br><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line"><span class="built_in">cat</span> id_rsa.pub</span><br></pre></td></tr></table></figure><p>如果一切顺利的话，可以在用户主目录里找到 .ssh 目录，里面有 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件，这两个就是 SSH Key 的秘钥对，id_rsa 是私钥，不能泄露出去，id_rsa.pub 是公钥，可以放心地告诉任何人.</p><h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;tangxiaomi&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;tangxiaomiemail@gmail.com&quot;</span></span><br></pre></td></tr></table></figure><h2 id="非全局配置-删除-global"><a href="#非全局配置-删除-global" class="headerlink" title="非全局配置 删除 --global"></a>非全局配置 <code>删除 --global</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config  user.name <span class="string">&quot;tangxiaomi&quot;</span></span><br><span class="line">git config  user.email <span class="string">&quot;tangxiaomiemail@gmail.com&quot;</span></span><br></pre></td></tr></table></figure><h2 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a>查看配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name</span><br><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure><h2 id="取消全局配置"><a href="#取消全局配置" class="headerlink" title="取消全局配置"></a>取消全局配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> user.name</span><br><span class="line">git config --global --<span class="built_in">unset</span> user.email</span><br><span class="line"></span><br><span class="line">git config --global user.name    <span class="comment">#(查看)全局配置账户是否已经移除</span></span><br><span class="line">git config --global user.email   <span class="comment">#(查看)全局配置邮箱是否已经移除</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git submodule</title>
      <link href="/2023/06/30/git/submodule/"/>
      <url>/2023/06/30/git/submodule/</url>
      
        <content type="html"><![CDATA[<h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git submodule add -b [指定分支] [仓库地址] [路径]</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">git submodule add -b icarus https://github.com/im/hexo-theme.git themes/icarus</span><br></pre></td></tr></table></figure><p>命令执行完成，会在当前工程根路径下生成一个名为 <code>.gitmodules</code> 的文件，其中记录了子模块的信息。</p><h2 id="gitmodules"><a href="#gitmodules" class="headerlink" title=".gitmodules"></a>.gitmodules</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[submodule <span class="string">&quot;themes/icarus&quot;</span>]</span><br><span class="line">    path = themes/icarus</span><br><span class="line">    url = https://github.com/im/hexo-theme.git</span><br><span class="line">    branch = icarus</span><br></pre></td></tr></table></figure><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p><code>submodule</code> 的删除稍微麻烦点：首先，要在 <code>.gitmodules</code> 文件中删除相应配置信息。然后，执行 <code>git rm –cached</code> 命令将子模块所在的文件从 <code>git</code> 中删除。</p><h2 id="下载的工程带有-submodule"><a href="#下载的工程带有-submodule" class="headerlink" title="下载的工程带有 submodule"></a>下载的工程带有 submodule</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure><h2 id="查看-sumodule-状态"><a href="#查看-sumodule-状态" class="headerlink" title="查看 sumodule 状态"></a>查看 sumodule 状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule foreach git status</span><br></pre></td></tr></table></figure><h2 id="不能更新"><a href="#不能更新" class="headerlink" title="不能更新"></a>不能更新</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --remote</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3中的ref解构与响应式问题</title>
      <link href="/2023/06/29/vue/vue3-responsive-lose/"/>
      <url>/2023/06/29/vue/vue3-responsive-lose/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍-📝"><a href="#介绍-📝" class="headerlink" title="介绍 📝"></a>介绍 📝</h2><p>Vue 3是一种流行的JavaScript框架，它提供了一种声明式的方式来构建用户界面。在Vue 3中，我们可以使用<code>ref</code>函数来创建响应式数据。然而，当我们尝试对<code>ref</code>解构进行操作时，可能会遇到一些响应式问题。本文将探讨Vue 3中<code>ref</code>解构的使用、为什么会丢失响应式以及如何解决相关的问题。</p><h2 id="ref解构的使用-🧩"><a href="#ref解构的使用-🧩" class="headerlink" title="ref解构的使用 🧩"></a><code>ref</code>解构的使用 🧩</h2><p>在Vue 3中，我们可以使用<code>ref</code>函数创建一个响应式的数据对象。下面是一个简单的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">value</span>); <span class="comment">// 输出：0</span></span><br><span class="line"></span><br><span class="line">count.<span class="property">value</span>++; <span class="comment">// 修改数据</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">value</span>); <span class="comment">// 输出：1</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，我们使用<code>ref</code>函数创建了一个名为<code>count</code>的响应式数据对象。通过访问<code>count.value</code>属性，我们可以获取和修改数据的值。</p><p>然而，当我们尝试对<code>ref</code>解构进行操作时，可能会遇到一些问题。</p><h2 id="ref解构的响应式问题-🚫"><a href="#ref解构的响应式问题-🚫" class="headerlink" title="ref解构的响应式问题 🚫"></a><code>ref</code>解构的响应式问题 🚫</h2><p>当我们对<code>ref</code>解构进行操作时，Vue 3无法正确地跟踪和更新数据的变化。下面是一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; value &#125; = count;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 输出：0</span></span><br><span class="line"></span><br><span class="line">count.<span class="property">value</span>++; <span class="comment">// 修改数据</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 输出：0（未更新）</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，我们通过解构将<code>count</code>的值赋给<code>value</code>变量。然而，当我们修改<code>count</code>的值时，<code>value</code>并没有更新。</p><p>这是因为解构操作会将<code>count.value</code>的值复制给<code>value</code>，而不是创建一个引用。因此，<code>value</code>不再是一个响应式的数据对象，它无法与<code>count</code>保持同步。</p><h2 id="为什么会丢失响应式？-🤔"><a href="#为什么会丢失响应式？-🤔" class="headerlink" title="为什么会丢失响应式？ 🤔"></a>为什么会丢失响应式？ 🤔</h2><p>当我们对<code>ref</code>解构进行操作时，原因是解构操作会将响应式对象的引用丢失。Vue 3的响应式系统是基于Proxy实现的，它会拦截对响应式对象的访问和修改。然而，当我们对解构后的变量进行操作时，Vue 3无法捕获到这些操作，因此无法正确地跟踪和更新数据的变化。</p><h2 id="解决方案-🛠️"><a href="#解决方案-🛠️" class="headerlink" title="解决方案 🛠️"></a>解决方案 🛠️</h2><p>要解决<code>ref</code>解构的响应式问题，我们可以使用Vue 3提供的<code>toRef</code>函数。<code>toRef</code>函数可以将一个响应式对象的属性转换为一个单独的响应式引用。</p><p>下面是一个使用<code>toRef</code>函数的示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, toRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> value = <span class="title function_">toRef</span>(count, <span class="string">&#x27;value&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="property">value</span>); <span class="comment">// 输出：0</span></span><br><span class="line"></span><br><span class="line">count.<span class="property">value</span>++; <span class="comment">// 修改数据</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="property">value</span>); <span class="comment">// 输出：1（已更新）</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，我们使用<code>toRef</code>函数将<code>count.value</code>转换为一个新的响应式引用<code>value</code>。通过访问<code>value.value</code>属性，我们可以获取和修改数据的值。</p><p>使用<code>toRef</code>函数后，<code>value</code>将与<code>count</code>保持同步，可以正确地跟踪和更新数据的变化。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript泛型</title>
      <link href="/2023/06/28/typescript/generic/"/>
      <url>/2023/06/28/typescript/generic/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是泛型？"><a href="#什么是泛型？" class="headerlink" title="什么是泛型？"></a>什么是泛型？</h2><p>泛型是一种在编程语言中用于创建可重用代码的工具。它允许我们在定义函数、类或接口时延迟指定具体类型，而是在使用时动态地传入类型参数。</p><h2 id="泛型函数-📝"><a href="#泛型函数-📝" class="headerlink" title="泛型函数 📝"></a>泛型函数 📝</h2><p>在TypeScript中，我们可以使用泛型来创建可接受不同类型参数的函数。下面是一个简单的例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Hello, TypeScript! 🚀&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出：Hello, TypeScript! 🚀</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，我们定义了一个identity函数，它接受一个参数arg并返回该参数。使用<code>&lt;T&gt;</code>语法来指定泛型类型，并在函数体中使用该类型。</p><p>在调用函数时，我们可以明确指定泛型类型，也可以让TypeScript根据传入的参数自动推断出类型。</p><p><strong>常见场景：</strong> 泛型函数常用于处理各种类型的输入，并返回相同类型的输出。例如，数组的<code>map</code>和<code>filter</code>方法就是使用泛型函数来实现的。</p><h2 id="泛型类-🏢"><a href="#泛型类-🏢" class="headerlink" title="泛型类 🏢"></a>泛型类 🏢</h2><p>除了函数，我们还可以创建泛型类。泛型类允许我们在类的定义中使用泛型类型。下面是一个示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Container</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">value</span>: T;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value: T</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getValue</span>(): T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">value</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> container = <span class="keyword">new</span> <span class="title class_">Container</span>&lt;<span class="built_in">number</span>&gt;(<span class="number">42</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(container.<span class="title function_">getValue</span>()); <span class="comment">// 输出：42</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，我们定义了一个Container类，它接受一个泛型类型参数T，并在构造函数中接受一个参数value。通过泛型类型，我们可以在类中使用该类型，并在实例化时传入具体类型。</p><p><strong>常见场景：</strong> 泛型类常用于创建可重用的数据结构，例如栈、队列等。通过使用泛型类，我们可以在编写通用的数据结构时，不限制特定的数据类型。</p><h2 id="泛型约束-🚧"><a href="#泛型约束-🚧" class="headerlink" title="泛型约束 🚧"></a>泛型约束 🚧</h2><p>有时候，我们希望对泛型进行一些限制，以确保只能传入特定类型。这时可以使用泛型约束。下面是一个示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Lengthwise</span> &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> loggingIdentity&lt;T <span class="keyword">extends</span> <span class="title class_">Lengthwise</span>&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Length of arg: &quot;</span> + arg.<span class="property">length</span>);</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">loggingIdentity</span>(<span class="string">&quot;Hello 👋&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出：Hello 👋</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，我们定义了一个Lengthwise接口，它包含一个length属性。然后我们定义了一个loggingIdentity函数，它接受一个泛型参数T，并使用extends关键字对泛型进行约束，要求T必须实现Lengthwise接口。这样我们就可以在函数体中访问arg的length属性。</p><p><strong>常见场景：</strong> 泛型约束常用于对泛型类型进行更精确的类型限制，以确保传入的参数具有特定的属性或方法。</p><h2 id="泛型与工具类型的结合-🛠️"><a href="#泛型与工具类型的结合-🛠️" class="headerlink" title="泛型与工具类型的结合 🛠️"></a>泛型与工具类型的结合 🛠️</h2><p>TypeScript提供了一些内置的工具类型（Utility Types），可以与泛型一起使用，以进一步增强泛型的能力。</p><p><strong>常见工具类型：</strong></p><ul><li><code>Partial&lt;T&gt;</code>：将类型T的所有属性设为可选。</li><li><code>Readonly&lt;T&gt;</code>：将类型T的所有属性设为只读。</li><li><code>Pick&lt;T, K&gt;</code>：从类型T中选择指定的属性K。</li><li><code>Omit&lt;T, K&gt;</code>：从类型T中排除指定的属性K。</li><li><code>Record&lt;K, T&gt;</code>：创建一个具有指定类型T的属性K的对象。</li><li><code>Exclude&lt;T, U&gt;</code>：从类型T中排除可以赋值给类型U的类型。</li><li><code>Extract&lt;T, U&gt;</code>：从类型T中提取可以赋值给类型U的类型。</li><li><code>NonNullable&lt;T&gt;</code>：从类型T中排除null和undefined。</li></ul><p>这些工具类型可以与泛型一起使用，以便更灵活地处理类型。</p><p><strong>常见场景：</strong> 泛型与工具类型的结合常用于处理复杂的类型转换、属性选择和排除等操作。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HSTS 强制 https</title>
      <link href="/2023/06/07/http/hsts/"/>
      <url>/2023/06/07/http/hsts/</url>
      
        <content type="html"><![CDATA[<p><code>HSTS (HTTP Strict Transport Security)</code> 是一种安全策略，用于强制浏览器使用 HTTPS 进行安全连接，防止恶意攻击者使用中间人攻击 (Man-in-the-middle攻击) 窃取用户数据。</p><h2 id="🛡️-HSTS-的工作原理"><a href="#🛡️-HSTS-的工作原理" class="headerlink" title="🛡️ HSTS 的工作原理"></a>🛡️ HSTS 的工作原理</h2><p>HSTS 通过在 HTTPS 响应头中添加 <code>Strict-Transport-Security</code> 参数来实现。当用户第一次访问一个网站时，服务器返回的响应头中包含了 <code>Strict-Transport-Security</code> 参数，浏览器会记住该网站的 HSTS 头，之后再次访问该网站时，浏览器就会自动强制使用 HTTPS 进行连接，而不再允许使用 HTTP 协议进行访问。</p><h2 id="🔑-HSTS-的作用"><a href="#🔑-HSTS-的作用" class="headerlink" title="🔑 HSTS 的作用"></a>🔑 HSTS 的作用</h2><p>使用 HSTS 可以提供以下的安全保障：</p><ul><li>防止中间人攻击：通过强制使用 HTTPS，HSTS 可以防止攻击者在用户和服务器之间插入恶意的中间人攻击，在传输过程中窃取用户的敏感信息。</li><li>安全可靠：HSTS 可以确保通过 HTTPS 连接的安全性和效率，从而更好地保护用户的隐私和安全。</li><li>提高搜索引擎排名：使用 HTTPS 进行加密的网站可以获得更高的搜索引擎排名，并提高用户的信任度和转化率。</li><li>提高网站性能：使用 HTTPS 加密通信可以降低网络拥塞和提高网站的性能。</li></ul><h2 id="⚙️-如何设置-HSTS"><a href="#⚙️-如何设置-HSTS" class="headerlink" title="⚙️ 如何设置 HSTS"></a>⚙️ 如何设置 HSTS</h2><p>要在网站中启用 HSTS，您需要在 HTTPS 响应头中添加一个 HSTS headers。您可以在 Web 服务器或应用程序中实现此功能，以下是一些具体步骤：</p><h3 id="Apache-服务器"><a href="#Apache-服务器" class="headerlink" title="Apache 服务器"></a>Apache 服务器</h3><p>在 Apache 中，您可以通过编辑您的网站的 .htaccess 文件或 Apache 配置文件来添加 HSTS headers。编辑您的 .htaccess 文件，添加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Header set Strict-Transport-Security &quot;max-age=63072000; includeSubDomains; preload&quot;</span><br></pre></td></tr></table></figure><p>或者您可以编辑上面配置文件中的 VirtualHost 来全局设置 HSTS headers ，在 VirtualHost 中添加以下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerName www.example.com</span><br><span class="line">    Redirect permanent / https://www.example.com/</span><br><span class="line">    Header set Strict-Transport-Security &quot;max-age=63072000; includeSubDomains; preload&quot;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><p>这将把所有请求重定向到 HTTPS 并将 HSTS headers 添加到响应头中。</p><h3 id="Nginx-服务器"><a href="#Nginx-服务器" class="headerlink" title="Nginx 服务器"></a>Nginx 服务器</h3><p>在 Nginx 中，编辑 Nginx 配置文件中与您的网站相关的配置。使用 <code>add_header</code> 命令添加 HSTS headers：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.example.com;</span><br><span class="line">    return 301 https://$server_name$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl http2;</span><br><span class="line">    server_name www.example.com;</span><br><span class="line">    add_header Strict-Transport-Security &quot;max-age=63072000; includeSubDomains; preload;&quot;;</span><br><span class="line">    # other ssl settings</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IIS-服务器"><a href="#IIS-服务器" class="headerlink" title="IIS 服务器"></a>IIS 服务器</h3><p>在 IIS 中，您可以通过编辑您的网站的 web.config 文件来添加 HSTS headers。编辑 web.config 文件，添加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;system.webServer&gt;</span><br><span class="line">  &lt;httpProtocol&gt;</span><br><span class="line">    &lt;customHeaders&gt;</span><br><span class="line">      &lt;add name=&quot;Strict-Transport-Security&quot; value=&quot;max-age=63072000; includeSubDomains; preload&quot; /&gt;</span><br><span class="line">    &lt;/customHeaders&gt;</span><br><span class="line">  &lt;/httpProtocol&gt;</span><br><span class="line">&lt;/system.webServer&gt;</span><br></pre></td></tr></table></figure><p>添加 HSTS headers 之后，访问您的网站时，浏览器将会自动强制使用 HTTPS 进行连接，并且有效期 <code>max-age</code> 将在访问期间被记住，直到过期或 HSTS headers 被删除。</p><p>在实现 HSTS 的时候，最好先使用小的 <code>max-age</code> 值进行测试，以确保一切正常工作，之后再设定长期的值。另外，请注意不要在生产环境之前添加 HSTS 的预加载指令 <code>preload</code>。该指令会将网站加入到浏览器的 HSTS 预加载列表中，必须遵守极其严格的要求和审核才能添加，预加载一旦结束就无法回退。</p><h2 id="🚨-HSTS-的注意事项"><a href="#🚨-HSTS-的注意事项" class="headerlink" title="🚨 HSTS 的注意事项"></a>🚨 HSTS 的注意事项</h2><ul><li>HSTS 只能保证浏览器和网站之间的通信是安全的，但无法防止其他形式的攻击。</li><li>如果网站使用了 HSTS，在浏览器上访问该网站时，会自动强制使用 HTTPS，请确保网站已正确配置 SSL 证书，否则用户无法访问该网站。</li><li>HSTS 不适用于不支持 HTTPS 加密通信的浏览器或旧版浏览器。</li></ul><h2 id="💡-总结"><a href="#💡-总结" class="headerlink" title="💡 总结"></a>💡 总结</h2><p>HSTS 是一种用于强制浏览器使用 HTTPS 进行安全连接的安全策略，它可以有效地保护用户的隐私和安全，并提高网站的搜索引擎排名和性能。使用 HSTS 需要注意一些细节问题，但只要正确地实现和配置，可以轻松地提供更可靠和安全的服务。</p>]]></content>
      
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Picsum 图片链接</title>
      <link href="/2023/06/06/other/picsum/"/>
      <url>/2023/06/06/other/picsum/</url>
      
        <content type="html"><![CDATA[<p><a href="https://picsum.photos/">https://picsum.photos/</a></p><h2 id="输入图片大小"><a href="#输入图片大小" class="headerlink" title="输入图片大小"></a>输入图片大小</h2><p>Picsum默认的图片大小为<code>1080*720</code>。如果你要生成其他尺寸的图片，只需在网址后面添加图片尺寸即可。比如：</p><ul><li><a href="https://picsum.photos/200/300">https://picsum.photos/200/300</a></li><li><a href="https://picsum.photos/300/300">https://picsum.photos/300/300</a></li><li><a href="https://picsum.photos/500/500">https://picsum.photos/500/500</a></li></ul><p><img src="https://picsum.photos/1080/500"></p><h2 id="添加图片样式"><a href="#添加图片样式" class="headerlink" title="添加图片样式"></a>添加图片样式</h2><ul><li><code>https://picsum.photos/200/300/?grayscale</code>：生成灰度图片。<br><img src="https://picsum.photos/1080/500/?grayscale"></li><li><code>https://picsum.photos/200/300/?blur=2</code>：使图片模糊，数字值越高表示图片越模糊。</li><li><code>https://picsum.photos/200/300/?random</code>：生成随机的背景色。</li><li><code>https://picsum.photos/200/300/?blur=2&amp;grayscale</code>：图片模糊且灰度化。</li><li><code>https://picsum.photos/200/300/?gravity=center</code>：将图片放置在中心位置。</li><li><code>https://picsum.photos/id/237/200/300.jpg</code>：生成具有特定id的图片，比如237。</li><li><code>https://picsum.photos/200/300?cache-control</code>：让浏览器通过Cache-Control头缓存响应。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> images </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unsplash 图片链接</title>
      <link href="/2023/06/01/other/unsplash/"/>
      <url>/2023/06/01/other/unsplash/</url>
      
        <content type="html"><![CDATA[<h3 id="随机图片链接"><a href="#随机图片链接" class="headerlink" title="随机图片链接"></a>随机图片链接</h3><p>如果你需要一张随机的图片来让内容更加生动、有趣，只需要在 Unsplash 的基础图片链接后面加上“&#x2F;random&#x2F;”即可。例如以下链接将返回一个宽度为 640 像素、高度为 480 像素的随机图片：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://source.unsplash.com/random/640x480</span><br></pre></td></tr></table></figure><p><img src="https://source.unsplash.com/random/640x480?landscape,mountain"></p><p>如果需要过滤主题，只需在链接末尾加上标签即可，例如以下链接将会返回一个范围包括 <code>mountain</code> 和 <code>landscape</code> 的随机图片：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://source.unsplash.com/random/640x480?landscape,mountain</span><br></pre></td></tr></table></figure><h3 id="固定图片链接"><a href="#固定图片链接" class="headerlink" title="固定图片链接"></a>固定图片链接</h3><p>如果你需要一张特定的图片，只需使用 Unsplash 图片的 ID，拼接图片链接即可。例如以下链接将会返回 ID 为 “hgytITrCiec” 的 Unsplash 图片，并且将图片宽度设置为 640 像素，高度设置为 480 像素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://source.unsplash.com/hgytITrCiec/640x480</span><br></pre></td></tr></table></figure><h3 id="在-Markdown-中使用-Unsplash-图片链接"><a href="#在-Markdown-中使用-Unsplash-图片链接" class="headerlink" title="在 Markdown 中使用 Unsplash 图片链接"></a>在 Markdown 中使用 Unsplash 图片链接</h3><p>在 Markdown 编辑器中，你可以使用以下语法插入 Unsplash 图片链接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片描述](图片链接)</span><br></pre></td></tr></table></figure><p>例如，在你的文章中插入一张宽度为 640 像素、高度为 480 像素的随机图片，可以使用以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![随机图片](https://source.unsplash.com/random/640x480)</span><br></pre></td></tr></table></figure><p>如果你想要插入一张特定的图片，可以使用 ID 和固定图片链接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![特定图片](https://source.unsplash.com/hgytITrCiec/640x480)</span><br></pre></td></tr></table></figure><p>以上就是如何使用 Unsplash 图片链接的简单介绍。希望这篇文章对你有帮助！</p>]]></content>
      
      
      
        <tags>
            
            <tag> images </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>husky</title>
      <link href="/2023/05/30/git/husky/"/>
      <url>/2023/05/30/git/husky/</url>
      
        <content type="html"><![CDATA[<ol><li>安装 Husky</li></ol><p>使用 npm 进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install husky --save-dev</span><br></pre></td></tr></table></figure><ol start="2"><li>配置 Git 钩子</li></ol><p>在 package.json 文件中添加 “husky” 配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;husky&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hooks&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pre-commit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run lint&quot;</span><span class="punctuation">,</span> <span class="comment">// 在执行 git commit 命令时，会执行 npm run lint 命令</span></span><br><span class="line">    <span class="attr">&quot;pre-push&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run test&quot;</span> <span class="comment">// 在执行 git push 命令时，会执行 npm run test 命令</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>配置 pre-commit 钩子</li></ol><p>在 package.json 文件中添加 “scripts” 属性：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint .&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这里的 “lint” 命令使用 ESlint 对整个项目进行代码风格检查。</p><ol start="4"><li>配置 pre-push 钩子</li></ol><p>在 package.json 文件中添加另一个 “scripts” 属性：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这里的 “test” 命令使用 Jest 对整个项目进行测试。</p><ol start="5"><li>完成</li></ol><p>现在，当您在项目中运行 git commit 或 git push 命令时，Husky 将自动执行 lint 和 test 命令。如果命令返回任何错误，Husky 将阻止您的提交或推送。</p><p>您可以使用 Husky 的其他功能来执行其他任务，例如在 commit 或 push 之前自动发布代码，或在代码风格测试失败时发送电子邮件等。</p><p>更多详细的配置信息请查看 Husky 的官方文档: <a href="https://github.com/typicode/husky">https://github.com/typicode/husky</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 将远程分支拉到本地</title>
      <link href="/2023/05/29/git/remote-branch/"/>
      <url>/2023/05/29/git/remote-branch/</url>
      
        <content type="html"><![CDATA[<p>可以使用以下命令将远程分支拉到本地：</p><ol><li>首先，使用 <code>git remote</code> 命令查看已经添加的远程仓库：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure><ol start="2"><li>然后，使用 <code>git fetch</code> 命令将远程分支拉取到本地仓库（不会进行合并）：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin remote_branch</span><br></pre></td></tr></table></figure><ol start="3"><li>最后，使用 <code>git checkout</code> 命令将远程分支切换到本地分支：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout local_branch</span><br></pre></td></tr></table></figure><ol start="4"><li>组合命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin remote_branch:local_branch</span><br></pre></td></tr></table></figure><p>其中，<code>remote_branch</code> 为远程分支名称，<code>origin</code> 为远程仓库名称，<code>local_branch</code> 为本地分支名称，可以根据实际情况进行替换。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用VSCode配置ESLint自动保存校验</title>
      <link href="/2023/05/29/vscode/eslint/"/>
      <url>/2023/05/29/vscode/eslint/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>ESLint是一个开源的 JavaScript 代码检查工具，可以帮助我们发现代码中存在的错误和潜在问题，并给出推荐的修复方案，从而提高代码的质量和可读性。</p><p>本文将要介绍如何在VSCode中配置ESLint，实现自动保存校验功能，让我们的代码更加健康。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="第一步：安装ESLint插件"><a href="#第一步：安装ESLint插件" class="headerlink" title="第一步：安装ESLint插件"></a>第一步：安装ESLint插件</h3><p>如果没有安装ESLint插件的话，我们需要先到VSCode插件商店中安装ESLint插件，安装过程非常简单，只需要在搜索框中输入“ESLint”即可。</p><h3 id="第二步：安装ESLint模块"><a href="#第二步：安装ESLint模块" class="headerlink" title="第二步：安装ESLint模块"></a>第二步：安装ESLint模块</h3><p>在项目中安装ESLint模块依赖，可以使用npm或yarn，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint --save-dev</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add eslint --dev</span><br></pre></td></tr></table></figure><h3 id="第三步：创建ESLint配置文件"><a href="#第三步：创建ESLint配置文件" class="headerlink" title="第三步：创建ESLint配置文件"></a>第三步：创建ESLint配置文件</h3><p>创建一个名为.eslintrc.json的文件，用来存放ESLint配置信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;extends&quot;: &quot;eslint:recommended&quot;,</span><br><span class="line">   &quot;rules&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用了eslint:recommended作为配置的扩展，这些规则是由ESLint核心团队定义的一组推荐的规则。当然你也可以自定义一些规则，具体可参考官方文档。</p><h3 id="第四步：配置VSCode"><a href="#第四步：配置VSCode" class="headerlink" title="第四步：配置VSCode"></a>第四步：配置VSCode</h3><p>我们需要在VSCode的配置文件中，添加以下内容实现自动保存校验。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;editor.codeActionsOnSave&quot;: &#123;</span><br><span class="line">     &quot;source.fixAll.eslint&quot;: true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;editor.formatOnSave&quot;: false,</span><br><span class="line">  &quot;eslint.alwaysShowStatus&quot;: true,</span><br><span class="line">  &quot;eslint.validate&quot;: [</span><br><span class="line">    &quot;javascript&quot;,</span><br><span class="line">    &quot;javascriptreact&quot;,</span><br><span class="line">    &#123; &quot;language&quot;: &quot;vue&quot;, &quot;autoFix&quot;: true &#125;,</span><br><span class="line">    &#123; &quot;language&quot;: &quot;html&quot;, &quot;autoFix&quot;: true &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里通过<code>&quot;editor.codeActionsOnSave&quot;</code>属性实现自动保存校验，当我们保存文件时，如果存在ESLint报错，VSCode会自动执行修复操作。</p><p>同时将<code>&quot;editor.formatOnSave&quot;</code>设置为<code>false</code>，表示不对存储时代码格式进行调整。</p><p>最后配置<code>&quot;eslint.validate&quot;</code>即可，这里我们对<code>&quot;javascript&quot;</code>和<code>&quot;javascriptreact&quot;</code>进行校验和自动修复，同时对Vue和HTML代码添加支持。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过这个简单的配置，我们可以让ESLint与VSCode紧密地结合在一起，实现在保存代码之前、常规编写过程中进行代码检查校验。这将使我们能够更快地发现并修复潜在的问题，从而提高代码的质量和可读性。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode 所有配置对照表</title>
      <link href="/2023/05/29/vscode/setting/"/>
      <url>/2023/05/29/vscode/setting/</url>
      
        <content type="html"><![CDATA[<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 在保存时自动格式化代码</span></span><br><span class="line">    <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 在按下“Commit”字符(如&quot;.&quot;或&quot;;&quot;)时接受建议</span></span><br><span class="line">    <span class="attr">&quot;editor.acceptSuggestionOnCommitCharacter&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 在按下“Enter”时接受建议</span></span><br><span class="line">    <span class="attr">&quot;editor.acceptSuggestionOnEnter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;on&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 自动启用辅助功能</span></span><br><span class="line">    <span class="attr">&quot;editor.accessibilitySupport&quot;</span><span class="punctuation">:</span> <span class="string">&quot;auto&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 启用背景颜色样式，在编辑器中显示错误和警告等</span></span><br><span class="line">    <span class="attr">&quot;editor.colorDecorators&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 光标闪烁类型(&quot;blink&quot;、&quot;smooth&quot; 或 &quot;phase&quot;)</span></span><br><span class="line">    <span class="attr">&quot;editor.cursorBlinking&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blink&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 开启平滑光标动画</span></span><br><span class="line">    <span class="attr">&quot;editor.cursorSmoothCaretAnimation&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 光标样式(&quot;block&quot;, &quot;line&quot; 或 &quot;underline&quot;)</span></span><br><span class="line">    <span class="attr">&quot;editor.cursorStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;line&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 高亮当前行周围的行数(Highlight current line plus n lines)</span></span><br><span class="line">    <span class="attr">&quot;editor.cursorSurroundingLines&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 光标宽度，0 表示使用默认值</span></span><br><span class="line">    <span class="attr">&quot;editor.cursorWidth&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 禁用字形图层提示</span></span><br><span class="line">    <span class="attr">&quot;editor.disableLayerHinting&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 禁用等宽字体的优化</span></span><br><span class="line">    <span class="attr">&quot;editor.disableMonospaceOptimizations&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 启用拖放支持</span></span><br><span class="line">    <span class="attr">&quot;editor.dragAndDrop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 在空文本中复制时复制当前行或上次选区内容</span></span><br><span class="line">    <span class="attr">&quot;editor.emptySelectionClipboard&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 额外的编辑器类名</span></span><br><span class="line">    <span class="attr">&quot;editor.extraEditorClassName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 编辑器字体</span></span><br><span class="line">    <span class="attr">&quot;editor.fontFamily&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#x27;Droid Sans Mono&#x27;, &#x27;monospace&#x27;, monospace, &#x27;Droid Sans Fallback&#x27;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 启用字体连字</span></span><br><span class="line">    <span class="attr">&quot;editor.fontLigatures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 编辑器字体大小</span></span><br><span class="line">    <span class="attr">&quot;editor.fontSize&quot;</span><span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 编辑器字体重量</span></span><br><span class="line">    <span class="attr">&quot;editor.fontWeight&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 粘贴时自动格式化代码</span></span><br><span class="line">    <span class="attr">&quot;editor.formatOnPaste&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 显示标尺栏</span></span><br><span class="line">    <span class="attr">&quot;editor.glyphMargin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 在悬停编辑器概述标尺时隐藏光标</span></span><br><span class="line">    <span class="attr">&quot;editor.hideCursorInOverviewRuler&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 在敲击代码时显示内联建议</span></span><br><span class="line">    <span class="attr">&quot;editor.inlineSuggest.enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 启用内部可访问支持</span></span><br><span class="line">    <span class="attr">&quot;editor.internalAccessibilitySupport&quot;</span><span class="punctuation">:</span> <span class="string">&quot;auto&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 启用大文件的优化</span></span><br><span class="line">    <span class="attr">&quot;editor.largeFileOptimizations&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 高亮匹配的括号</span></span><br><span class="line">    <span class="attr">&quot;editor.matchBrackets&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 启用小地图</span></span><br><span class="line">    <span class="attr">&quot;editor.minimap.enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 显示的小地图的最大列数</span></span><br><span class="line">    <span class="attr">&quot;editor.minimap.maxColumn&quot;</span><span class="punctuation">:</span> <span class="number">120</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 渲染小地图中的字符</span></span><br><span class="line">    <span class="attr">&quot;editor.minimap.renderCharacters&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 小地图与实际大小的比例</span></span><br><span class="line">    <span class="attr">&quot;editor.minimap.scale&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 小地图右侧的滑块何时显示(&quot;mouseover&quot;、&quot;always&quot; 或 &quot;never&quot;)</span></span><br><span class="line">    <span class="attr">&quot;editor.minimap.showSlider&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mouseover&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 小地图在哪个侧边栏显示(&quot;left&quot; 或 &quot;right&quot;)</span></span><br><span class="line">    <span class="attr">&quot;editor.minimap.side&quot;</span><span class="punctuation">:</span> <span class="string">&quot;right&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 启用鼠标滚轮缩放</span></span><br><span class="line">    <span class="attr">&quot;editor.mouseWheelZoom&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 多光标时将影响重叠的光标合并到单个光标中</span></span><br><span class="line">    <span class="attr">&quot;editor.multiCursorMergeOverlapping&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 启用多光标选择的修改键, 可选值包括 &quot;ctrlCmd&quot;、 &quot;alt&quot;、&quot;shift&quot; 和 &quot;meta&quot;</span></span><br><span class="line">    <span class="attr">&quot;editor.multiCursorModifier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;alt&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 鼠标移到函数名称上时是否显示参数提示</span></span><br><span class="line">    <span class="attr">&quot;editor.parameterHints&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 在敲击代码时显示语言支持的快速建议</span></span><br><span class="line">    <span class="attr">&quot;editor.quickSuggestions&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 快速建议的延迟时间（毫秒）</span></span><br><span class="line">    <span class="attr">&quot;editor.quickSuggestionsDelay&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 是否只读，禁止编辑</span></span><br><span class="line">    <span class="attr">&quot;editor.readOnly&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 渲染控制字符(CR/LF/Tab) 的显示方式</span></span><br><span class="line">    <span class="attr">&quot;editor.renderControlCharacters&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 渲染最后一个仅包含换行符的行</span></span><br><span class="line">    <span class="attr">&quot;editor.renderFinalNewline&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 渲染缩进参考线</span></span><br><span class="line">    <span class="attr">&quot;editor.renderIndentGuides&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 当前行高亮的样式(&quot;line&quot;, &quot;gutter&quot; 或者 &quot;none&quot;)</span></span><br><span class="line">    <span class="attr">&quot;editor.renderLineHighlight&quot;</span><span class="punctuation">:</span> <span class="string">&quot;line&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 控制空格和 Tab 的呈现方式</span></span><br><span class="line">    <span class="attr">&quot;editor.renderWhitespace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 滚动时突出光标</span></span><br><span class="line">    <span class="attr">&quot;editor.revealCursorOnScroll&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 启用默认的 Windows 平台的前向选择样式</span></span><br><span class="line">    <span class="attr">&quot;editor.roundedSelection&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 设置标尺的位置</span></span><br><span class="line">    <span class="attr">&quot;editor.rulers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 允许在行的末尾进行额外的滚动，将光标保持在最后一列之后</span></span><br><span class="line">    <span class="attr">&quot;editor.scrollBeyondLastColumn&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 允许在行的末尾进行额外的滚动，将光标保持在最后一行之后</span></span><br><span class="line">    <span class="attr">&quot;editor.scrollBeyondLastLine&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 允许在编辑器之间复制和粘贴选择</span></span><br><span class="line">    <span class="attr">&quot;editor.selectionClipboard&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 启用匹配选择项</span></span><br><span class="line">    <span class="attr">&quot;editor.selectionHighlight&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 显示废弃的语法提示</span></span><br><span class="line">    <span class="attr">&quot;editor.showDeprecated&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 前导行代码折叠控制的显示方式(&quot;mouseover&quot;、&quot;always&quot; 或 &quot;none&quot;)</span></span><br><span class="line">    <span class="attr">&quot;editor.showFoldingControls&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mouseover&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 高亮缩进，淡化其他内容</span></span><br><span class="line">    <span class="attr">&quot;editor.showIndentGuides&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 是否显示行号</span></span><br><span class="line">    <span class="attr">&quot;editor.showLineNumbers&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 当前行之前滚动的行数(仅在scrollbarHover才有用)</span></span><br><span class="line">    <span class="attr">&quot;editor.showPreviousLine&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 显示未使用的代码</span></span><br><span class="line">    <span class="attr">&quot;editor.showUnused&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 启用代码片段建议</span></span><br><span class="line">    <span class="attr">&quot;editor.snippetSuggestions&quot;</span><span class="punctuation">:</span> <span class="string">&quot;top&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 在触发字符后自动显示建议</span></span><br><span class="line">    <span class="attr">&quot;editor.suggestOnTriggerCharacters&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 控制如何预先选择建议</span></span><br><span class="line">    <span class="attr">&quot;editor.suggestSelection&quot;</span><span class="punctuation">:</span> <span class="string">&quot;recentlyUsed&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 控制如何使用 Tab 键来接受建议</span></span><br><span class="line">    <span class="attr">&quot;editor.tabCompletion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;on&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 缩进宽度</span></span><br><span class="line">    <span class="attr">&quot;editor.tabSize&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 在保存时将自动删除行末的空白</span></span><br><span class="line">    <span class="attr">&quot;editor.trimAutoWhitespace&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 智能选词分隔符</span></span><br><span class="line">    <span class="attr">&quot;editor.wordSeparators&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~!@#$%^&amp;*()-=+[&#123;]&#125;\\|;:&#x27;\&quot;,.&lt;&gt;/?&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 控制自动换行(&quot;off&quot;, &quot;on&quot; 或 &quot;wordWrapColumn&quot;)</span></span><br><span class="line">    <span class="attr">&quot;editor.wordWrap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 定义哪些字符可能会成为单独一行的断点</span></span><br><span class="line">    <span class="attr">&quot;editor.wordWrapBreakAfterCharacters&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\t&#125;)]?|&amp;,;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 定义哪些字符可能会成为单独一行</span></span><br><span class="line">    <span class="attr">&quot;editor.wordWrapBreakBeforeCharacters&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;([+&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 定义哪些字符可能会成为单独一行的断点之前以及之后(&quot;wordWrapBreakAfterCharacters&quot;和&quot;wordWrapBreakBeforeCharacters&quot;的结合使用)</span></span><br><span class="line">    <span class="attr">&quot;editor.wordWrapBreakObtrusiveCharacters&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 在wordWrap:&quot;wordWrapColumn&quot;模式下控制编辑器的自动换行</span></span><br><span class="line">    <span class="attr">&quot;editor.wordWrapColumn&quot;</span><span class="punctuation">:</span> <span class="number">80</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 在 minified 文件中启用自动换行</span></span><br><span class="line">    <span class="attr">&quot;editor.wordWrapMinified&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 在多行的第二行和之后缩进相对于第一行</span></span><br><span class="line">    <span class="attr">&quot;editor.wrappingIndent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;same&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 是否在首选项中启用折叠区域代码折叠</span></span><br><span class="line">    <span class="attr">&quot;editor.folding&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 在预览(鼠标悬停)中显示文档</span></span><br><span class="line">    <span class="attr">&quot;editor.hover.enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 在鼠标悬停时就显示预览信息，而不是等待300ms</span></span><br><span class="line">    <span class="attr">&quot;editor.hover.delay&quot;</span><span class="punctuation">:</span> <span class="number">300</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 键入时在符号或标签加亮</span></span><br><span class="line">    <span class="attr">&quot;editor.occurrencesHighlight&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 在重命名符号时更新所有引用</span></span><br><span class="line">    <span class="attr">&quot;editor.renameOnType&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 修改字体时放大或缩小编辑器</span></span><br><span class="line">    <span class="attr">&quot;editor.mouseWheelZoomDelta&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 滚动鼠标的灵敏度</span></span><br><span class="line">    <span class="attr">&quot;editor.mouseWheelScrollSensitivity&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 平滑滚动</span></span><br><span class="line">    <span class="attr">&quot;editor.mouseWheelSmoothScroll&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 显示诊断消息(错误、警告等)</span></span><br><span class="line">    <span class="attr">&quot;editor.showDiagnostics&quot;</span><span class="punctuation">:</span> <span class="string">&quot;warnings&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 显示代码折叠控件</span></span><br><span class="line">    <span class="attr">&quot;editor.showFoldingControlsAlways&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 高亮匹配括号的间距(以像素为单位)</span></span><br><span class="line">    <span class="attr">&quot;editor.matchBracketsSpace&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 控制当在一个断点处输入或删除字符时如何保持缩进</span></span><br><span class="line">    <span class="attr">&quot;editor.autoIndent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;advanced&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 描述按下 Tab 键时应插入的空白</span></span><br><span class="line">    <span class="attr">&quot;editor.useTabStops&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 保留换行符类型</span></span><br><span class="line">    <span class="attr">&quot;files.insertFinalNewline&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 在使用 tab 时，插入 N 个空格</span></span><br><span class="line">    <span class="attr">&quot;editor.tabSize&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 开启 Emmet 功能</span></span><br><span class="line">    <span class="attr">&quot;emmet.triggerExpansionOnTab&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 启用 emmet 的 auto-preview模式</span></span><br><span class="line">    <span class="attr">&quot;emmet.showAbbreviationSuggestions&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 在 HTML 中，为开始和结束标记自动插入一个新行</span></span><br><span class="line">    <span class="attr">&quot;emmet.html.format.indentation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;    &quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 在标记之间插入空格</span></span><br><span class="line">    <span class="attr">&quot;emmet.syntaxProfiles&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;javascript&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;attr_quotes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;single&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发入门教程</title>
      <link href="/2023/05/27/mini-program/getting-started/"/>
      <url>/2023/05/27/mini-program/getting-started/</url>
      
        <content type="html"><![CDATA[<h2 id="🚀-前言"><a href="#🚀-前言" class="headerlink" title="🚀 前言"></a>🚀 前言</h2><p>微信小程序是一种全新的应用模式，它可以在微信中直接运行，用户无需下载安装即可使用，具有开发简单、轻量级、低成本等优点，非常适合创业公司、个人开发者等快速开发原型或小型商业应用。</p><h2 id="🔧-准备工作"><a href="#🔧-准备工作" class="headerlink" title="🔧 准备工作"></a>🔧 准备工作</h2><h3 id="1-安装微信开发者工具"><a href="#1-安装微信开发者工具" class="headerlink" title="1. 安装微信开发者工具"></a>1. 安装微信开发者工具</h3><p>微信小程序开发需要使用微信官方提供的开发者工具，点击<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">这里</a>下载适用于您的操作系统的开发者工具。</p><h3 id="2-注册微信小程序账号"><a href="#2-注册微信小程序账号" class="headerlink" title="2. 注册微信小程序账号"></a>2. 注册微信小程序账号</h3><p>点击<a href="https://mp.weixin.qq.com/cgi-bin/registermidpage?action=index&lang=zh_CN">这里</a>，注册一个微信小程序账号。</p><h3 id="3-创建小程序"><a href="#3-创建小程序" class="headerlink" title="3. 创建小程序"></a>3. 创建小程序</h3><p>打开微信开发者工具，点击”新建小程序”按钮，按照提示填写小程序基本信息，即可创建一个最简单的小程序。</p><h2 id="🚀-开发第一个小程序"><a href="#🚀-开发第一个小程序" class="headerlink" title="🚀 开发第一个小程序"></a>🚀 开发第一个小程序</h2><h3 id="1-目录结构"><a href="#1-目录结构" class="headerlink" title="1. 目录结构"></a>1. 目录结构</h3><p>创建小程序后，微信开发者工具会自动生成一些模板文件，目录结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">myproject</span><br><span class="line">├── app.js</span><br><span class="line">├── app.json</span><br><span class="line">├── app.wxss</span><br><span class="line">└── pages</span><br><span class="line">    └── index</span><br><span class="line">        ├── index.js</span><br><span class="line">        ├── index.json</span><br><span class="line">        ├── index.wxml</span><br><span class="line">        └── index.wxss</span><br></pre></td></tr></table></figure><p>其中，<code>app.js</code>是小程序的脚本文件，<code>app.json</code>是小程序的配置文件，<code>app.wxss</code>是小程序的全局样式表。</p><p><code>pages</code>目录下是小程序的页面文件，每个页面文件都由4个文件组成：脚本文件（<code>.js</code>）、配置文件（<code>.json</code>）、模板文件（<code>.wxml</code>）和样式表文件（<code>.wxss</code>）。</p><h3 id="2-Hello-World"><a href="#2-Hello-World" class="headerlink" title="2. Hello World"></a>2. Hello World</h3><p>打开<code>index.wxml</code>，在其中输入以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打开<code>index.js</code>，在其中输入以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>应用这些变更后，点击微信开发者工具的”预览”按钮，可以在微信中查看效果。</p><h3 id="3-组件介绍"><a href="#3-组件介绍" class="headerlink" title="3. 组件介绍"></a>3. 组件介绍</h3><p>在示例代码中，我们使用了<code>&lt;text&gt;</code>标签，这是一种小程序内置的组件。在小程序中，所有显示内容都是由组件构成的，组件可以嵌套使用，从而构成丰富的页面布局。</p><p>下面简单介绍几个常用组件：</p><ul><li><code>&lt;view&gt;</code>：与HTML中的<code>&lt;div&gt;</code>类似，用于嵌套其它组件，可以设置样式或事件。</li><li><code>&lt;text&gt;</code>：用于显示文本，可以设置颜色、字体大小等。</li><li><code>&lt;button&gt;</code>：用于创建按钮，可以设置事件。</li><li><code>&lt;image&gt;</code>：用于显示图片，可以设置 src 属性。</li></ul><h3 id="4-数据绑定"><a href="#4-数据绑定" class="headerlink" title="4. 数据绑定"></a>4. 数据绑定</h3><p>在示例代码中，我们使用了<code>&#123;&#123;message&#125;&#125;</code>语法，将<code>message</code>变量的值绑定到<code>&lt;text&gt;</code>组件的内容中。</p><p>数据绑定是小程序中非常常用的功能。除了上述这种插值绑定，还可以在属性中使用绑定语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;&#123;&#123;className&#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">className</span>: <span class="string">&quot;red&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样的代码将给<code>&lt;view&gt;</code>组件的<code>class</code>属性动态赋值，从而实现样式切换等功能。</p><h3 id="5-事件处理"><a href="#5-事件处理" class="headerlink" title="5. 事件处理"></a>5. 事件处理</h3><p>小程序中的事件处理与普通的Web开发类似，也可以使用事件冒泡、事件委托等技术。</p><p>下面是一个示例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--index.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span>点击我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">onClick</span>: <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;按钮被点击了&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这段代码实现了一个简单的按钮点击事件，点击按钮后将在控制台输出信息。</p><h3 id="6-网络请求"><a href="#6-网络请求" class="headerlink" title="6. 网络请求"></a>6. 网络请求</h3><p>小程序具有完善的网络功能，可以使用<code>wx.request()</code>API发送HTTP请求，并处理返回的结果。</p><p>下面是一个简单的示例代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">  <span class="attr">onLoad</span>: <span class="keyword">function</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&quot;https://api.github.com/users/octocat&quot;</span>,</span><br><span class="line">      <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">fail</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求失败&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这段代码实现了一个简单的网络请求，使用GitHub API获取了用户<code>octocat</code>的信息，并在控制台输出了返回结果。</p><blockquote><p>如需深入学习相关内容，可以参考微信小程序官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/index.html">https://developers.weixin.qq.com/miniprogram/dev/index.html</a> 。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>原生应用 vs 快应用</title>
      <link href="/2023/05/27/mini-program/native-quick/"/>
      <url>/2023/05/27/mini-program/native-quick/</url>
      
        <content type="html"><![CDATA[<p>在当今移动应用市场，有两种主要的应用类型：原生应用和快应用。这两种应用之间存在一些显著的区别。让我们来看看原生应用和快应用在各方面的对比。</p><h2 id="开发难度-🔧"><a href="#开发难度-🔧" class="headerlink" title="开发难度 🔧"></a>开发难度 🔧</h2><p>原生应用需要开发人员掌握多种编程语言和工具，并具有丰富的开发经验和技能。相反，快应用使用了简单的HTML、CSS和JavaScript技术，所以对于新手和小型开发团队来说，它是一个更容易上手的选择。但是，要开发高质量的快应用并不容易。</p><h2 id="部署速度-⏱️"><a href="#部署速度-⏱️" class="headerlink" title="部署速度 ⏱️"></a>部署速度 ⏱️</h2><p>原生应用需要通过应用商店进行下载和安装，这需要用户等待和网络连接。而快应用是预安装在设备上的，无需用户下载和安装。这使得快应用在启动速度和用户体验方面更胜一筹。</p><h2 id="功能和性能-💻"><a href="#功能和性能-💻" class="headerlink" title="功能和性能 💻"></a>功能和性能 💻</h2><p>原生应用可以访问设备的所有功能和资源，并可以为用户提供更流畅的操作和更佳的性能。相比之下，快应用受到设备限制，例如有时快应用的界面和功能会受到限制，因此可能不像原生应用具有更高的性能。</p><h2 id="云服务-☁️"><a href="#云服务-☁️" class="headerlink" title="云服务 ☁️"></a>云服务 ☁️</h2><p>原生应用可以利用云服务来完善应用，例如储存和同步数据等。在快应用中，由于受到设备限制，对于涉及到大量数据的应用，需要通过第三方后端服务进行处理。</p><h2 id="应用分发-🌐"><a href="#应用分发-🌐" class="headerlink" title="应用分发 🌐"></a>应用分发 🌐</h2><p>在应用分发方面，原生应用可以通过多个应用商店和市场进行分发。而快应用是通过设备厂商的应用商店进行分发，因此要想快速推广和覆盖更多用户，开发团队需要和设备厂商合作。</p><p>综上所述，原生应用和快应用在多个方面都具有不同的优势。关键是，在选择应用类型时，需要考虑到应用的目标、用户体验和开发成本。</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序能够解决的痛点</title>
      <link href="/2023/05/27/mini-program/pain-spot/"/>
      <url>/2023/05/27/mini-program/pain-spot/</url>
      
        <content type="html"><![CDATA[<p>微信小程序是微信推出的一种轻量级应用，它可以在微信内部直接使用，不需要用户下载安装，省去了用户安装、更新、卸载等繁琐操作，具有便捷✨、快速⚡、安全🔐等优势。以下是微信小程序能够解决的痛点。</p><h2 id="手机内存不足"><a href="#手机内存不足" class="headerlink" title="手机内存不足"></a>手机内存不足</h2><p>随着手机操作系统和应用的升级，手机内存容量相对较小的用户常常遇到手机内存不足的问题，在下载应用时往往需要删除其他应用或照片。微信小程序不需要下载安装，直接在微信内部运行，不占用手机内存，避免了删除应用的烦恼😩。</p><h2 id="应用安装繁琐"><a href="#应用安装繁琐" class="headerlink" title="应用安装繁琐"></a>应用安装繁琐</h2><p>下载应用需要前往应用商店搜索、下载、安装等繁琐步骤，耗费用户时间，而且安装应用有一定的安全风险😨。微信小程序可以直接在微信内搜索到需要的小程序，点击即可进入使用，省去了下载安装的繁琐操作。</p><h2 id="应用更新不及时"><a href="#应用更新不及时" class="headerlink" title="应用更新不及时"></a>应用更新不及时</h2><p>应用商店更新应用需要用户手动更新或打开应用时自动更新，部分用户习惯关闭了自动更新，导致应用不能及时更新☹️。而微信小程序直接在微信内部更新，及时更新应用，用户无需关心更新问题。</p><h2 id="占用流量和空间"><a href="#占用流量和空间" class="headerlink" title="占用流量和空间"></a>占用流量和空间</h2><p>应用下载、更新等操作需要占用用户的流量和手机存储空间，而微信小程序不需要下载安装，直接在微信内部运行，不占用手机存储空间，且小程序文件通常较小，也不会占用大量用户流量🌎。</p><h2 id="用户体验不佳"><a href="#用户体验不佳" class="headerlink" title="用户体验不佳"></a>用户体验不佳</h2><p>应用商店下载的应用体积较大，启动时间较长，对于运行速度比较慢的手机使用体验十分不友好。而微信小程序开发者可以优化小程序性能、启动速度等问题，提升用户体验👍。</p><p>综上所述，微信小程序具有便捷✨、快速⚡、安全🔐、节省流量和存储空间、降低用户下载和更新应用难度等优势，可以有效解决用户手机内存不足😩、应用安装繁琐、应用更新不及时☹️、占用流量和空间🌎、用户体验不佳的痛点。微信小程序是一种优秀的应用形式，值得开发者和用户的关注和支持。</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序 VS 快应用 🚀</title>
      <link href="/2023/05/27/mini-program/vs-quick/"/>
      <url>/2023/05/27/mini-program/vs-quick/</url>
      
        <content type="html"><![CDATA[<p>微信小程序和快应用都是便捷、轻量、即用即走的应用，但它们还存在一些差异。让我们来一起看看它们之间的比较吧！👀</p><h2 id="微信小程序-💬"><a href="#微信小程序-💬" class="headerlink" title="微信小程序 💬"></a>微信小程序 💬</h2><ul><li><strong>良好的用户体验</strong>: 微信小程序可在微信里直接运行，用户无需下载即可体验应用，非常方便。同时，小程序的启动速度非常快，加载也非常快速，可以带给用户良好的使用体验。</li><li><strong>丰富的开发资源</strong>: 微信小程序开发者可以使用微信提供的大量开发资源，包括 API、工具和教程等。这些资源对于一些小程序初学者来说是非常友好的。 </li><li><strong>广泛的普及率</strong>: 微信小程序作为中国最大的社交平台之一，其普及率非常广泛，用户非常多，可以让开发者的小程序得到更广的流量和访问量。</li></ul><h2 id="快应用-🚀"><a href="#快应用-🚀" class="headerlink" title="快应用 🚀"></a>快应用 🚀</h2><ul><li><strong>流畅的用户体验</strong>: 快应用不依赖于系统操作，可以直接与底层交互，因此它们的性能很出色，快应用启动速度同样非常快，有着非常流畅的用户体验。</li><li><strong>强大的功能</strong>: 快应用可以使用手机上的一些资源，如 GPS、相机或键盘等，并且还可以与其他快应用进行交互。这让它们的功能非常丰富，可以满足不同用户的需求。</li><li><strong>广泛的适用范围</strong>: 相比微信小程序，快应用的适用范围更广，不仅限于某一个应用程序。用户可以通过不同的入口进入快应用，包括搜索、扫描二维码或桌面等。</li></ul><table><thead><tr><th align="center">项目</th><th align="center">微信小程序</th><th align="center">快应用</th></tr></thead><tbody><tr><td align="center">用户体验</td><td align="center">💬</td><td align="center">🚀</td></tr><tr><td align="center">开发资源</td><td align="center">💬</td><td align="center">🚀</td></tr><tr><td align="center">普及率</td><td align="center">💬</td><td align="center">❌</td></tr><tr><td align="center">功能</td><td align="center">❌</td><td align="center">💬</td></tr><tr><td align="center">适用范围</td><td align="center">❌</td><td align="center">💬</td></tr></tbody></table><p>综上所述，微信小程序和快应用都有各自的优点和限制，无法直接说哪个更好。开发者需要仔细考虑自己的需求以及目标用户群体，才能决定选择哪一种应用程序。🤔</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js高阶函数</title>
      <link href="/2023/05/26/js/higher-order-function/"/>
      <url>/2023/05/26/js/higher-order-function/</url>
      
        <content type="html"><![CDATA[<p>JavaScript的高阶函数是一个非常强大的特性，它允许我们编写更加灵活和可重用的代码。在本文中，我们将探讨高阶函数的概念、它们如何实现以及一些示例。</p><h2 id="什么是高阶函数"><a href="#什么是高阶函数" class="headerlink" title="什么是高阶函数"></a>什么是高阶函数</h2><p>高阶函数是指接受一个或多个函数作为参数，并可以返回函数作为结果的函数。这种函数可以用来将其他函数“包装起来”或者实现某种通用的行为。ES6的箭头函数使得编写高阶函数变得更加简单和方便。</p><h2 id="高阶函数的实现"><a href="#高阶函数的实现" class="headerlink" title="高阶函数的实现"></a>高阶函数的实现</h2><p>下面是一个使用普通函数实现高阶函数的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">map</span>(<span class="params">arr, fn</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> mappedArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> val = <span class="title function_">fn</span>(arr[i], i, arr);</span><br><span class="line">        mappedArr.<span class="title function_">push</span>(val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mappedArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数实现了一个非常常见的高阶函数——map()。它接受一个数组和一个函数作为参数，并返回一个新数组，这个新数组的元素是将原数组的每个元素传递给函数之后得到的新值。</p><p>使用箭头函数，我们可以更加简洁地实现同样的功能：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">map</span> = (<span class="params">arr, fn</span>) =&gt; arr.<span class="title function_">map</span>(fn);</span><br></pre></td></tr></table></figure><p>这个例子中，我们用箭头函数实现了一个新的map()函数。它使用了原生的Array.map()方法实现了同样的功能，代码更加简洁和优雅。</p><h2 id="高阶函数的示例"><a href="#高阶函数的示例" class="headerlink" title="高阶函数的示例"></a>高阶函数的示例</h2><p>现在我们来看一些常见的高阶函数例子，以及它们如何用于实现通用的行为。</p><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h3><p>forEach()是一个很常见的高阶函数，它用于遍历数组。我们可以使用它将一个函数应用于数组的每个元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">numbers.<span class="title function_">forEach</span>(<span class="function"><span class="params">num</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(num));</span><br></pre></td></tr></table></figure><p>这将会打印数组中的每个数字。</p><h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><p>filter()是另一个常见的高阶函数，它用于过滤数组。我们可以使用它筛选出我们想要的元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> people = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;Jane&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> adults = people.<span class="title function_">filter</span>(<span class="function"><span class="params">person</span> =&gt;</span> person.<span class="property">age</span> &gt;= <span class="number">25</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(adults);</span><br></pre></td></tr></table></figure><p>这将会输出年龄大于或等于25岁的人的信息。</p><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h3><p>reduce()是一个非常强大的高阶函数，它可以从一个数组中提取出一个值。我们可以使用它来计算数组的平均值、求和等操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> sum = numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, num</span>) =&gt;</span> acc + num, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br></pre></td></tr></table></figure><p>这将会输出数组的总和5。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>高阶函数是一个非常有用和强大的概念。它们允许我们编写更加灵活和可重用的代码。在本文中，我们探讨了高阶函数的概念和实现方法，并给出了一些实际例子。当您编写JavaScript代码时，请记得考虑使用高阶函数来提高代码的可维护性和灵活性。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 命令手册 📖</title>
      <link href="/2023/05/23/git/guide/"/>
      <url>/2023/05/23/git/guide/</url>
      
        <content type="html"><![CDATA[<p>这是一份 Git 命令的快速查找手册，包含了 Git 的常用命令和基本用法。快速找到你需要的命令和用法，让你的 Git 使用更加轻松自如。</p><h2 id="🚀-初始化"><a href="#🚀-初始化" class="headerlink" title="🚀 初始化"></a>🚀 初始化</h2><ul><li><code>git init</code> : 初始化一个 Git 仓库。</li><li><code>git clone &lt;URL&gt;</code> : 克隆一个远程 Git 仓库。</li></ul><h2 id="📝-添加与提交"><a href="#📝-添加与提交" class="headerlink" title="📝 添加与提交"></a>📝 添加与提交</h2><ul><li><code>git add &lt;file&gt;</code> : 将文件添加到暂存区。</li><li><code>git add .</code> : 将所有修改添加到暂存区。</li><li><code>git commit -m &quot;&lt;message&gt;&quot;</code> : 提交变更并附上提交信息。</li><li><code>git commit -a</code> : 跳过暂存区，直接提交所有变更。</li></ul><h2 id="🌿-分支和合并"><a href="#🌿-分支和合并" class="headerlink" title="🌿 分支和合并"></a>🌿 分支和合并</h2><ul><li><code>git branch</code> : 列出当前仓库的所有分支。</li><li><code>git branch &lt;branch&gt;</code> : 创建一个新分支。</li><li><code>git checkout &lt;branch&gt;</code> : 切换到一个分支。</li><li><code>git checkout -b &lt;branch&gt;</code> : 创建一个新的分支并立即切换到该分支。</li><li><code>git merge &lt;branch&gt;</code> : 合并指定分支到当前分支。</li><li><code>git merge --no-ff &lt;branch&gt;</code> : 强制 Git 创建一个新的合并提交，即使当前分支可以通过快进合并到指定分支。</li></ul><h2 id="🔀-推送与拉取"><a href="#🔀-推送与拉取" class="headerlink" title="🔀 推送与拉取"></a>🔀 推送与拉取</h2><ul><li><code>git pull</code> : 从远程仓库拉取代码。</li><li><code>git push</code> : 将本地分支的更改推送到远程仓库。</li><li><code>git push -u &lt;remote&gt; &lt;branch&gt;</code> : 第一次推送分支时，使用此命令将本地分支推送到远程仓库。</li><li><code>git fetch &lt;remote&gt;</code> : 从远程仓库拉取变更，但不自动合并它们。</li><li><code>git fetch --all</code> : 从远程仓库拉取所有分支的变更，但不自动合并它们。</li><li><code>git push &lt;remote&gt; --delete &lt;branch&gt;</code> : 从远程仓库删除指定分支。</li></ul><h2 id="🔎-查看日志"><a href="#🔎-查看日志" class="headerlink" title="🔎 查看日志"></a>🔎 查看日志</h2><ul><li><code>git log</code> : 查看提交日志。</li><li><code>git log --oneline</code> : 查看简洁的提交日志。</li><li><code>git log --graph --oneline</code> : 查看提交日志并显示分支合并图。</li><li><code>git blame &lt;file&gt;</code> : 显示指定文件的每一行是由谁添加的。</li></ul><h2 id="❌-撤销与修改"><a href="#❌-撤销与修改" class="headerlink" title="❌ 撤销与修改"></a>❌ 撤销与修改</h2><ul><li><code>git checkout &lt;file&gt;</code> : 用仓库中的文件替换工作目录中的文件，从而撤消最近的修订。</li><li><code>git reset HEAD &lt;file&gt;</code> : 取消已暂存文件。</li><li><code>git reset HEAD~</code> : 返回上一个commit版本，并将文件修改保留在工作目录。</li><li><code>git reset &lt;commit&gt;</code> : 恢复指定提交的状态，同时将工作区和暂存区的修改移回到工作区。</li><li><code>git reset --hard</code> : 取消所有本地修改，并恢复到最近的提交状态。</li><li><code>git clean -f</code> : 删除未被跟踪的文件。</li></ul><h2 id="🎨-其他命令"><a href="#🎨-其他命令" class="headerlink" title="🎨 其他命令"></a>🎨 其他命令</h2><ul><li><code>git status</code> : 显示工作目录下已提交和未提交的修改。</li><li><code>git diff</code> : 显示工作目录和本地仓库之间的差异。</li><li><code>git stash</code> : 将工作目录中的未提交修改保存到一个栈中。</li><li><code>git stash apply</code> : 恢复最新的stash，并将内容应用于工作区。</li><li><code>git stash list</code> : 显示所有的stash记录。</li><li><code>git stash pop</code> : 删除最新的stash，并将其应用于工作区。</li><li><code>git stash drop</code> : 删除最新的stash。</li><li><code>git remote add &lt;name&gt; &lt;url&gt;</code> : 将一个新远程仓库添加到当前 Git 仓库中。</li><li><code>git remote -v</code> : 显示当前仓库的所有远程仓库及其 URL。</li><li><code>git tag</code> : 列出已经存在的标签。</li><li><code>git tag &lt;tagname&gt;</code> : 新建一个标签，默认为HEAD，用于后续推送到远程仓库。</li><li><code>git push origin &lt;tagname&gt;</code> : 将指定标签推送到远程仓库。</li><li><code>git push origin --tags</code> : 将所有标签推送到远程仓库。</li><li><code>git show &lt;commit&gt;</code> : 显示指定提交的信息。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在 Vite 中拦截开发服务器并使用 express</title>
      <link href="/2023/05/23/vite/express/"/>
      <url>/2023/05/23/vite/express/</url>
      
        <content type="html"><![CDATA[<p>Vite 是一个快速、轻量级、易于使用的前端工具。它为开发者提供了一种现代的构建方式，可以快速地构建出高效且易于维护的 Web 应用程序。</p><p>在 Vite 版本 4.2 及以上的版本中，我们可以使用 <code>configureServer</code> 方法来拦截 Vite 开发服务器，并将其替换为 express HTTP 服务器。这样，我们就可以使用更加灵活的 HTTP 服务器组合，并且可以方便地实现登录、鉴权等功能。</p><h2 id="配置-Vite-插件"><a href="#配置-Vite-插件" class="headerlink" title="配置 Vite 插件"></a>配置 Vite 插件</h2><p>为了使用自定义的 express 应用程序，我们需要编写一个 Vite 插件</p><p>我们可以通过 <code>myPlugin</code> 函数来创建一个新插件。这个插件暴露了一个 <code>configureServer</code> 方法，我们可以在这个方法中创建并配置一个 express 应用程序。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br><span class="line"><span class="keyword">import</span> cors <span class="keyword">from</span> <span class="string">&#x27;cors&#x27;</span></span><br><span class="line"><span class="keyword">import</span> bodyParser <span class="keyword">from</span> <span class="string">&#x27;body-parser&#x27;</span></span><br><span class="line"><span class="keyword">import</span> cookieParser <span class="keyword">from</span> <span class="string">&#x27;cookie-parser&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">myPlugin</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;my-plugin&#x27;</span>,</span><br><span class="line">        configureServer (server) &#123;</span><br><span class="line">            <span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">            app.<span class="title function_">use</span>(<span class="title function_">cors</span>(&#123;</span><br><span class="line">                <span class="attr">credentials</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">origin</span>: <span class="literal">true</span></span><br><span class="line">            &#125;))</span><br><span class="line"></span><br><span class="line">            app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123;</span><br><span class="line">                <span class="attr">extended</span>: <span class="literal">false</span></span><br><span class="line">            &#125;))</span><br><span class="line"></span><br><span class="line">            app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>())</span><br><span class="line"></span><br><span class="line">            server.<span class="property">middlewares</span>.<span class="title function_">use</span>(app)</span><br><span class="line"></span><br><span class="line">            app.<span class="title function_">use</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// login</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>configureServer</code> 方法中，我们首先创建了一个新的 express 应用程序 <code>app</code>。</p><p>接下来，我们注册了 <code>cors</code>、<code>body-parser</code> 和 <code>cookie-parser</code> 中间件，这样我们就可以在应用程序中使用这些中间件了。</p><p>然后，我们将应用程序添加到 Vite 开发服务器的中间件中，这样就可以使用自定义的 <code>express</code> 应用程序来处理 HTTP 请求了。</p><p>最后，我们向应用程序中添加了一个处理 <code>/login</code> URL 路径的路由处理函数，用于执行登录逻辑。</p><h2 id="配置-Vite"><a href="#配置-Vite" class="headerlink" title="配置 Vite"></a>配置 Vite</h2><p>使用 <code>configureServer</code> 来配置 Vite 开发服务器也很简单。我们只需要将插件导入应用程序，然后将其添加到 Vite 配置的 <code>plugins</code> 队列中，就可以完整地拦截 Vite 开发服务器了。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> myPlugin <span class="keyword">from</span> <span class="string">&#x27;./myPlugin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="title function_">myPlugin</span>()</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>通过使用 <code>configureServer</code> 方法，我们可以轻松地拦截 Vite 开发服务器，并使用 express HTTP 服务器来替换它。</p><p>这种方式可以让我们在 Vite 开发服务器中使用更加灵活的 HTTP 服务器组合，并且可以方便地实现登录、鉴权等功能。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
            <tag> vite </tag>
            
            <tag> express </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
