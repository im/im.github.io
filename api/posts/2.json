{"total":64,"pageSize":10,"pageCount":7,"data":[{"title":" Homebrew介绍和使用","slug":"macos/709209221b","date":"2021-06-05T06:43:52.000Z","updated":"2021-06-17T11:25:09.047Z","comments":true,"path":"api/articles/macos/709209221b.json","excerpt":"<h2 id=\"一、Homebrew是什么\"><a href=\"#一、Homebrew是什么\" class=\"headerlink\" title=\"一、Homebrew是什么\"></a>一、Homebrew是什么</h2><p>Homebrew是一款Mac OS平台下的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能。简单的一条指令，就可以实现包管理，而不用你关心各种依赖和文件路径的情况，十分方便快捷。<br>援引 <a href=\"https://links.jianshu.com/go?to=http://brew.sh/\">官方</a> 的一句话：又提示缺少套件啦？别担心，Homebrew 随时守候。Homebrew —— OS X 不可或缺的套件管理器。</p>","keywords":null,"cover":null,"content":null,"text":"一、Homebrew是什么Homebrew是一款Mac OS平台下的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能。简单的一条指令，就可以实现包管理，而不用你关心各种依赖和文件路径的情况，十分方便快捷。<br>援引 官方 的一句话：又提示缺少套件啦？别担心，Ho","link":"","raw":null,"photos":[],"categories":[{"name":"macos","slug":"macos","count":3,"path":"api/categories/macos.json"}],"tags":[{"name":"macos","slug":"macos","count":3,"path":"api/tags/macos.json"}]},{"title":" Node.js的版本升级","slug":"javascript/b893a6f276","date":"2021-06-04T03:47:17.000Z","updated":"2021-06-17T11:25:09.047Z","comments":true,"path":"api/articles/javascript/b893a6f276.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"查看本地node版本\"><a href=\"#查看本地node版本\" class=\"headerlink\" title=\"查看本地node版本\"></a>查看本地node版本</h2><pre><code class=\"hljs crmsh\"><span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">-v</span></code></pre>\n\n<h2 id=\"安装n模块\"><a href=\"#安装n模块\" class=\"headerlink\" title=\"安装n模块\"></a>安装n模块</h2><pre><code class=\"hljs cmake\">npm <span class=\"hljs-keyword\">install</span> -g n（mac需要在命令的前面加上sudo）</code></pre>\n\n<h2 id=\"升级到指定的版本-最新版本，升级之前，可以执行n-ls（查看可以升级的版本）\"><a href=\"#升级到指定的版本-最新版本，升级之前，可以执行n-ls（查看可以升级的版本）\" class=\"headerlink\" title=\"升级到指定的版本/最新版本，升级之前，可以执行n ls（查看可以升级的版本）\"></a>升级到指定的版本/最新版本，升级之前，可以执行n ls（查看可以升级的版本）</h2><pre><code class=\"hljs excel\"><span class=\"hljs-built_in\">n</span> <span class=\"hljs-number\">8.10</span>.<span class=\"hljs-number\">1</span>（版本号）\n或者你可以安装最新的稳定版本\n<span class=\"hljs-built_in\">n</span> stable</code></pre>\n\n<h2 id=\"4-安装完成以后，检查一下是否升级成功\"><a href=\"#4-安装完成以后，检查一下是否升级成功\" class=\"headerlink\" title=\"4.安装完成以后，检查一下是否升级成功\"></a>4.安装完成以后，检查一下是否升级成功</h2><pre><code class=\"hljs crmsh\"><span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">-v</span></code></pre>\n\n\n","text":"查看本地node版本node -v安装n模块npm install -g n（mac需要在命令的前面加上sudo）升级到指定的版本/最新版本，升级之前，可以执行n ls（查看可以升级的版本）n 8.10.1（版本号）或者你可以安装最新的稳定版本n stable4.安装完成以后，检","link":"","raw":null,"photos":[],"categories":[{"name":"javascript","slug":"javascript","count":21,"path":"api/categories/javascript.json"}],"tags":[{"name":"javascript","slug":"javascript","count":25,"path":"api/tags/javascript.json"},{"name":"nodejs","slug":"nodejs","count":2,"path":"api/tags/nodejs.json"}]},{"title":" Linux软连接和硬链接","slug":"linux/fa6eb7f527","date":"2021-06-04T03:39:40.000Z","updated":"2021-06-17T11:25:09.047Z","comments":true,"path":"api/articles/linux/fa6eb7f527.json","excerpt":"<p><a href=\"https://www.cnblogs.com/itech/archive/2009/04/10/1433052.html\">Linux软连接和硬链接</a></p>\n<h2 id=\"Linux链接概念\"><a href=\"#Linux链接概念\" class=\"headerlink\" title=\"Linux链接概念\"></a>Linux链接概念</h2><p>Linux链接分两种，一种被称为硬链接<code>（Hard Link）</code>，另一种被称为符号链接<code>（Symbolic Link）</code>。默认情况下，ln命令产生硬链接。</p>\n<h3 id=\"【硬连接】\"><a href=\"#【硬连接】\" class=\"headerlink\" title=\"【硬连接】\"></a>【硬连接】</h3><p>硬连接指通过索引节点来进行连接。在Linux的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在Linux中，多个文件名指向同一索引节点是存在的。一般这种连接就是硬连接。硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。</p>\n<h3 id=\"【软连接】\"><a href=\"#【软连接】\" class=\"headerlink\" title=\"【软连接】\"></a>【软连接】</h3><p>另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于Windows的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。</p>","keywords":null,"cover":null,"content":null,"text":"Linux软连接和硬链接Linux链接概念Linux链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。默认情况下，ln命令产生硬链接。【硬连接】硬连接指通过索引节点来进行连接。在Linux的文件系统中，保存在磁盘分区中的文件不","link":"","raw":null,"photos":[],"categories":[{"name":"linux","slug":"linux","count":1,"path":"api/categories/linux.json"}],"tags":[{"name":"linux","slug":"linux","count":1,"path":"api/tags/linux.json"}]},{"title":" iframe 报错 Refused to display 'URL' in a frame because it set 'X-Frame-Options' to 'DENY'","slug":"question/d6d18596d2","date":"2021-06-03T00:00:00.000Z","updated":"2021-06-17T11:25:09.047Z","comments":true,"path":"api/articles/question/d6d18596d2.json","excerpt":"","keywords":null,"cover":null,"content":"<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/X-Frame-Options\">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/X-Frame-Options</a></p>\n<p>X-Frame-Options 有三个值:</p>\n<ul>\n<li><p>DENY<br>表示该页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许。</p>\n</li>\n<li><p>SAMEORIGIN<br>表示该页面可以在相同域名页面的 frame 中展示。</p>\n</li>\n<li><p>ALLOW-FROM uri<br>表示该页面可以在指定来源的 frame 中展示。</p>\n</li>\n</ul>\n<p>换一句话说，如果设置为 DENY，不光在别人的网站 frame 嵌入时会无法加载，在同域名页面中同样会无法加载。另一方面，如果设置为 SAMEORIGIN，那么页面就可以在同域名页面的 frame 中嵌套。</p>\n<h2 id=\"express-配置\"><a href=\"#express-配置\" class=\"headerlink\" title=\"express 配置\"></a>express 配置</h2><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> helmet = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;helmet&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> app = express();\napp.use(helmet.frameguard(&#123; <span class=\"hljs-attr\">action</span>: <span class=\"hljs-string\">&#x27;SAMEORIGIN&#x27;</span> &#125;))</code></pre>\n\n<p>或者使用：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> frameguard = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;frameguard&#x27;</span>)\napp.use(frameguard(&#123; <span class=\"hljs-attr\">action</span>: <span class=\"hljs-string\">&#x27;SAMEORIGIN&#x27;</span> &#125;))\n</code></pre>\n\n","text":"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/X-Frame-OptionsX-Frame-Options 有三个值:DENY<br>表示该页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许。SAMEORI","link":"","raw":null,"photos":[],"categories":[{"name":"question","slug":"question","count":1,"path":"api/categories/question.json"}],"tags":[{"name":"question","slug":"question","count":2,"path":"api/tags/question.json"}]},{"title":" 泛型","slug":"typescript/c4dbac2ca2","date":"2021-06-03T00:00:00.000Z","updated":"2021-06-17T11:25:09.051Z","comments":true,"path":"api/articles/typescript/c4dbac2ca2.json","excerpt":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>软件工程中，我们不仅要创建一致的定义良好的API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。</p>\n<p>在像C#和Java这样的语言中，可以使用<code>泛型</code>来创建可重用的组件，一个组件可以支持多种类型的数据。 这样用户就可以以自己的数据类型来使用组件。</p>","keywords":null,"cover":null,"content":null,"text":"介绍软件工程中，我们不仅要创建一致的定义良好的API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。在像C#和Java这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。 ","link":"","raw":null,"photos":[],"categories":[{"name":"typescript","slug":"typescript","count":8,"path":"api/categories/typescript.json"}],"tags":[{"name":"typescript","slug":"typescript","count":8,"path":"api/tags/typescript.json"}]},{"title":" 接口","slug":"typescript/c4ab7b1814","date":"2021-06-03T00:00:00.000Z","updated":"2021-06-17T11:25:09.051Z","comments":true,"path":"api/articles/typescript/c4ab7b1814.json","excerpt":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>TypeScript 的核心原则之一是对值所具有的_结构_进行类型检查。 它有时被称做“鸭式辨型法”或“结构性子类型化”。 在 TypeScript 里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。</p>","keywords":null,"cover":null,"content":null,"text":"介绍TypeScript 的核心原则之一是对值所具有的_结构_进行类型检查。 它有时被称做“鸭式辨型法”或“结构性子类型化”。 在 TypeScript 里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。接口初探下面通过一个简单示例来观察接口是如何工作的：func","link":"","raw":null,"photos":[],"categories":[{"name":"typescript","slug":"typescript","count":8,"path":"api/categories/typescript.json"}],"tags":[{"name":"typescript","slug":"typescript","count":8,"path":"api/tags/typescript.json"}]},{"title":" 为什么要用setTimeout来模拟setInterval","slug":"interview/ac86bf5243","date":"2021-06-02T01:49:36.000Z","updated":"2021-06-17T11:25:09.047Z","comments":true,"path":"api/articles/interview/ac86bf5243.json","excerpt":"<p>setTimeout(fn,time): 等待time时间后执行fn<br>setInterval(fn,time):  每隔time时间执行fn</p>\n<p>我们希望setInterval是每隔一段时间自动执行，但是实际应用中，setInterval并不会按照我们预想的那样，它通常存在如下两个缺点。</p>\n<pre><code>1. 在执行的时候可能会跳过指定时间间隔\n2. 多个定时器函数会立刻执行\n</code></pre>\n<p>我们就实际场景来说一下这两个缺陷</p>","keywords":null,"cover":"/images/20200609111645389.png","content":null,"text":"setTimeout(fn,time): 等待time时间后执行fn<br>setInterval(fn,time):  每隔time时间执行fn我们希望setInterval是每隔一段时间自动执行，但是实际应用中，setInterval并不会按照我们预想的那样，它通常存在如下两","link":"","raw":null,"photos":[],"categories":[{"name":"Interview","slug":"Interview","count":3,"path":"api/categories/Interview.json"}],"tags":[{"name":"Interview","slug":"Interview","count":3,"path":"api/tags/Interview.json"},{"name":"javascript","slug":"javascript","count":25,"path":"api/tags/javascript.json"}]},{"title":" 枚举","slug":"typescript/1c6b93719a","date":"2021-06-02T00:00:00.000Z","updated":"2021-06-17T11:25:09.047Z","comments":true,"path":"api/articles/typescript/1c6b93719a.json","excerpt":"<h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><p>使用枚举我们可以定义一些带名字的常量。 使用枚举可以清晰地表达意图或创建一组有区别的用例。 TypeScript支持数字的和基于字符串的枚举。</p>","keywords":null,"cover":null,"content":null,"text":"枚举使用枚举我们可以定义一些带名字的常量。 使用枚举可以清晰地表达意图或创建一组有区别的用例。 TypeScript支持数字的和基于字符串的枚举。数字枚举首先我们看看数字枚举，如果你使用过其它编程语言应该会很熟悉。enum Direction &#123;    Up = 1, ","link":"","raw":null,"photos":[],"categories":[{"name":"typescript","slug":"typescript","count":8,"path":"api/categories/typescript.json"}],"tags":[{"name":"typescript","slug":"typescript","count":8,"path":"api/tags/typescript.json"}]},{"title":" ios 提醒事项同步日历快捷指令脚本","slug":"other/6238c21f55","date":"2021-05-03T00:00:00.000Z","updated":"2021-06-17T11:25:09.047Z","comments":true,"path":"api/articles/other/6238c21f55.json","excerpt":"","keywords":null,"cover":null,"content":"<ul>\n<li>AppStore 安装运行脚本的软件 <code>scriptable</code></li>\n</ul>\n<p><a href=\"https://docs.scriptable.app/\">scriptable https://docs.scriptable.app</a></p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> DUR_MONTH = <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-keyword\">const</span> startDate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()\nstartDate.setMonth(startDate.getMonth() - DUR_MONTH)\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`日历的开始时间 <span class=\"hljs-subst\">$&#123;startDate.toLocaleDateString()&#125;</span>`</span>)\n\n<span class=\"hljs-keyword\">const</span> endDate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()\nendDate.setMonth(endDate.getMonth() + DUR_MONTH)\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`日历的结束时间 <span class=\"hljs-subst\">$&#123;endDate.toLocaleDateString()&#125;</span>`</span>)\n\n<span class=\"hljs-keyword\">const</span> reminders = <span class=\"hljs-keyword\">await</span> Reminder.allDueBetween(startDate, endDate)\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`获取 <span class=\"hljs-subst\">$&#123;reminders.length&#125;</span> 条提醒事项`</span>)\n\n<span class=\"hljs-keyword\">var</span> calendar = <span class=\"hljs-keyword\">await</span> Calendar.forEvents()\n\n<span class=\"hljs-comment\">//获取日历名和对应的日历</span>\n<span class=\"hljs-keyword\">var</span> m_dict = &#123;&#125;\n<span class=\"hljs-keyword\">for</span> (cal <span class=\"hljs-keyword\">of</span> calendar) &#123;\n    m_dict[cal.title] = cal\n&#125;\n\n<span class=\"hljs-keyword\">const</span> events = <span class=\"hljs-keyword\">await</span> CalendarEvent.between(startDate, endDate, calendar)\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`获取 <span class=\"hljs-subst\">$&#123;events.length&#125;</span> 条日历`</span>)\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> reminder <span class=\"hljs-keyword\">of</span> reminders) &#123;\n    <span class=\"hljs-comment\">//reminder的标识符</span>\n    <span class=\"hljs-keyword\">const</span> id = reminder.identifier.split(<span class=\"hljs-string\">&#x27;-&#x27;</span>)[<span class=\"hljs-number\">0</span>]\n    <span class=\"hljs-keyword\">const</span> targetNote = <span class=\"hljs-string\">`🍧 <span class=\"hljs-subst\">$&#123;id&#125;</span> 🍰`</span>\n    <span class=\"hljs-comment\">// 添加标识符存进备注 用来防止重复添加</span>\n    <span class=\"hljs-keyword\">const</span> [targetEvent] = events.filter(\n        <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> e.notes != <span class=\"hljs-literal\">null</span> &amp;&amp; e.notes.indexOf(targetNote) != -<span class=\"hljs-number\">1</span>\n    ) <span class=\"hljs-comment\">//过滤重复的reminder</span>\n    <span class=\"hljs-keyword\">if</span> (!m_dict[reminder.calendar.title]) &#123;\n        <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">&#x27;找不到日历&#x27;</span> + reminder.calendar.title)\n        <span class=\"hljs-keyword\">continue</span>\n    &#125;\n    <span class=\"hljs-keyword\">if</span> (targetEvent) &#123;\n        <span class=\"hljs-comment\">//console.log(`找到已经创建的事项 $&#123;reminder.title&#125;`)</span>\n        updateEvent(targetEvent, reminder)\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        <span class=\"hljs-built_in\">console</span>.warn(<span class=\"hljs-string\">`创建事项 <span class=\"hljs-subst\">$&#123;reminder.title&#125;</span> 到 <span class=\"hljs-subst\">$&#123;reminder.calendar.title&#125;</span>`</span>)\n        <span class=\"hljs-keyword\">const</span> newEvent = <span class=\"hljs-keyword\">new</span> CalendarEvent()\n        <span class=\"hljs-keyword\">const</span> notes = reminder.notes ? reminder.notes : <span class=\"hljs-string\">&#x27;&#x27;</span>\n        newEvent.notes = targetNote + <span class=\"hljs-string\">&#x27;\\n\\n&#x27;</span> + notes <span class=\"hljs-comment\">//要加入备注</span>\n        updateEvent(newEvent, reminder)\n    &#125;\n&#125;\n\nScript.complete()\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">updateEvent</span>(<span class=\"hljs-params\">event, reminder</span>) </span>&#123;\n    event.title = <span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;reminder.title&#125;</span>`</span>\n    cal_name = reminder.calendar.title\n    cal = m_dict[cal_name]\n    event.calendar = cal\n    <span class=\"hljs-comment\">//已完成事项</span>\n    <span class=\"hljs-keyword\">if</span> (reminder.isCompleted) &#123;\n        event.title = <span class=\"hljs-string\">`✅ <span class=\"hljs-subst\">$&#123;reminder.title&#125;</span>`</span>\n        event.isAllDay = <span class=\"hljs-literal\">false</span>\n        event.startDate = reminder.completionDate\n        <span class=\"hljs-keyword\">var</span> ending = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(reminder.completionDate)\n        ending.setHours(ending.getHours() + <span class=\"hljs-number\">1</span>)\n        event.endDate = ending\n\n        <span class=\"hljs-keyword\">var</span> period =\n            (reminder.dueDate - reminder.completionDate) / <span class=\"hljs-number\">1000</span> / <span class=\"hljs-number\">3600</span> / <span class=\"hljs-number\">24</span>\n        period = period.toFixed(<span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-keyword\">if</span> (period &lt; <span class=\"hljs-number\">0</span>) &#123;\n            period = -period\n            event.location = <span class=\"hljs-string\">&#x27; 延期&#x27;</span> + period + <span class=\"hljs-string\">&#x27;天完成&#x27;</span>\n        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (period == <span class=\"hljs-number\">0</span>) &#123;\n            event.location = <span class=\"hljs-string\">&#x27; 准时完成&#x27;</span>\n        &#125; <span class=\"hljs-keyword\">else</span> &#123;\n            event.location = <span class=\"hljs-string\">&#x27; 提前&#x27;</span> + period + <span class=\"hljs-string\">&#x27;天完成&#x27;</span>\n        &#125;\n    &#125;\n    <span class=\"hljs-comment\">//未完成事项</span>\n    <span class=\"hljs-keyword\">else</span> &#123;\n        <span class=\"hljs-keyword\">const</span> nowtime = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()\n        <span class=\"hljs-keyword\">var</span> period = (reminder.dueDate - nowtime) / <span class=\"hljs-number\">1000</span> / <span class=\"hljs-number\">3600</span> / <span class=\"hljs-number\">24</span>\n        period = period.toFixed(<span class=\"hljs-number\">1</span>)\n        <span class=\"hljs-keyword\">if</span> (period &lt; <span class=\"hljs-number\">0</span>) &#123;\n            <span class=\"hljs-comment\">//待办顺延</span>\n\n            event.location = <span class=\"hljs-string\">&#x27; 延期&#x27;</span> + -period + <span class=\"hljs-string\">&#x27;天&#x27;</span>\n            <span class=\"hljs-comment\">//如果不是在同一天,设置为全天事项</span>\n            <span class=\"hljs-keyword\">if</span> (reminder.dueDate.getDate() != nowtime.getDate()) &#123;\n                event.title = <span class=\"hljs-string\">`❌ <span class=\"hljs-subst\">$&#123;reminder.title&#125;</span>`</span>\n                event.startDate = nowtime\n                event.endDate = nowtime\n                event.isAllDay = <span class=\"hljs-literal\">true</span>\n            &#125;\n            <span class=\"hljs-comment\">//在同一天的保持原来的时间</span>\n            <span class=\"hljs-keyword\">else</span> &#123;\n                event.title = <span class=\"hljs-string\">`⭕️ <span class=\"hljs-subst\">$&#123;reminder.title&#125;</span>`</span>\n                event.isAllDay = <span class=\"hljs-literal\">false</span>\n                event.startDate = reminder.dueDate\n                <span class=\"hljs-keyword\">var</span> ending = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(reminder.dueDate)\n                ending.setHours(ending.getHours() + <span class=\"hljs-number\">1</span>)\n                event.endDate = ending\n            &#125;\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`【<span class=\"hljs-subst\">$&#123;reminder.title&#125;</span>】待办顺延<span class=\"hljs-subst\">$&#123;-period&#125;</span>天`</span>)\n        &#125; <span class=\"hljs-keyword\">else</span> &#123;\n            event.title = <span class=\"hljs-string\">`⭕️ <span class=\"hljs-subst\">$&#123;reminder.title&#125;</span>`</span>\n            event.isAllDay = <span class=\"hljs-literal\">false</span>\n            event.location = <span class=\"hljs-string\">&#x27;还剩&#x27;</span> + period + <span class=\"hljs-string\">&#x27;天&#x27;</span>\n            event.startDate = reminder.dueDate\n            <span class=\"hljs-keyword\">var</span> ending = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(reminder.dueDate)\n            ending.setHours(ending.getHours() + <span class=\"hljs-number\">1</span>)\n            event.endDate = ending\n        &#125;\n    &#125;\n    event.save()\n&#125;\n</code></pre>\n\n<ul>\n<li>提醒事项数据格式</li>\n</ul>\n<pre><code class=\"hljs json\">&#123;\n  <span class=\"hljs-attr\">&quot;identifier&quot;</span>: <span class=\"hljs-string\">&quot;29803A1E-6C2F-454D-B366-2C67EB1F24BD&quot;</span>,\n  <span class=\"hljs-attr\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;Recite word&quot;</span>,\n  <span class=\"hljs-attr\">&quot;isCompleted&quot;</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">&quot;isOverdue&quot;</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">&quot;priority&quot;</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-attr\">&quot;dueDate&quot;</span>: <span class=\"hljs-string\">&quot;2021-03-11T23:20:00.000Z&quot;</span>,\n  <span class=\"hljs-attr\">&quot;dueDateIncludesTime&quot;</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">&quot;completionDate&quot;</span>: <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-attr\">&quot;creationDate&quot;</span>: <span class=\"hljs-string\">&quot;2021-03-12T03:28:00.621Z&quot;</span>,\n  <span class=\"hljs-attr\">&quot;calendar&quot;</span>: &#123;\n    <span class=\"hljs-attr\">&quot;identifier&quot;</span>: <span class=\"hljs-string\">&quot;282088E0-DC16-4827-BA21-9B9FD5F0A16F&quot;</span>,\n    <span class=\"hljs-attr\">&quot;title&quot;</span>: <span class=\"hljs-string\">&quot;Learn&quot;</span>,\n    <span class=\"hljs-attr\">&quot;isSubscribed&quot;</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">&quot;allowsContentModifications&quot;</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">&quot;color&quot;</span>: &#123;\n      <span class=\"hljs-attr\">&quot;hex&quot;</span>: <span class=\"hljs-string\">&quot;FF2968&quot;</span>,\n      <span class=\"hljs-attr\">&quot;red&quot;</span>: <span class=\"hljs-number\">1</span>,\n      <span class=\"hljs-attr\">&quot;green&quot;</span>: <span class=\"hljs-number\">0.1607843041419983</span>,\n      <span class=\"hljs-attr\">&quot;blue&quot;</span>: <span class=\"hljs-number\">0.40784314274787903</span>,\n      <span class=\"hljs-attr\">&quot;alpha&quot;</span>: <span class=\"hljs-number\">1</span>\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n\n<p><a href=\"https://tangxiaomi.top/2021/03/12/other/reminders-sync-calendar/\">ios 提醒事项同步日历快捷指令脚本</a></p>\n","text":"AppStore 安装运行脚本的软件 scriptablescriptable https://docs.scriptable.appconst DUR_MONTH = 1const startDate = new Date()startDate.setMonth(startDa","link":"","raw":null,"photos":[],"categories":[{"name":"other","slug":"other","count":4,"path":"api/categories/other.json"}],"tags":[{"name":"other","slug":"other","count":4,"path":"api/tags/other.json"}]},{"title":" 类","slug":"typescript/98dfa9bae0","date":"2021-05-03T00:00:00.000Z","updated":"2021-06-17T11:25:09.047Z","comments":true,"path":"api/articles/typescript/98dfa9bae0.json","excerpt":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>传统的JavaScript程序使用函数和基于原型的继承来创建可重用的组件，但对于熟悉使用面向对象方式的程序员来讲就有些棘手，因为他们用的是基于类的继承并且对象是由类构建出来的。 从ECMAScript 2015，也就是ECMAScript 6开始，JavaScript程序员将能够使用基于类的面向对象的方式。 使用TypeScript，我们允许开发者现在就使用这些特性，并且编译后的JavaScript可以在所有主流浏览器和平台上运行，而不需要等到下个JavaScript版本。</p>","keywords":null,"cover":null,"content":null,"text":"介绍传统的JavaScript程序使用函数和基于原型的继承来创建可重用的组件，但对于熟悉使用面向对象方式的程序员来讲就有些棘手，因为他们用的是基于类的继承并且对象是由类构建出来的。 从ECMAScript 2015，也就是ECMAScript 6开始，JavaScript程序员将","link":"","raw":null,"photos":[],"categories":[{"name":"typescript","slug":"typescript","count":8,"path":"api/categories/typescript.json"}],"tags":[{"name":"typescript","slug":"typescript","count":8,"path":"api/tags/typescript.json"}]}]}