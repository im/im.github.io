{"name":"typescript","slug":"typescript","count":8,"postlist":[{"title":" TypeScript","slug":"typescript/0adbf3a0c2","date":"2019-09-09T00:00:00.000Z","updated":"2021-06-17T11:25:09.047Z","comments":true,"path":"api/articles/typescript/0adbf3a0c2.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li>手册<ul>\n<li>[[基础类型]]</li>\n<li>[[接口]]</li>\n<li>[[函数]]</li>\n<li>[[字面量类型]]</li>\n<li>[[类]]</li>\n<li>[[枚举]]</li>\n<li>[[泛型]]</li>\n</ul>\n</li>\n<li><a href=\"zh/reference/README.md\">手册（进阶）</a><ul>\n<li><a href=\"zh/reference/advanced-types.md\">高级类型</a></li>\n<li><a href=\"zh/reference/utility-types.md\">实用工具类型</a></li>\n<li><a href=\"zh/reference/decorators.md\">Decorators</a></li>\n<li><a href=\"zh/reference/declaration-merging.md\">声明合并</a></li>\n<li><a href=\"zh/reference/iterators-and-generators.md\">Iterators 和 Generators</a></li>\n<li><a href=\"zh/reference/jsx.md\">JSX</a></li>\n<li><a href=\"zh/reference/mixins.md\">混入</a></li>\n<li><a href=\"zh/reference/modules.md\">模块</a></li>\n<li><a href=\"zh/reference/module-resolution.md\">模块解析</a></li>\n<li><a href=\"zh/reference/namespaces.md\">命名空间</a></li>\n<li><a href=\"zh/reference/namespaces-and-modules.md\">命名空间和模块</a></li>\n<li><a href=\"zh/reference/symbols.md\">Symbols</a></li>\n<li><a href=\"zh/reference/triple-slash-directives.md\">三斜线指令</a></li>\n<li><a href=\"zh/reference/type-compatibility.md\">类型兼容性</a></li>\n<li><a href=\"zh/reference/type-inference.md\">类型推论</a></li>\n<li><a href=\"zh/reference/variable-declarations.md\">变量声明</a></li>\n</ul>\n</li>\n<li>手册（v2）<ul>\n<li><a href=\"zh/handbook-v2/type-manipulation/template-literal-types.md\">模版字面量类型</a></li>\n</ul>\n</li>\n<li><a href=\"zh/declaration-files/README.md\">如何书写声明文件</a><ul>\n<li><a href=\"zh/declaration-files/introduction.md\">介绍</a></li>\n<li><a href=\"zh/declaration-files/by-example.md\">举例</a></li>\n<li><a href=\"zh/declaration-files/library-structures.md\">库结构</a></li>\n<li><a href=\"zh/declaration-files/templates.md\">模板</a></li>\n<li><a href=\"zh/declaration-files/do-s-and-don-ts.md\">最佳实践</a></li>\n<li><a href=\"zh/declaration-files/deep-dive.md\">深入</a></li>\n<li><a href=\"zh/declaration-files/publishing.md\">发布</a></li>\n<li><a href=\"zh/declaration-files/consumption.md\">使用</a></li>\n</ul>\n</li>\n<li>JavaScript<ul>\n<li><a href=\"zh/javascript/type-checking-javascript-files.md\">JavaScript文件里的类型检查</a></li>\n</ul>\n</li>\n<li><a href=\"zh/project-config/README.md\">工程配置</a><ul>\n<li><a href=\"zh/project-config/tsconfig.json.md\">tsconfig.json</a></li>\n<li><a href=\"zh/project-config/project-references.md\">工程引用</a></li>\n<li><a href=\"zh/project-config/typings-for-npm-packages.md\">NPM包的类型</a></li>\n<li><a href=\"zh/project-config/compiler-options.md\">编译选项</a></li>\n<li><a href=\"zh/project-config/configuring-watch.md\">配置 Watch</a></li>\n<li><a href=\"zh/project-config/compiler-options-in-msbuild.md\">在MSBuild里使用编译选项</a></li>\n<li><a href=\"zh/project-config/integrating-with-build-tools.md\">与其它构建工具整合</a></li>\n<li><a href=\"zh/project-config/nightly-builds.md\">使用TypeScript的每日构建版本</a></li>\n</ul>\n</li>\n<li><a href=\"zh/wiki/README.md\">Wiki</a><ul>\n<li><a href=\"zh/wiki/this-in-typescript.md\">TypeScript里的this</a></li>\n<li><a href=\"zh/wiki/coding_guidelines.md\">编码规范</a></li>\n<li><a href=\"zh/wiki/common-errors.md\">常见编译错误</a></li>\n<li><a href=\"zh/wiki/typescript-editor-support.md\">支持TypeScript的编辑器</a></li>\n<li><a href=\"zh/wiki/using-typescript-with-asp.net-5.md\">结合ASP.NET v5使用TypeScript</a></li>\n<li><a href=\"zh/wiki/architectural-overview.md\">架构概述</a></li>\n<li><a href=\"zh/wiki/roadmap.md\">发展路线图</a></li>\n</ul>\n</li>\n</ul>\n","text":"目录手册[[基础类型]][[接口]][[函数]][[字面量类型]][[类]][[枚举]][[泛型]]手册（进阶）高级类型实用工具类型Decorators声明合并Iterators 和 GeneratorsJSX混入模块模块解析命名空间命名空间和模块Symbols三斜线指令类型兼容","link":"","raw":null,"photos":[],"categories":[{"name":"typescript","slug":"typescript","count":8,"path":"api/categories/typescript.json"}],"tags":[{"name":"typescript","slug":"typescript","count":8,"path":"api/tags/typescript.json"}]},{"title":" 枚举","slug":"typescript/1c6b93719a","date":"2021-06-02T00:00:00.000Z","updated":"2021-06-17T11:25:09.047Z","comments":true,"path":"api/articles/typescript/1c6b93719a.json","excerpt":"<h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><p>使用枚举我们可以定义一些带名字的常量。 使用枚举可以清晰地表达意图或创建一组有区别的用例。 TypeScript支持数字的和基于字符串的枚举。</p>","keywords":null,"cover":null,"content":null,"text":"枚举使用枚举我们可以定义一些带名字的常量。 使用枚举可以清晰地表达意图或创建一组有区别的用例。 TypeScript支持数字的和基于字符串的枚举。数字枚举首先我们看看数字枚举，如果你使用过其它编程语言应该会很熟悉。enum Direction &#123;    Up = 1, ","link":"","raw":null,"photos":[],"categories":[{"name":"typescript","slug":"typescript","count":8,"path":"api/categories/typescript.json"}],"tags":[{"name":"typescript","slug":"typescript","count":8,"path":"api/tags/typescript.json"}]},{"title":" 基础类型","slug":"typescript/687b81d520","date":"2019-03-24T00:00:00.000Z","updated":"2021-06-17T11:25:09.047Z","comments":true,"path":"api/articles/typescript/687b81d520.json","excerpt":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>为了让程序有价值，我们需要能够处理最简单的数据单元：数字，字符串，结构体，布尔值等。 TypeScript支持与JavaScript几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用。</p>","keywords":null,"cover":null,"content":null,"text":"介绍为了让程序有价值，我们需要能够处理最简单的数据单元：数字，字符串，结构体，布尔值等。 TypeScript支持与JavaScript几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用。Boolean最基本的数据类型就是简单的true/false值，在JavaScrip","link":"","raw":null,"photos":[],"categories":[{"name":"typescript","slug":"typescript","count":8,"path":"api/categories/typescript.json"}],"tags":[{"name":"typescript","slug":"typescript","count":8,"path":"api/tags/typescript.json"}]},{"title":" 字面量类型","slug":"typescript/8f287486e1","date":"2021-04-03T00:00:00.000Z","updated":"2021-06-17T11:25:09.047Z","comments":true,"path":"api/articles/typescript/8f287486e1.json","excerpt":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>一个字面量是一个集体类型中更为具体的一种子类型。意思是：<code>&quot;Hello World&quot;</code> 是一个 <code>string</code>，但是一个 <code>string</code> 不是类型系统中的 <code>&quot;Hello World&quot;</code>。</p>\n<p>目前 TypeScript 中有三种可用的字面量类型集合，分别是：字符串、数字和布尔值。通过使用字面量类型，你可以规定一个字符串、数字或布尔值必须含有的确定值。</p>","keywords":null,"cover":null,"content":null,"text":"介绍一个字面量是一个集体类型中更为具体的一种子类型。意思是：&quot;Hello World&quot; 是一个 string，但是一个 string 不是类型系统中的 &quot;Hello World&quot;。目前 TypeScript 中有三种可用的字面量类型集合，分","link":"","raw":null,"photos":[],"categories":[{"name":"typescript","slug":"typescript","count":8,"path":"api/categories/typescript.json"}],"tags":[{"name":"typescript","slug":"typescript","count":8,"path":"api/tags/typescript.json"}]},{"title":" 泛型","slug":"typescript/c4dbac2ca2","date":"2021-06-03T00:00:00.000Z","updated":"2021-06-17T11:25:09.051Z","comments":true,"path":"api/articles/typescript/c4dbac2ca2.json","excerpt":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>软件工程中，我们不仅要创建一致的定义良好的API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。</p>\n<p>在像C#和Java这样的语言中，可以使用<code>泛型</code>来创建可重用的组件，一个组件可以支持多种类型的数据。 这样用户就可以以自己的数据类型来使用组件。</p>","keywords":null,"cover":null,"content":null,"text":"介绍软件工程中，我们不仅要创建一致的定义良好的API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。在像C#和Java这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。 ","link":"","raw":null,"photos":[],"categories":[{"name":"typescript","slug":"typescript","count":8,"path":"api/categories/typescript.json"}],"tags":[{"name":"typescript","slug":"typescript","count":8,"path":"api/tags/typescript.json"}]},{"title":" 函数","slug":"typescript/64fffd4364","date":"2021-01-28T00:00:00.000Z","updated":"2021-06-17T11:25:09.047Z","comments":true,"path":"api/articles/typescript/64fffd4364.json","excerpt":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>函数是JavaScript应用程序的基础。 它帮助你实现抽象层，模拟类，信息隐藏和模块。 在TypeScript里，虽然已经支持类，命名空间和模块，但函数仍然是主要的定义_行为_的地方。 TypeScript为JavaScript函数添加了额外的功能，让我们可以更容易地使用。</p>","keywords":null,"cover":null,"content":null,"text":"介绍函数是JavaScript应用程序的基础。 它帮助你实现抽象层，模拟类，信息隐藏和模块。 在TypeScript里，虽然已经支持类，命名空间和模块，但函数仍然是主要的定义_行为_的地方。 TypeScript为JavaScript函数添加了额外的功能，让我们可以更容易地使用。","link":"","raw":null,"photos":[],"categories":[{"name":"typescript","slug":"typescript","count":8,"path":"api/categories/typescript.json"}],"tags":[{"name":"typescript","slug":"typescript","count":8,"path":"api/tags/typescript.json"}]},{"title":" 类","slug":"typescript/98dfa9bae0","date":"2021-05-03T00:00:00.000Z","updated":"2021-06-17T11:25:09.047Z","comments":true,"path":"api/articles/typescript/98dfa9bae0.json","excerpt":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>传统的JavaScript程序使用函数和基于原型的继承来创建可重用的组件，但对于熟悉使用面向对象方式的程序员来讲就有些棘手，因为他们用的是基于类的继承并且对象是由类构建出来的。 从ECMAScript 2015，也就是ECMAScript 6开始，JavaScript程序员将能够使用基于类的面向对象的方式。 使用TypeScript，我们允许开发者现在就使用这些特性，并且编译后的JavaScript可以在所有主流浏览器和平台上运行，而不需要等到下个JavaScript版本。</p>","keywords":null,"cover":null,"content":null,"text":"介绍传统的JavaScript程序使用函数和基于原型的继承来创建可重用的组件，但对于熟悉使用面向对象方式的程序员来讲就有些棘手，因为他们用的是基于类的继承并且对象是由类构建出来的。 从ECMAScript 2015，也就是ECMAScript 6开始，JavaScript程序员将","link":"","raw":null,"photos":[],"categories":[{"name":"typescript","slug":"typescript","count":8,"path":"api/categories/typescript.json"}],"tags":[{"name":"typescript","slug":"typescript","count":8,"path":"api/tags/typescript.json"}]},{"title":" 接口","slug":"typescript/c4ab7b1814","date":"2021-06-03T00:00:00.000Z","updated":"2021-06-17T11:25:09.051Z","comments":true,"path":"api/articles/typescript/c4ab7b1814.json","excerpt":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>TypeScript 的核心原则之一是对值所具有的_结构_进行类型检查。 它有时被称做“鸭式辨型法”或“结构性子类型化”。 在 TypeScript 里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。</p>","keywords":null,"cover":null,"content":null,"text":"介绍TypeScript 的核心原则之一是对值所具有的_结构_进行类型检查。 它有时被称做“鸭式辨型法”或“结构性子类型化”。 在 TypeScript 里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。接口初探下面通过一个简单示例来观察接口是如何工作的：func","link":"","raw":null,"photos":[],"categories":[{"name":"typescript","slug":"typescript","count":8,"path":"api/categories/typescript.json"}],"tags":[{"name":"typescript","slug":"typescript","count":8,"path":"api/tags/typescript.json"}]}]}