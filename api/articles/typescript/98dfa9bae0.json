{"sort":45,"title":" 类","slug":"typescript/98dfa9bae0","date":"2021-05-03T00:00:00.000Z","updated":"2021-06-17T11:25:09.047Z","comments":true,"path":"api/articles/typescript/98dfa9bae0.json","photos":[],"link":"","excerpt":"介绍传统的JavaScript程序使用函数和基于原型的继承来创建可重用的组件，但对于熟悉使用面向对象方式的程序员来讲就有些棘手，因为他们用的是基于类的继承并且对象是由类构建出来的。 从ECMAScript 2015，也就是ECMAScript 6开始，JavaScript程序员将能够使用基于类的面向对象的方式。 使用TypeScript，我们允许开发者现在就使用这些特性，并且编译后的JavaScript可以在所有主流浏览器和平台上运行，而不需要等到下个JavaScript版本。","covers":null,"content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>传统的JavaScript程序使用函数和基于原型的继承来创建可重用的组件，但对于熟悉使用面向对象方式的程序员来讲就有些棘手，因为他们用的是基于类的继承并且对象是由类构建出来的。 从ECMAScript 2015，也就是ECMAScript 6开始，JavaScript程序员将能够使用基于类的面向对象的方式。 使用TypeScript，我们允许开发者现在就使用这些特性，并且编译后的JavaScript可以在所有主流浏览器和平台上运行，而不需要等到下个JavaScript版本。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h2><p>下面看一个使用类的例子：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Greeter</span> </span>&#123;\n    <span class=\"hljs-attr\">greeting</span>: <span class=\"hljs-built_in\">string</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">message: <span class=\"hljs-built_in\">string</span></span>)</span> &#123;\n        <span class=\"hljs-built_in\">this</span>.greeting = message;\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">greet</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Hello, &quot;</span> + <span class=\"hljs-built_in\">this</span>.greeting;\n    &#125;\n&#125;\n\n<span class=\"hljs-keyword\">let</span> greeter = <span class=\"hljs-keyword\">new</span> Greeter(<span class=\"hljs-string\">&quot;world&quot;</span>);</code></pre>\n\n<p>如果你使用过C#或Java，你会对这种语法非常熟悉。 我们声明一个<code>Greeter</code>类。这个类有3个成员：一个叫做<code>greeting</code>的属性，一个构造函数和一个<code>greet</code>方法。</p>\n<p>你会注意到，我们在引用任何一个类成员的时候都用了<code>this</code>。 它表示我们访问的是类的成员。</p>\n<p>最后一行，我们使用<code>new</code>构造了<code>Greeter</code>类的一个实例。 它会调用之前定义的构造函数，创建一个<code>Greeter</code>类型的新对象，并执行构造函数初始化它。</p>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>在TypeScript里，我们可以使用常用的面向对象模式。 基于类的程序设计中一种最基本的模式是允许使用继承来扩展现有的类。</p>\n<p>看下面的例子：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">move</span>(<span class=\"hljs-params\">distanceInMeters: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">0</span></span>)</span> &#123;\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Animal moved <span class=\"hljs-subst\">$&#123;distanceInMeters&#125;</span>m.`</span>);\n    &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Dog</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Animal</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">bark</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;Woof! Woof!&#x27;</span>);\n    &#125;\n&#125;\n\n<span class=\"hljs-keyword\">const</span> dog = <span class=\"hljs-keyword\">new</span> Dog();\ndog.bark();\ndog.move(<span class=\"hljs-number\">10</span>);\ndog.bark();</code></pre>\n\n<p>这个例子展示了最基本的继承：类从基类中继承了属性和方法。 这里，<code>Dog</code>是一个_派生类_，它派生自<code>Animal</code><em>基类</em>，通过<code>extends</code>关键字。 派生类通常被称作_子类_，基类通常被称作_超类_。</p>\n<p>因为<code>Dog</code>继承了<code>Animal</code>的功能，因此我们可以创建一个<code>Dog</code>的实例，它能够<code>bark()</code>和<code>move()</code>。</p>\n<p>下面我们来看个更加复杂的例子。</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span> </span>&#123;\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">theName: <span class=\"hljs-built_in\">string</span></span>)</span> &#123; <span class=\"hljs-built_in\">this</span>.name = theName; &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">move</span>(<span class=\"hljs-params\">distanceInMeters: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">0</span></span>)</span> &#123;\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span> moved <span class=\"hljs-subst\">$&#123;distanceInMeters&#125;</span>m.`</span>);\n    &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Snake</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Animal</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name: <span class=\"hljs-built_in\">string</span></span>)</span> &#123; <span class=\"hljs-built_in\">super</span>(name); &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">move</span>(<span class=\"hljs-params\">distanceInMeters = <span class=\"hljs-number\">5</span></span>)</span> &#123;\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;Slithering...&quot;</span>);\n        <span class=\"hljs-built_in\">super</span>.move(distanceInMeters);\n    &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Horse</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Animal</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name: <span class=\"hljs-built_in\">string</span></span>)</span> &#123; <span class=\"hljs-built_in\">super</span>(name); &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">move</span>(<span class=\"hljs-params\">distanceInMeters = <span class=\"hljs-number\">45</span></span>)</span> &#123;\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;Galloping...&quot;</span>);\n        <span class=\"hljs-built_in\">super</span>.move(distanceInMeters);\n    &#125;\n&#125;\n\n<span class=\"hljs-keyword\">let</span> sam = <span class=\"hljs-keyword\">new</span> Snake(<span class=\"hljs-string\">&quot;Sammy the Python&quot;</span>);\n<span class=\"hljs-keyword\">let</span> tom: Animal = <span class=\"hljs-keyword\">new</span> Horse(<span class=\"hljs-string\">&quot;Tommy the Palomino&quot;</span>);\n\nsam.move();\ntom.move(<span class=\"hljs-number\">34</span>);</code></pre>\n\n<p>这个例子展示了一些上面没有提到的特性。 这一次，我们使用<code>extends</code>关键字创建了<code>Animal</code>的两个子类：<code>Horse</code>和<code>Snake</code>。</p>\n<p>与前一个例子的不同点是，派生类包含了一个构造函数，它_必须_调用<code>super()</code>，它会执行基类的构造函数。 而且，在构造函数里访问<code>this</code>的属性之前，我们_一定_要调用<code>super()</code>。 这个是TypeScript强制执行的一条重要规则。</p>\n<p>这个例子演示了如何在子类里可以重写父类的方法。 <code>Snake</code>类和<code>Horse</code>类都创建了<code>move</code>方法，它们重写了从<code>Animal</code>继承来的<code>move</code>方法，使得<code>move</code>方法根据不同的类而具有不同的功能。 注意，即使<code>tom</code>被声明为<code>Animal</code>类型，但因为它的值是<code>Horse</code>，调用<code>tom.move(34)</code>时，它会调用<code>Horse</code>里重写的方法：</p>\n<pre><code class=\"hljs text\">Slithering...\nSammy the Python moved 5m.\nGalloping...\nTommy the Palomino moved 34m.</code></pre>\n\n<h2 id=\"公共，私有与受保护的修饰符\"><a href=\"#公共，私有与受保护的修饰符\" class=\"headerlink\" title=\"公共，私有与受保护的修饰符\"></a>公共，私有与受保护的修饰符</h2><h3 id=\"默认为public\"><a href=\"#默认为public\" class=\"headerlink\" title=\"默认为public\"></a>默认为<code>public</code></h3><p>在上面的例子里，我们可以自由的访问程序里定义的成员。 如果你对其它语言中的类比较了解，就会注意到我们在之前的代码里并没有使用<code>public</code>来做修饰；例如，C#要求必须明确地使用<code>public</code>指定成员是可见的。 在TypeScript里，成员都默认为<code>public</code>。</p>\n<p>你也可以明确的将一个成员标记成<code>public</code>。 我们可以用下面的方式来重写上面的<code>Animal</code>类：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span> </span>&#123;\n    <span class=\"hljs-keyword\">public</span> name: <span class=\"hljs-built_in\">string</span>;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">theName: <span class=\"hljs-built_in\">string</span></span>)</span> &#123; <span class=\"hljs-built_in\">this</span>.name = theName; &#125;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-title\">move</span>(<span class=\"hljs-params\">distanceInMeters: <span class=\"hljs-built_in\">number</span></span>)</span> &#123;\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span> moved <span class=\"hljs-subst\">$&#123;distanceInMeters&#125;</span>m.`</span>);\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"理解private\"><a href=\"#理解private\" class=\"headerlink\" title=\"理解private\"></a>理解<code>private</code></h3><p>当成员被标记成<code>private</code>时，它就不能在声明它的类的外部访问。比如：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span> </span>&#123;\n    <span class=\"hljs-keyword\">private</span> name: <span class=\"hljs-built_in\">string</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">theName: <span class=\"hljs-built_in\">string</span></span>)</span> &#123; <span class=\"hljs-built_in\">this</span>.name = theName; &#125;\n&#125;\n\n<span class=\"hljs-keyword\">new</span> Animal(<span class=\"hljs-string\">&quot;Cat&quot;</span>).name; <span class=\"hljs-comment\">// 错误: &#x27;name&#x27; 是私有的.</span></code></pre>\n\n<p>TypeScript使用的是结构性类型系统。 当我们比较两种不同的类型时，并不在乎它们从何处而来，如果所有成员的类型都是兼容的，我们就认为它们的类型是兼容的。</p>\n<p>然而，当我们比较带有<code>private</code>或<code>protected</code>成员的类型的时候，情况就不同了。 如果其中一个类型里包含一个<code>private</code>成员，那么只有当另外一个类型中也存在这样一个<code>private</code>成员， 并且它们都是来自同一处声明时，我们才认为这两个类型是兼容的。 对于<code>protected</code>成员也使用这个规则。</p>\n<p>下面来看一个例子，更好地说明了这一点：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span> </span>&#123;\n    <span class=\"hljs-keyword\">private</span> name: <span class=\"hljs-built_in\">string</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">theName: <span class=\"hljs-built_in\">string</span></span>)</span> &#123; <span class=\"hljs-built_in\">this</span>.name = theName; &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Rhino</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Animal</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> &#123; <span class=\"hljs-built_in\">super</span>(<span class=\"hljs-string\">&quot;Rhino&quot;</span>); &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Employee</span> </span>&#123;\n    <span class=\"hljs-keyword\">private</span> name: <span class=\"hljs-built_in\">string</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">theName: <span class=\"hljs-built_in\">string</span></span>)</span> &#123; <span class=\"hljs-built_in\">this</span>.name = theName; &#125;\n&#125;\n\n<span class=\"hljs-keyword\">let</span> animal = <span class=\"hljs-keyword\">new</span> Animal(<span class=\"hljs-string\">&quot;Goat&quot;</span>);\n<span class=\"hljs-keyword\">let</span> rhino = <span class=\"hljs-keyword\">new</span> Rhino();\n<span class=\"hljs-keyword\">let</span> employee = <span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-string\">&quot;Bob&quot;</span>);\n\nanimal = rhino;\nanimal = employee; <span class=\"hljs-comment\">// 错误: Animal 与 Employee 不兼容.</span></code></pre>\n\n<p>这个例子中有<code>Animal</code>和<code>Rhino</code>两个类，<code>Rhino</code>是<code>Animal</code>类的子类。 还有一个<code>Employee</code>类，其类型看上去与<code>Animal</code>是相同的。 我们创建了几个这些类的实例，并相互赋值来看看会发生什么。 因为<code>Animal</code>和<code>Rhino</code>共享了来自<code>Animal</code>里的私有成员定义<code>private name: string</code>，因此它们是兼容的。 然而<code>Employee</code>却不是这样。当把<code>Employee</code>赋值给<code>Animal</code>的时候，得到一个错误，说它们的类型不兼容。 尽管<code>Employee</code>里也有一个私有成员<code>name</code>，但它明显不是<code>Animal</code>里面定义的那个。</p>\n<h3 id=\"理解protected\"><a href=\"#理解protected\" class=\"headerlink\" title=\"理解protected\"></a>理解<code>protected</code></h3><p><code>protected</code>修饰符与<code>private</code>修饰符的行为很相似，但有一点不同，<code>protected</code>成员在派生类中仍然可以访问。例如：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span> </span>&#123;\n    <span class=\"hljs-keyword\">protected</span> name: <span class=\"hljs-built_in\">string</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name: <span class=\"hljs-built_in\">string</span></span>)</span> &#123; <span class=\"hljs-built_in\">this</span>.name = name; &#125;\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Employee</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Person</span> </span>&#123;\n    <span class=\"hljs-keyword\">private</span> department: <span class=\"hljs-built_in\">string</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name: <span class=\"hljs-built_in\">string</span>, department: <span class=\"hljs-built_in\">string</span></span>)</span> &#123;\n        <span class=\"hljs-built_in\">super</span>(name)\n        <span class=\"hljs-built_in\">this</span>.department = department;\n    &#125;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-title\">getElevatorPitch</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Hello, my name is <span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span> and I work in <span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.department&#125;</span>.`</span>;\n    &#125;\n&#125;\n\n<span class=\"hljs-keyword\">let</span> howard = <span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-string\">&quot;Howard&quot;</span>, <span class=\"hljs-string\">&quot;Sales&quot;</span>);\n<span class=\"hljs-built_in\">console</span>.log(howard.getElevatorPitch());\n<span class=\"hljs-built_in\">console</span>.log(howard.name); <span class=\"hljs-comment\">// 错误</span></code></pre>\n\n<p>注意，我们不能在<code>Person</code>类外使用<code>name</code>，但是我们仍然可以通过<code>Employee</code>类的实例方法访问，因为<code>Employee</code>是由<code>Person</code>派生而来的。</p>\n<p>构造函数也可以被标记成<code>protected</code>。 这意味着这个类不能在包含它的类外被实例化，但是能被继承。比如，</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span> </span>&#123;\n    <span class=\"hljs-keyword\">protected</span> name: <span class=\"hljs-built_in\">string</span>;\n    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">theName: <span class=\"hljs-built_in\">string</span></span>)</span> &#123; <span class=\"hljs-built_in\">this</span>.name = theName; &#125;\n&#125;\n\n<span class=\"hljs-comment\">// Employee 能够继承 Person</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Employee</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Person</span> </span>&#123;\n    <span class=\"hljs-keyword\">private</span> department: <span class=\"hljs-built_in\">string</span>;\n\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name: <span class=\"hljs-built_in\">string</span>, department: <span class=\"hljs-built_in\">string</span></span>)</span> &#123;\n        <span class=\"hljs-built_in\">super</span>(name);\n        <span class=\"hljs-built_in\">this</span>.department = department;\n    &#125;\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-title\">getElevatorPitch</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`Hello, my name is <span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span> and I work in <span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.department&#125;</span>.`</span>;\n    &#125;\n&#125;\n\n<span class=\"hljs-keyword\">let</span> howard = <span class=\"hljs-keyword\">new</span> Employee(<span class=\"hljs-string\">&quot;Howard&quot;</span>, <span class=\"hljs-string\">&quot;Sales&quot;</span>);\n<span class=\"hljs-keyword\">let</span> john = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">&quot;John&quot;</span>); <span class=\"hljs-comment\">// 错误: &#x27;Person&#x27; 的构造函数是被保护的.</span></code></pre>\n\n<h2 id=\"readonly修饰符\"><a href=\"#readonly修饰符\" class=\"headerlink\" title=\"readonly修饰符\"></a>readonly修饰符</h2><p>你可以使用<code>readonly</code>关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化。</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Octopus</span> </span>&#123;\n    <span class=\"hljs-keyword\">readonly</span> name: <span class=\"hljs-built_in\">string</span>;\n    <span class=\"hljs-keyword\">readonly</span> numberOfLegs: <span class=\"hljs-built_in\">number</span> = <span class=\"hljs-number\">8</span>;\n    <span class=\"hljs-title\">constructor</span> (<span class=\"hljs-params\">theName: <span class=\"hljs-built_in\">string</span></span>) &#123;\n        <span class=\"hljs-built_in\">this</span>.name = theName;\n    &#125;\n&#125;\n<span class=\"hljs-keyword\">let</span> dad = <span class=\"hljs-keyword\">new</span> Octopus(<span class=\"hljs-string\">&quot;Man with the 8 strong legs&quot;</span>);\ndad.name = <span class=\"hljs-string\">&quot;Man with the 3-piece suit&quot;</span>; <span class=\"hljs-comment\">// 错误! name 是只读的.</span></code></pre>\n\n<h3 id=\"参数属性\"><a href=\"#参数属性\" class=\"headerlink\" title=\"参数属性\"></a>参数属性</h3><p>在上面的例子中，我们不得不在在<code>Person</code>类里定义一个只读成员<code>name</code>和一个构造函数参数<code>theName</code>。这样做是为了在<code>Octopus</code>构造函数被执行后，就可以访问<code>theName</code>的值。 这种情况经常会遇到。_参数属性_可以方便地让我们在一个地方定义并初始化一个成员。 下面的例子是对之前<code>Animal</code>类的修改版，使用了参数属性：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span> </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> name: <span class=\"hljs-built_in\">string</span></span>)</span> &#123; &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">move</span>(<span class=\"hljs-params\">distanceInMeters: <span class=\"hljs-built_in\">number</span></span>)</span> &#123;\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">this</span>.name&#125;</span> moved <span class=\"hljs-subst\">$&#123;distanceInMeters&#125;</span>m.`</span>);\n    &#125;\n&#125;</code></pre>\n\n<p>注意看我们是如何舍弃了<code>theName</code>，仅在构造函数里使用<code>private name: string</code>参数来创建和初始化<code>name</code>成员。 我们把声明和赋值合并至一处。</p>\n<p>参数属性通过给构造函数参数添加一个访问限定符来声明。 使用<code>private</code>限定一个参数属性会声明并初始化一个私有成员；对于<code>public</code>和<code>protected</code>来说也是一样。</p>\n<h2 id=\"存取器\"><a href=\"#存取器\" class=\"headerlink\" title=\"存取器\"></a>存取器</h2><p>TypeScript支持通过getters/setters来截取对对象成员的访问。 它能帮助你有效的控制对对象成员的访问。</p>\n<p>下面来看如何把一个简单的类改写成使用<code>get</code>和<code>set</code>。 首先，我们从一个没有使用存取器的例子开始。</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Employee</span> </span>&#123;\n    <span class=\"hljs-attr\">fullName</span>: <span class=\"hljs-built_in\">string</span>;\n&#125;\n\n<span class=\"hljs-keyword\">let</span> employee = <span class=\"hljs-keyword\">new</span> Employee();\nemployee.fullName = <span class=\"hljs-string\">&quot;Bob Smith&quot;</span>;\n<span class=\"hljs-keyword\">if</span> (employee.fullName) &#123;\n    <span class=\"hljs-built_in\">console</span>.log(employee.fullName);\n&#125;</code></pre>\n\n<p>允许随意设置<code>fullName</code>虽然方便，但是我们仍想在设置<code>fullName</code>强制执行某些约束。</p>\n<p>在这个版本里，我们添加一个<code>setter</code>来检查<code>newName</code>的长度，以确保它满足数据库字段的最大长度限制。若它不满足，那么我们就抛一个错误来告诉客户端出错了。</p>\n<p>为保留原有的功能，我们同时添加一个<code>getter</code>用来读取<code>fullName</code>。</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">const</span> fullNameMaxLength = <span class=\"hljs-number\">10</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Employee</span> </span>&#123;\n    <span class=\"hljs-keyword\">private</span> _fullName: <span class=\"hljs-built_in\">string</span>;\n\n    <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title\">fullName</span>(): <span class=\"hljs-title\">string</span> &#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>._fullName;\n    &#125;\n\n    <span class=\"hljs-keyword\">set</span> <span class=\"hljs-title\">fullName</span>(<span class=\"hljs-params\">newName: <span class=\"hljs-built_in\">string</span></span>) &#123;\n        <span class=\"hljs-keyword\">if</span> (newName &amp;&amp; newName.length &gt; fullNameMaxLength) &#123;\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&quot;fullName has a max length of &quot;</span> + fullNameMaxLength);\n        &#125;\n\n        <span class=\"hljs-built_in\">this</span>._fullName = newName;\n    &#125;\n&#125;\n\n<span class=\"hljs-keyword\">let</span> employee = <span class=\"hljs-keyword\">new</span> Employee();\nemployee.fullName = <span class=\"hljs-string\">&quot;Bob Smith&quot;</span>;\n<span class=\"hljs-keyword\">if</span> (employee.fullName) &#123;\n    alert(employee.fullName);\n&#125;</code></pre>\n\n<p>为证明我们写的存取器现在能检查长度，我们可以给名字赋一个长度大于<code>10</code>字符的值，并验证是否得到一个错误。</p>\n<p>对于存取器有下面几点需要注意的：</p>\n<p>首先，存取器要求你将编译器设置为输出ECMAScript 5或更高。 不支持降级到ECMAScript 3。 其次，只带有<code>get</code>不带有<code>set</code>的存取器自动被推断为<code>readonly</code>。 这在从代码生成<code>.d.ts</code>文件时是有帮助的，因为利用这个属性的用户会看到不允许够改变它的值。</p>\n<h2 id=\"静态属性\"><a href=\"#静态属性\" class=\"headerlink\" title=\"静态属性\"></a>静态属性</h2><p>到目前为止，我们只讨论了类的实例成员，那些仅当类被实例化的时候才会被初始化的属性。 我们也可以创建类的静态成员，这些属性存在于类本身上面而不是类的实例上。 在这个例子里，我们使用<code>static</code>定义<code>origin</code>，因为它是所有网格都会用到的属性。 每个实例想要访问这个属性的时候，都要在<code>origin</code>前面加上类名。 如同在实例属性上使用<code>this.</code>前缀来访问属性一样，这里我们使用<code>Grid.</code>来访问静态属性。</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Grid</span> </span>&#123;\n    <span class=\"hljs-keyword\">static</span> origin = &#123;<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">0</span>&#125;;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">calculateDistanceFromOrigin</span>(<span class=\"hljs-params\">point: &#123;x: <span class=\"hljs-built_in\">number</span>; y: <span class=\"hljs-built_in\">number</span>;&#125;</span>)</span> &#123;\n        <span class=\"hljs-keyword\">let</span> xDist = (point.x - Grid.origin.x);\n        <span class=\"hljs-keyword\">let</span> yDist = (point.y - Grid.origin.y);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.sqrt(xDist * xDist + yDist * yDist) / <span class=\"hljs-built_in\">this</span>.scale;\n    &#125;\n    <span class=\"hljs-title\">constructor</span> (<span class=\"hljs-params\"><span class=\"hljs-keyword\">public</span> scale: <span class=\"hljs-built_in\">number</span></span>) &#123; &#125;\n&#125;\n\n<span class=\"hljs-keyword\">let</span> grid1 = <span class=\"hljs-keyword\">new</span> Grid(<span class=\"hljs-number\">1.0</span>);  <span class=\"hljs-comment\">// 1x scale</span>\n<span class=\"hljs-keyword\">let</span> grid2 = <span class=\"hljs-keyword\">new</span> Grid(<span class=\"hljs-number\">5.0</span>);  <span class=\"hljs-comment\">// 5x scale</span>\n\n<span class=\"hljs-built_in\">console</span>.log(grid1.calculateDistanceFromOrigin(&#123;<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">10</span>&#125;));\n<span class=\"hljs-built_in\">console</span>.log(grid2.calculateDistanceFromOrigin(&#123;<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">10</span>&#125;));</code></pre>\n\n<h2 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h2><p>抽象类做为其它派生类的基类使用。 它们一般不会直接被实例化。 不同于接口，抽象类可以包含成员的实现细节（抽象类中除抽象函数之外，其他函数可以包含具体实现）。 <code>abstract</code>关键字是用于定义抽象类和在抽象类内部定义抽象方法。</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span> </span>&#123;\n    <span class=\"hljs-keyword\">abstract</span> makeSound(): <span class=\"hljs-built_in\">void</span>;\n    move(): <span class=\"hljs-built_in\">void</span> &#123;\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;roaming the earth...&quot;</span>);\n    &#125;\n&#125;</code></pre>\n\n<p>抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。 抽象方法的语法与接口方法相似。 两者都是定义方法签名但不包含方法体。 然而，抽象方法必须包含<code>abstract</code>关键字并且可以包含访问修饰符。</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Department</span> </span>&#123;\n\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">public</span> name: <span class=\"hljs-built_in\">string</span></span>)</span> &#123;\n    &#125;\n\n    printName(): <span class=\"hljs-built_in\">void</span> &#123;\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;Department name: &#x27;</span> + <span class=\"hljs-built_in\">this</span>.name);\n    &#125;\n\n    <span class=\"hljs-keyword\">abstract</span> printMeeting(): <span class=\"hljs-built_in\">void</span>; <span class=\"hljs-comment\">// 必须在派生类中实现</span>\n&#125;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AccountingDepartment</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Department</span> </span>&#123;\n\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n        <span class=\"hljs-built_in\">super</span>(<span class=\"hljs-string\">&#x27;Accounting and Auditing&#x27;</span>); <span class=\"hljs-comment\">// 在派生类的构造函数中必须调用 super()</span>\n    &#125;\n\n    printMeeting(): <span class=\"hljs-built_in\">void</span> &#123;\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;The Accounting Department meets each Monday at 10am.&#x27;</span>);\n    &#125;\n\n    generateReports(): <span class=\"hljs-built_in\">void</span> &#123;\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;Generating accounting reports...&#x27;</span>);\n    &#125;\n&#125;\n\n<span class=\"hljs-keyword\">let</span> department: Department; <span class=\"hljs-comment\">// 允许创建一个对抽象类型的引用</span>\ndepartment = <span class=\"hljs-keyword\">new</span> Department(); <span class=\"hljs-comment\">// 错误: 不能创建一个抽象类的实例</span>\ndepartment = <span class=\"hljs-keyword\">new</span> AccountingDepartment(); <span class=\"hljs-comment\">// 允许对一个抽象子类进行实例化和赋值</span>\ndepartment.printName();\ndepartment.printMeeting();\ndepartment.generateReports(); <span class=\"hljs-comment\">// 错误: 方法在声明的抽象类中不存在</span></code></pre>\n\n<h2 id=\"高级技巧\"><a href=\"#高级技巧\" class=\"headerlink\" title=\"高级技巧\"></a>高级技巧</h2><h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p>当你在TypeScript里声明了一个类的时候，实际上同时声明了很多东西。 首先就是类的_实例_的类型。</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Greeter</span> </span>&#123;\n    <span class=\"hljs-attr\">greeting</span>: <span class=\"hljs-built_in\">string</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">message: <span class=\"hljs-built_in\">string</span></span>)</span> &#123;\n        <span class=\"hljs-built_in\">this</span>.greeting = message;\n    &#125;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">greet</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Hello, &quot;</span> + <span class=\"hljs-built_in\">this</span>.greeting;\n    &#125;\n&#125;\n\n<span class=\"hljs-keyword\">let</span> greeter: Greeter;\ngreeter = <span class=\"hljs-keyword\">new</span> Greeter(<span class=\"hljs-string\">&quot;world&quot;</span>);\n<span class=\"hljs-built_in\">console</span>.log(greeter.greet());</code></pre>\n\n<p>这里，我们写了<code>let greeter: Greeter</code>，意思是<code>Greeter</code>类的实例的类型是<code>Greeter</code>。 这对于用过其它面向对象语言的程序员来讲已经是老习惯了。</p>\n<p>我们也创建了一个叫做_构造函数_的值。 这个函数会在我们使用<code>new</code>创建类实例的时候被调用。 下面我们来看看，上面的代码被编译成JavaScript后是什么样子的：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">let</span> Greeter = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Greeter</span>(<span class=\"hljs-params\">message</span>) </span>&#123;\n        <span class=\"hljs-built_in\">this</span>.greeting = message;\n    &#125;\n    Greeter.prototype.greet = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Hello, &quot;</span> + <span class=\"hljs-built_in\">this</span>.greeting;\n    &#125;;\n    <span class=\"hljs-keyword\">return</span> Greeter;\n&#125;)();\n\n<span class=\"hljs-keyword\">let</span> greeter;\ngreeter = <span class=\"hljs-keyword\">new</span> Greeter(<span class=\"hljs-string\">&quot;world&quot;</span>);\n<span class=\"hljs-built_in\">console</span>.log(greeter.greet());</code></pre>\n\n<p>上面的代码里，<code>let Greeter</code>将被赋值为构造函数。 当我们调用<code>new</code>并执行了这个函数后，便会得到一个类的实例。 这个构造函数也包含了类的所有静态属性。 换个角度说，我们可以认为类具有_实例部分_与_静态部分_这两个部分。</p>\n<p>让我们稍微改写一下这个例子，看看它们之间的区别：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Greeter</span> </span>&#123;\n    <span class=\"hljs-keyword\">static</span> standardGreeting = <span class=\"hljs-string\">&quot;Hello, there&quot;</span>;\n    greeting: <span class=\"hljs-built_in\">string</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">greet</span>(<span class=\"hljs-params\"></span>)</span> &#123;\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.greeting) &#123;\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Hello, &quot;</span> + <span class=\"hljs-built_in\">this</span>.greeting;\n        &#125;\n        <span class=\"hljs-keyword\">else</span> &#123;\n            <span class=\"hljs-keyword\">return</span> Greeter.standardGreeting;\n        &#125;\n    &#125;\n&#125;\n\n<span class=\"hljs-keyword\">let</span> greeter1: Greeter;\ngreeter1 = <span class=\"hljs-keyword\">new</span> Greeter();\n<span class=\"hljs-built_in\">console</span>.log(greeter1.greet());\n\n<span class=\"hljs-keyword\">let</span> greeterMaker: <span class=\"hljs-keyword\">typeof</span> Greeter = Greeter;\ngreeterMaker.standardGreeting = <span class=\"hljs-string\">&quot;Hey there!&quot;</span>;\n\n<span class=\"hljs-keyword\">let</span> greeter2: Greeter = <span class=\"hljs-keyword\">new</span> greeterMaker();\n<span class=\"hljs-built_in\">console</span>.log(greeter2.greet());</code></pre>\n\n<p>这个例子里，<code>greeter1</code>与之前看到的一样。 我们实例化<code>Greeter</code>类，并使用这个对象。 与我们之前看到的一样。</p>\n<p>再之后，我们直接使用类。 我们创建了一个叫做<code>greeterMaker</code>的变量。 这个变量保存了这个类或者说保存了类构造函数。 然后我们使用<code>typeof Greeter</code>，意思是取Greeter类的类型，而不是实例的类型。 或者更确切的说，”告诉我<code>Greeter</code>标识符的类型”，也就是构造函数的类型。 这个类型包含了类的所有静态成员和构造函数。 之后，就和前面一样，我们在<code>greeterMaker</code>上使用<code>new</code>，创建<code>Greeter</code>的实例。</p>\n<h3 id=\"把类当做接口使用\"><a href=\"#把类当做接口使用\" class=\"headerlink\" title=\"把类当做接口使用\"></a>把类当做接口使用</h3><p>如上一节里所讲的，类定义会创建两个东西：类的实例类型和一个构造函数。 因为类可以创建出类型，所以你能够在允许使用接口的地方使用类。</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Point</span> </span>&#123;\n    <span class=\"hljs-attr\">x</span>: <span class=\"hljs-built_in\">number</span>;\n    y: <span class=\"hljs-built_in\">number</span>;\n&#125;\n\n<span class=\"hljs-keyword\">interface</span> Point3d <span class=\"hljs-keyword\">extends</span> Point &#123;\n    <span class=\"hljs-attr\">z</span>: <span class=\"hljs-built_in\">number</span>;\n&#125;\n\n<span class=\"hljs-keyword\">let</span> point3d: Point3d = &#123;<span class=\"hljs-attr\">x</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">z</span>: <span class=\"hljs-number\">3</span>&#125;;</code></pre>\n\n","prev":{"title":" ios 提醒事项同步日历快捷指令脚本","slug":"other/6238c21f55"},"next":{"title":" JavaScript里的循环方法：forEach，for-in，for-of","slug":"javascript/cbbeb436fb"},"categories":[{"name":"typescript","slug":"typescript","count":8,"path":"api/categories/typescript.json"}],"tags":[{"name":"typescript","slug":"typescript","count":8,"path":"api/tags/typescript.json"}]}