{"sort":42,"title":" 字面量类型","slug":"typescript/8f287486e1","date":"2021-04-03T00:00:00.000Z","updated":"2021-06-17T11:25:09.047Z","comments":true,"path":"api/articles/typescript/8f287486e1.json","photos":[],"link":"","excerpt":"介绍一个字面量是一个集体类型中更为具体的一种子类型。意思是：&quot;Hello World&quot; 是一个 string，但是一个 string 不是类型系统中的 &quot;Hello World&quot;。目前 TypeScript 中有三种可用的字面量类型集合，分别是：字符串、数字和布尔值。通过使用字面量类型，你可以规定一个字符串、数字或布尔值必须含有的确定值。","covers":null,"content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>一个字面量是一个集体类型中更为具体的一种子类型。意思是：<code>&quot;Hello World&quot;</code> 是一个 <code>string</code>，但是一个 <code>string</code> 不是类型系统中的 <code>&quot;Hello World&quot;</code>。</p>\n<p>目前 TypeScript 中有三种可用的字面量类型集合，分别是：字符串、数字和布尔值。通过使用字面量类型，你可以规定一个字符串、数字或布尔值必须含有的确定值。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"字面量收窄\"><a href=\"#字面量收窄\" class=\"headerlink\" title=\"字面量收窄\"></a>字面量收窄</h2><p>当你通过 <code>var</code> 或 <code>let</code> 来声明一个变量时，实际上你在告诉编译器这个变量中的内容有可能会被改变。与之相对地，用 <code>const</code> 来声明对象会让 TypeScript 知道这个对象永远不会被改变。</p>\n<pre><code class=\"hljs TypeScript\"><span class=\"hljs-comment\">// We&#x27;re making a guarantee that this variable</span>\n<span class=\"hljs-comment\">// helloWorld will never change, by using const.</span>\n\n<span class=\"hljs-comment\">// So, TypeScript sets the type to be &quot;Hello World&quot; not string</span>\n<span class=\"hljs-keyword\">const</span> helloWorld = <span class=\"hljs-string\">&quot;Hello World&quot;</span>;\n\n<span class=\"hljs-comment\">// On the other hand, a let can change, and so the compiler declares it a string</span>\n<span class=\"hljs-keyword\">let</span> hiWorld = <span class=\"hljs-string\">&quot;Hi World&quot;</span>;</code></pre>\n\n<p>从无穷多种可能的例子（<code>string</code> 变量的值有无穷多种）到一个更小、确定数量的例子（在上述例子中，<code>&quot;Hello Wrold&quot;</code> 的可能值只有一种）的过程就叫收窄。</p>\n<h2 id=\"字符串字面量类型\"><a href=\"#字符串字面量类型\" class=\"headerlink\" title=\"字符串字面量类型\"></a>字符串字面量类型</h2><p>字面量类型可以通过联合联系、类型守卫、类型别名来结合实际字符串值。通过这些特性，我们可以获取一种字符串并使其有类似枚举（enum）的行为。</p>\n<pre><code class=\"hljs TypeScript\"><span class=\"hljs-keyword\">type</span> Easing = <span class=\"hljs-string\">&quot;ease-in&quot;</span> | <span class=\"hljs-string\">&quot;ease-out&quot;</span> | <span class=\"hljs-string\">&quot;ease-in-out&quot;</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UIElement</span> </span>&#123;\n  <span class=\"hljs-function\"><span class=\"hljs-title\">animate</span>(<span class=\"hljs-params\">dx: <span class=\"hljs-built_in\">number</span>, dy: <span class=\"hljs-built_in\">number</span>, easing: Easing</span>)</span> &#123;\n    <span class=\"hljs-keyword\">if</span> (easing === <span class=\"hljs-string\">&quot;ease-in&quot;</span>) &#123;\n      <span class=\"hljs-comment\">// ...</span>\n    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (easing === <span class=\"hljs-string\">&quot;ease-out&quot;</span>) &#123;\n    &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (easing === <span class=\"hljs-string\">&quot;ease-in-out&quot;</span>) &#123;\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n      <span class=\"hljs-comment\">// It&#x27;s possible that someone could reach this</span>\n      <span class=\"hljs-comment\">// by ignoring your types though.</span>\n    &#125;\n  &#125;\n&#125;\n\n<span class=\"hljs-keyword\">let</span> button = <span class=\"hljs-keyword\">new</span> UIElement();\nbutton.animate(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;ease-in&quot;</span>);\nbutton.animate(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;uneasy&quot;</span>);\n<span class=\"hljs-comment\">// Error: Argument of type &#x27;&quot;uneasy&quot;&#x27; is not assignable to parameter of type &#x27;Easing&#x27;.</span></code></pre>\n\n<p>你可以传递三种允许的字符串，但是如果传递其他的字符串会收到如下错误：</p>\n<pre><code class=\"hljs TypeScript\">Argument <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">type</span> <span class=\"hljs-string\">&#x27;&quot;uneasy&quot;&#x27;</span> is not assignable to parameter <span class=\"hljs-keyword\">of</span> <span class=\"hljs-keyword\">type</span> <span class=\"hljs-string\">&#x27;&quot;ease-in&quot; | &quot;ease-out&quot; | &quot;ease-in-out&quot;&#x27;</span></code></pre>\n\n<p>字符串字面可以通过相同的方式用来分别重载：</p>\n<pre><code class=\"hljs TypeScript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createElement</span>(<span class=\"hljs-params\">tagName: <span class=\"hljs-string\">&quot;img&quot;</span></span>): <span class=\"hljs-title\">HTMLImageElement</span></span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createElement</span>(<span class=\"hljs-params\">tagName: <span class=\"hljs-string\">&quot;input&quot;</span></span>): <span class=\"hljs-title\">HTMLInputElement</span></span>;\n<span class=\"hljs-comment\">// ... more overloads ...</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createElement</span>(<span class=\"hljs-params\">tagName: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-title\">Element</span> </span>&#123;\n  <span class=\"hljs-comment\">// ... code goes here ...</span>\n&#125;</code></pre>\n\n<h2 id=\"数字字面量类型\"><a href=\"#数字字面量类型\" class=\"headerlink\" title=\"数字字面量类型\"></a>数字字面量类型</h2><p>TypeScript 还有数字字面量类型，它的行为和上述字符串字面量类型相同。</p>\n<pre><code class=\"hljs TypeScript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">rollDice</span>(<span class=\"hljs-params\"></span>): 1 | 2 | 3 | 4 | 5 | 6 </span>&#123;\n  <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">6</span>) + <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">as</span> <span class=\"hljs-number\">1</span> | <span class=\"hljs-number\">2</span> | <span class=\"hljs-number\">3</span> | <span class=\"hljs-number\">4</span> | <span class=\"hljs-number\">5</span> | <span class=\"hljs-number\">6</span>;\n&#125;\n\n<span class=\"hljs-keyword\">const</span> result = rollDice();</code></pre>\n\n<p>数字字面量类型经常用来描述配置值：</p>\n<pre><code class=\"hljs TypeScript\"><span class=\"hljs-keyword\">interface</span> MapConfig &#123;\n  <span class=\"hljs-attr\">lng</span>: <span class=\"hljs-built_in\">number</span>;\n  lat: <span class=\"hljs-built_in\">number</span>;\n  tileSize: <span class=\"hljs-number\">8</span> | <span class=\"hljs-number\">16</span> | <span class=\"hljs-number\">32</span>;\n&#125;\n\nsetupMap(&#123; <span class=\"hljs-attr\">lng</span>: -<span class=\"hljs-number\">73.935242</span>, <span class=\"hljs-attr\">lat</span>: <span class=\"hljs-number\">40.73061</span>, <span class=\"hljs-attr\">tileSize</span>: <span class=\"hljs-number\">16</span> &#125;);</code></pre>\n\n<h2 id=\"布尔字面量类型\"><a href=\"#布尔字面量类型\" class=\"headerlink\" title=\"布尔字面量类型\"></a>布尔字面量类型</h2><p>TypeScript 还有布尔值字面量类型，你可以通过他们来约束某些属性之间互有关联的对象。</p>\n<pre><code class=\"hljs TypeScript\"><span class=\"hljs-keyword\">interface</span> ValidationSuccess &#123;\n  <span class=\"hljs-attr\">isValid</span>: <span class=\"hljs-literal\">true</span>;\n  reason: <span class=\"hljs-literal\">null</span>;\n&#125;;\n\n<span class=\"hljs-keyword\">interface</span> ValidationFailure &#123;\n  <span class=\"hljs-attr\">isValid</span>: <span class=\"hljs-literal\">false</span>;\n  reason: <span class=\"hljs-built_in\">string</span>;\n&#125;;\n\n<span class=\"hljs-keyword\">type</span> ValidationResult =\n  | ValidationSuccess\n  | ValidationFailure;</code></pre>\n\n","prev":{"title":" nodejs 搭建本地服务器 展示文件夹","slug":"javascript/51fcfc72c9"},"next":{"title":" 你不知道的浏览器渲染原理","slug":"javascript/419340c52c"},"categories":[{"name":"typescript","slug":"typescript","count":8,"path":"api/categories/typescript.json"}],"tags":[{"name":"typescript","slug":"typescript","count":8,"path":"api/tags/typescript.json"}]}