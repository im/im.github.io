{"sort":47,"title":" 枚举","slug":"typescript/1c6b93719a","date":"2021-06-02T00:00:00.000Z","updated":"2021-06-17T11:25:09.047Z","comments":true,"path":"api/articles/typescript/1c6b93719a.json","photos":[],"link":"","excerpt":"枚举使用枚举我们可以定义一些带名字的常量。 使用枚举可以清晰地表达意图或创建一组有区别的用例。 TypeScript支持数字的和基于字符串的枚举。","covers":null,"content":"<h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><p>使用枚举我们可以定义一些带名字的常量。 使用枚举可以清晰地表达意图或创建一组有区别的用例。 TypeScript支持数字的和基于字符串的枚举。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"数字枚举\"><a href=\"#数字枚举\" class=\"headerlink\" title=\"数字枚举\"></a>数字枚举</h3><p>首先我们看看数字枚举，如果你使用过其它编程语言应该会很熟悉。</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-built_in\">enum</span> Direction &#123;\n    Up = <span class=\"hljs-number\">1</span>,\n    Down,\n    Left,\n    Right\n&#125;</code></pre>\n\n<p>如上，我们定义了一个数字枚举，<code>Up</code>使用初始化为<code>1</code>。 其余的成员会从<code>1</code>开始自动增长。 换句话说，<code>Direction.Up</code>的值为<code>1</code>，<code>Down</code>为<code>2</code>，<code>Left</code>为<code>3</code>，<code>Right</code>为<code>4</code>。</p>\n<p>我们还可以完全不使用初始化器：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-built_in\">enum</span> Direction &#123;\n    Up,\n    Down,\n    Left,\n    Right,\n&#125;</code></pre>\n\n<p>现在，<code>Up</code>的值为<code>0</code>，<code>Down</code>的值为<code>1</code>等等。 当我们不在乎成员的值的时候，这种自增长的行为是很有用处的，但是要注意每个枚举成员的值都是不同的。</p>\n<p>使用枚举很简单：通过枚举的属性来访问枚举成员，和枚举的名字来访问枚举类型：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-built_in\">enum</span> Response &#123;\n    No = <span class=\"hljs-number\">0</span>,\n    Yes = <span class=\"hljs-number\">1</span>,\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">respond</span>(<span class=\"hljs-params\">recipient: <span class=\"hljs-built_in\">string</span>, message: Response</span>): <span class=\"hljs-title\">void</span> </span>&#123;\n    <span class=\"hljs-comment\">// ...</span>\n&#125;\n\nrespond(<span class=\"hljs-string\">&quot;Princess Caroline&quot;</span>, Response.Yes)</code></pre>\n\n<p>数字枚举可以被混入到<a href=\"enums.md#computed-and-constant-members\">计算过的和常量成员（如下所示）</a>。 简短地说，没有初始化器的成员要么在首位，要么必须在用数值常量或其他常量枚举成员初始化的数值枚举之后。 换句话说，下面的情况是不被允许的：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-built_in\">enum</span> E &#123;\n    A = getSomeValue(),\n    B, <span class=\"hljs-comment\">// Error! Enum member must have initializer.</span>\n&#125;</code></pre>\n\n<h3 id=\"字符串枚举\"><a href=\"#字符串枚举\" class=\"headerlink\" title=\"字符串枚举\"></a>字符串枚举</h3><p>字符串枚举的概念很简单，但是有细微的<a href=\"enums.md#enums-at-runtime\">运行时的差别</a>。 在一个字符串枚举里，每个成员都必须用字符串字面量，或另外一个字符串枚举成员进行初始化。</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-built_in\">enum</span> Direction &#123;\n    Up = <span class=\"hljs-string\">&quot;UP&quot;</span>,\n    Down = <span class=\"hljs-string\">&quot;DOWN&quot;</span>,\n    Left = <span class=\"hljs-string\">&quot;LEFT&quot;</span>,\n    Right = <span class=\"hljs-string\">&quot;RIGHT&quot;</span>,\n&#125;</code></pre>\n\n<p>由于字符串枚举没有自增长的行为，字符串枚举可以很好的序列化。 换句话说，如果你正在调试并且必须要读一个数字枚举的运行时的值，这个值通常是很难读的 - 它并不能表达有用的信息（尽管<a href=\"enums.md#enums-at-runtime\">反向映射</a>会有所帮助），字符串枚举允许你提供一个运行时有意义的并且可读的值，独立于枚举成员的名字。</p>\n<h3 id=\"异构枚举（Heterogeneous-enums）\"><a href=\"#异构枚举（Heterogeneous-enums）\" class=\"headerlink\" title=\"异构枚举（Heterogeneous enums）\"></a>异构枚举（Heterogeneous enums）</h3><p>从技术的角度来说，枚举可以混合字符串和数字成员，但是似乎你并不会这么做：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-built_in\">enum</span> BooleanLikeHeterogeneousEnum &#123;\n    No = <span class=\"hljs-number\">0</span>,\n    Yes = <span class=\"hljs-string\">&quot;YES&quot;</span>,\n&#125;</code></pre>\n\n<p>除非你真的想要利用JavaScript运行时的行为，否则我们不建议这样做。</p>\n<h3 id=\"计算的和常量成员\"><a href=\"#计算的和常量成员\" class=\"headerlink\" title=\"计算的和常量成员\"></a>计算的和常量成员</h3><p>每个枚举成员都带有一个值，它可以是_常量_或_计算出来的_。 当满足如下条件时，枚举成员被当作是常量：</p>\n<ul>\n<li>它是枚举的第一个成员且没有初始化器，这种情况下它被赋予值<code>0</code>：</li>\n</ul>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// E.X is constant:</span>\n<span class=\"hljs-built_in\">enum</span> E &#123; X &#125;</code></pre>\n\n<ul>\n<li>它不带有初始化器且它之前的枚举成员是一个_数字_常量。 这种情况下，当前枚举成员的值为它上一个枚举成员的值加1。</li>\n</ul>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// All enum members in &#x27;E1&#x27; and &#x27;E2&#x27; are constant.</span>\n\n<span class=\"hljs-built_in\">enum</span> E1 &#123; X, Y, Z &#125;\n\n<span class=\"hljs-built_in\">enum</span> E2 &#123;\n    A = <span class=\"hljs-number\">1</span>, B, C\n&#125;</code></pre>\n\n<ul>\n<li>枚举成员使用_常量枚举表达式_初始化。 常量枚举表达式是TypeScript表达式的子集，它可以在编译阶段求值。 当一个表达式满足下面条件之一时，它就是一个常量枚举表达式：</li>\n</ul>\n<ol>\n<li>一个枚举表达式字面量（主要是字符串字面量或数字字面量）</li>\n<li>一个对之前定义的常量枚举成员的引用（可以是在不同的枚举类型中定义的）</li>\n<li>带括号的常量枚举表达式</li>\n<li>一元运算符<code>+</code>, <code>-</code>, <code>~</code>其中之一应用在了常量枚举表达式</li>\n<li>常量枚举表达式做为二元运算符<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code>, <code>&amp;</code>, <code>|</code>, <code>^</code>的操作对象。</li>\n</ol>\n<p>若常量枚举表达式求值后为<code>NaN</code>或<code>Infinity</code>，则会在编译阶段报错。</p>\n<p>所有其它情况的枚举成员被当作是需要计算得出的值。</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-built_in\">enum</span> FileAccess &#123;\n    <span class=\"hljs-comment\">// constant members</span>\n    None,\n    Read    = <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">1</span>,\n    Write   = <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">2</span>,\n    ReadWrite  = Read | Write,\n    <span class=\"hljs-comment\">// computed member</span>\n    G = <span class=\"hljs-string\">&quot;123&quot;</span>.length\n&#125;</code></pre>\n\n<h3 id=\"联合枚举与枚举成员的类型\"><a href=\"#联合枚举与枚举成员的类型\" class=\"headerlink\" title=\"联合枚举与枚举成员的类型\"></a>联合枚举与枚举成员的类型</h3><p>存在一种特殊的非计算的常量枚举成员的子集：字面量枚举成员。 字面量枚举成员是指不带有初始值的常量枚举成员，或者是值被初始化为</p>\n<ul>\n<li>任何字符串字面量（例如：<code>&quot;foo&quot;</code>，<code>&quot;bar&quot;</code>，<code>&quot;baz&quot;</code>）</li>\n<li>任何数字字面量（例如：<code>1</code>, <code>100</code>）</li>\n<li>应用了一元<code>-</code>符号的数字字面量（例如：<code>-1</code>, <code>-100</code>）</li>\n</ul>\n<p>当所有枚举成员都拥有字面量枚举值时，它就带有了一种特殊的语义。</p>\n<p>首先，枚举成员成为了类型！ 例如，我们可以说某些成员_只能_是枚举成员的值：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-built_in\">enum</span> ShapeKind &#123;\n    Circle,\n    Square,\n&#125;\n\n<span class=\"hljs-keyword\">interface</span> Circle &#123;\n    <span class=\"hljs-attr\">kind</span>: ShapeKind.Circle;\n    radius: <span class=\"hljs-built_in\">number</span>;\n&#125;\n\n<span class=\"hljs-keyword\">interface</span> Square &#123;\n    <span class=\"hljs-attr\">kind</span>: ShapeKind.Square;\n    sideLength: <span class=\"hljs-built_in\">number</span>;\n&#125;\n\n<span class=\"hljs-keyword\">let</span> c: Circle = &#123;\n    <span class=\"hljs-attr\">kind</span>: ShapeKind.Square, <span class=\"hljs-comment\">// Error! Type &#x27;ShapeKind.Square&#x27; is not assignable to type &#x27;ShapeKind.Circle&#x27;.</span>\n    <span class=\"hljs-attr\">radius</span>: <span class=\"hljs-number\">100</span>,\n&#125;</code></pre>\n\n<p>另一个变化是枚举类型本身变成了每个枚举成员的_联合_。 虽然我们还没有讨论<a href=\"advanced-types.md#union-types\">联合类型</a>，但你只要知道通过联合枚举，类型系统能够利用这样一个事实，它可以知道枚举里的值的集合。 因此，TypeScript能够捕获在比较值的时候犯的愚蠢的错误。 例如：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-built_in\">enum</span> E &#123;\n    Foo,\n    Bar,\n&#125;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\">x: E</span>) </span>&#123;\n    <span class=\"hljs-keyword\">if</span> (x !== E.Foo || x !== E.Bar) &#123;\n        <span class=\"hljs-comment\">//             ~~~~~~~~~~~</span>\n        <span class=\"hljs-comment\">// Error! This condition will always return &#x27;true&#x27; since the types &#x27;E.Foo&#x27; and &#x27;E.Bar&#x27; have no overlap.</span>\n    &#125;\n&#125;</code></pre>\n\n<p>这个例子里，我们先检查<code>x</code>是否不是<code>E.Foo</code>。 如果通过了这个检查，然后<code>||</code>会发生短路效果，<code>if</code>语句体里的内容会被执行。 然而，这个检查没有通过，那么<code>x</code>则_只能_为<code>E.Foo</code>，因此没理由再去检查它是否为<code>E.Bar</code>。</p>\n<h3 id=\"运行时的枚举\"><a href=\"#运行时的枚举\" class=\"headerlink\" title=\"运行时的枚举\"></a>运行时的枚举</h3><p>枚举是在运行时真正存在的对象。 例如下面的枚举：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-built_in\">enum</span> E &#123;\n    X, Y, Z\n&#125;</code></pre>\n\n<p>可以传递给函数</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\">obj: &#123; X: <span class=\"hljs-built_in\">number</span> &#125;</span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> obj.X;\n&#125;\n\n<span class=\"hljs-comment\">// 没问题，因为 &#x27;E&#x27;包含一个数值型属性&#x27;X&#x27;。</span>\nf(E);</code></pre>\n\n<h3 id=\"编译时的枚举\"><a href=\"#编译时的枚举\" class=\"headerlink\" title=\"编译时的枚举\"></a>编译时的枚举</h3><p>尽管一个枚举是在运行时真正存在的对象，但<code>keyof</code>关键字的行为与其作用在对象上时有所不同。应该使用<code>keyof typeof</code>来获取一个表示枚举里所有字符串<code>key</code>的类型。</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-built_in\">enum</span> LogLevel &#123;\n    ERROR, WARN, INFO, DEBUG\n&#125;\n\n<span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\"> * 等同于：</span>\n<span class=\"hljs-comment\"> * type LogLevelStrings = &#x27;ERROR&#x27; | &#x27;WARN&#x27; | &#x27;INFO&#x27; | &#x27;DEBUG&#x27;;</span>\n<span class=\"hljs-comment\"> */</span>\n<span class=\"hljs-keyword\">type</span> LogLevelStrings = keyof <span class=\"hljs-keyword\">typeof</span> LogLevel;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">printImportant</span>(<span class=\"hljs-params\">key: LogLevelStrings, message: <span class=\"hljs-built_in\">string</span></span>) </span>&#123;\n    <span class=\"hljs-keyword\">const</span> num = LogLevel[key];\n    <span class=\"hljs-keyword\">if</span> (num &lt;= LogLevel.WARN) &#123;\n       <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;Log level key is: &#x27;</span>, key);\n       <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;Log level value is: &#x27;</span>, num);\n       <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;Log level message is: &#x27;</span>, message);\n    &#125;\n&#125;\nprintImportant(<span class=\"hljs-string\">&#x27;ERROR&#x27;</span>, <span class=\"hljs-string\">&#x27;This is a message&#x27;</span>);</code></pre>\n\n<h4 id=\"反向映射\"><a href=\"#反向映射\" class=\"headerlink\" title=\"反向映射\"></a>反向映射</h4><p>除了创建一个以属性名做为对象成员的对象之外，数字枚举成员还具有了_反向映射_，从枚举值到枚举名字。 例如，在下面的例子中：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-built_in\">enum</span> Enum &#123;\n    A\n&#125;\n<span class=\"hljs-keyword\">let</span> a = Enum.A;\n<span class=\"hljs-keyword\">let</span> nameOfA = Enum[a]; <span class=\"hljs-comment\">// &quot;A&quot;</span></code></pre>\n\n<p>TypeScript可能会将这段代码编译为下面的JavaScript：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> Enum;\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">Enum</span>) </span>&#123;\n    Enum[Enum[<span class=\"hljs-string\">&quot;A&quot;</span>] = <span class=\"hljs-number\">0</span>] = <span class=\"hljs-string\">&quot;A&quot;</span>;\n&#125;)(Enum || (Enum = &#123;&#125;));\n<span class=\"hljs-keyword\">var</span> a = Enum.A;\n<span class=\"hljs-keyword\">var</span> nameOfA = Enum[a]; <span class=\"hljs-comment\">// &quot;A&quot;</span></code></pre>\n\n<p>生成的代码中，枚举类型被编译成一个对象，它包含了正向映射（<code>name</code> -&gt; <code>value</code>）和反向映射（<code>value</code> -&gt; <code>name</code>）。 引用枚举成员总会生成为对属性访问并且永远也不会内联代码。</p>\n<p>要注意的是_不会_为字符串枚举成员生成反向映射。</p>\n<h4 id=\"const枚举\"><a href=\"#const枚举\" class=\"headerlink\" title=\"const枚举\"></a><code>const</code>枚举</h4><p>大多数情况下，枚举是十分有效的方案。 然而在某些情况下需求很严格。 为了避免在额外生成的代码上的开销和额外的非直接的对枚举成员的访问，我们可以使用<code>const</code>枚举。 常量枚举通过在枚举上使用<code>const</code>修饰符来定义。</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">enum</span> Enum &#123;\n    A = <span class=\"hljs-number\">1</span>,\n    B = A * <span class=\"hljs-number\">2</span>\n&#125;</code></pre>\n\n<p>常量枚举只能使用常量枚举表达式，并且不同于常规的枚举，它们在编译阶段会被删除。 常量枚举成员在使用的地方会被内联进来。 之所以可以这么做是因为，常量枚举不允许包含计算成员。</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-built_in\">enum</span> Directions &#123;\n    Up,\n    Down,\n    Left,\n    Right\n&#125;\n\n<span class=\"hljs-keyword\">let</span> directions = [Directions.Up, Directions.Down, Directions.Left, Directions.Right]</code></pre>\n\n<p>生成后的代码为：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> directions = [<span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* Up */</span>, <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* Down */</span>, <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* Left */</span>, <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">/* Right */</span>];</code></pre>\n\n<h2 id=\"外部枚举\"><a href=\"#外部枚举\" class=\"headerlink\" title=\"外部枚举\"></a>外部枚举</h2><p>外部枚举用来描述已经存在的枚举类型的形状。</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-built_in\">enum</span> Enum &#123;\n    A = <span class=\"hljs-number\">1</span>,\n    B,\n    C = <span class=\"hljs-number\">2</span>\n&#125;</code></pre>\n\n<p>外部枚举和非外部枚举之间有一个重要的区别，在正常的枚举里，没有初始化方法的成员被当成常量成员。 对于非常量的外部枚举而言，没有初始化方法时被当做需要经过计算的。</p>\n","prev":{"title":" 为什么要用setTimeout来模拟setInterval","slug":"interview/ac86bf5243"},"next":{"title":" ios 提醒事项同步日历快捷指令脚本","slug":"other/6238c21f55"},"categories":[{"name":"typescript","slug":"typescript","count":8,"path":"api/categories/typescript.json"}],"tags":[{"name":"typescript","slug":"typescript","count":8,"path":"api/tags/typescript.json"}]}