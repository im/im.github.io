{"sort":36,"title":" 函数","slug":"typescript/64fffd4364","date":"2021-01-28T00:00:00.000Z","updated":"2021-06-17T11:25:09.047Z","comments":true,"path":"api/articles/typescript/64fffd4364.json","photos":[],"link":"","excerpt":"介绍函数是JavaScript应用程序的基础。 它帮助你实现抽象层，模拟类，信息隐藏和模块。 在TypeScript里，虽然已经支持类，命名空间和模块，但函数仍然是主要的定义_行为_的地方。 TypeScript为JavaScript函数添加了额外的功能，让我们可以更容易地使用。","covers":null,"content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>函数是JavaScript应用程序的基础。 它帮助你实现抽象层，模拟类，信息隐藏和模块。 在TypeScript里，虽然已经支持类，命名空间和模块，但函数仍然是主要的定义_行为_的地方。 TypeScript为JavaScript函数添加了额外的功能，让我们可以更容易地使用。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p>和JavaScript一样，TypeScript函数可以创建有名字的函数和匿名函数。 你可以随意选择适合应用程序的方式，不论是定义一系列API函数还是只使用一次的函数。</p>\n<p>通过下面的例子可以迅速回想起这两种JavaScript中的函数：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// Named function</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">x, y</span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> x + y;\n&#125;\n\n<span class=\"hljs-comment\">// Anonymous function</span>\n<span class=\"hljs-keyword\">let</span> myAdd = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x, y</span>) </span>&#123; <span class=\"hljs-keyword\">return</span> x + y; &#125;;</code></pre>\n\n<p>在JavaScript里，函数可以使用函数体外部的变量。 当函数这么做时，我们说它‘捕获’了这些变量。 至于为什么可以这样做以及其中的利弊超出了本文的范围，但是深刻理解这个机制对学习JavaScript和TypeScript会很有帮助。</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">let</span> z = <span class=\"hljs-number\">100</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">addToZ</span>(<span class=\"hljs-params\">x, y</span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> x + y + z;\n&#125;</code></pre>\n\n<h2 id=\"函数类型\"><a href=\"#函数类型\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h2><h3 id=\"为函数定义类型\"><a href=\"#为函数定义类型\" class=\"headerlink\" title=\"为函数定义类型\"></a>为函数定义类型</h3><p>让我们为上面那个函数添加类型：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">number</span>, y: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-title\">number</span> </span>&#123;\n    <span class=\"hljs-keyword\">return</span> x + y;\n&#125;\n\n<span class=\"hljs-keyword\">let</span> myAdd = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">number</span>, y: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-title\">number</span> </span>&#123; <span class=\"hljs-keyword\">return</span> x + y; &#125;;</code></pre>\n\n<p>我们可以给每个参数添加类型之后再为函数本身添加返回值类型。 TypeScript能够根据返回语句自动推断出返回值类型，因此我们通常省略它。</p>\n<h3 id=\"书写完整函数类型\"><a href=\"#书写完整函数类型\" class=\"headerlink\" title=\"书写完整函数类型\"></a>书写完整函数类型</h3><p>现在我们已经为函数指定了类型，下面让我们写出函数的完整类型。</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">let</span> myAdd: <span class=\"hljs-function\">(<span class=\"hljs-params\">x:<span class=\"hljs-built_in\">number</span>, y:<span class=\"hljs-built_in\">number</span></span>) =&gt;</span> <span class=\"hljs-built_in\">number</span> =\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">number</span>, y: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-title\">number</span> </span>&#123; <span class=\"hljs-keyword\">return</span> x + y; &#125;;</code></pre>\n\n<p>函数类型包含两部分：参数类型和返回值类型。 当写出完整函数类型的时候，这两部分都是需要的。 我们以参数列表的形式写出参数类型，为每个参数指定一个名字和类型。 这个名字只是为了增加可读性。 我们也可以这么写：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">let</span> myAdd: <span class=\"hljs-function\">(<span class=\"hljs-params\">baseValue: <span class=\"hljs-built_in\">number</span>, increment: <span class=\"hljs-built_in\">number</span></span>) =&gt;</span> <span class=\"hljs-built_in\">number</span> =\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">number</span>, y: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-title\">number</span> </span>&#123; <span class=\"hljs-keyword\">return</span> x + y; &#125;;</code></pre>\n\n<p>只要参数类型是匹配的，那么就认为它是有效的函数类型，而不在乎参数名是否正确。</p>\n<p>第二部分是返回值类型。 对于返回值，我们在函数和返回值类型之前使用(<code>=&gt;</code>)符号，使之清晰明了。 如之前提到的，返回值类型是函数类型的必要部分，如果函数没有返回任何值，你也必须指定返回值类型为<code>void</code>而不能留空。</p>\n<p>函数的类型只是由参数类型和返回值组成的。 函数中使用的捕获变量不会体现在类型里。 实际上，这些变量是函数的隐藏状态并不是组成API的一部分。</p>\n<h3 id=\"推断类型\"><a href=\"#推断类型\" class=\"headerlink\" title=\"推断类型\"></a>推断类型</h3><p>尝试这个例子的时候，你会注意到，就算仅在等式的一侧带有类型，TypeScript编译器仍可正确识别类型：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-comment\">// myAdd has the full function type</span>\n<span class=\"hljs-keyword\">let</span> myAdd = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">number</span>, y: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-title\">number</span> </span>&#123; <span class=\"hljs-keyword\">return</span> x + y; &#125;;\n\n<span class=\"hljs-comment\">// The parameters `x` and `y` have the type number</span>\n<span class=\"hljs-keyword\">let</span> myAdd: <span class=\"hljs-function\">(<span class=\"hljs-params\">baseValue: <span class=\"hljs-built_in\">number</span>, increment: <span class=\"hljs-built_in\">number</span></span>) =&gt;</span> <span class=\"hljs-built_in\">number</span> =\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x, y</span>) </span>&#123; <span class=\"hljs-keyword\">return</span> x + y; &#125;;</code></pre>\n\n<p>这叫做“按上下文归类”，是类型推论的一种。 它帮助我们更好地为程序指定类型。</p>\n<h2 id=\"可选参数和默认参数\"><a href=\"#可选参数和默认参数\" class=\"headerlink\" title=\"可选参数和默认参数\"></a>可选参数和默认参数</h2><p>TypeScript里的每个函数参数都是必须的。 这不是指不能传递<code>null</code>或<code>undefined</code>作为参数，而是说编译器检查用户是否为每个参数都传入了值。 编译器还会假设只有这些参数会被传递进函数。 简短地说，传递给一个函数的参数个数必须与函数期望的参数个数一致。</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">buildName</span>(<span class=\"hljs-params\">firstName: <span class=\"hljs-built_in\">string</span>, lastName: <span class=\"hljs-built_in\">string</span></span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> firstName + <span class=\"hljs-string\">&quot; &quot;</span> + lastName;\n&#125;\n\n<span class=\"hljs-keyword\">let</span> result1 = buildName(<span class=\"hljs-string\">&quot;Bob&quot;</span>);                  <span class=\"hljs-comment\">// error, too few parameters</span>\n<span class=\"hljs-keyword\">let</span> result2 = buildName(<span class=\"hljs-string\">&quot;Bob&quot;</span>, <span class=\"hljs-string\">&quot;Adams&quot;</span>, <span class=\"hljs-string\">&quot;Sr.&quot;</span>);  <span class=\"hljs-comment\">// error, too many parameters</span>\n<span class=\"hljs-keyword\">let</span> result3 = buildName(<span class=\"hljs-string\">&quot;Bob&quot;</span>, <span class=\"hljs-string\">&quot;Adams&quot;</span>);         <span class=\"hljs-comment\">// ah, just right</span></code></pre>\n\n<p>JavaScript里，每个参数都是可选的，可传可不传。 没传参的时候，它的值就是undefined。 在TypeScript里我们可以在参数名旁使用<code>?</code>实现可选参数的功能。 比如，我们想让last name是可选的：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">buildName</span>(<span class=\"hljs-params\">firstName: <span class=\"hljs-built_in\">string</span>, lastName?: <span class=\"hljs-built_in\">string</span></span>) </span>&#123;\n    <span class=\"hljs-keyword\">if</span> (lastName)\n        <span class=\"hljs-keyword\">return</span> firstName + <span class=\"hljs-string\">&quot; &quot;</span> + lastName;\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-keyword\">return</span> firstName;\n&#125;\n\n<span class=\"hljs-keyword\">let</span> result1 = buildName(<span class=\"hljs-string\">&quot;Bob&quot;</span>);  <span class=\"hljs-comment\">// works correctly now</span>\n<span class=\"hljs-keyword\">let</span> result2 = buildName(<span class=\"hljs-string\">&quot;Bob&quot;</span>, <span class=\"hljs-string\">&quot;Adams&quot;</span>, <span class=\"hljs-string\">&quot;Sr.&quot;</span>);  <span class=\"hljs-comment\">// error, too many parameters</span>\n<span class=\"hljs-keyword\">let</span> result3 = buildName(<span class=\"hljs-string\">&quot;Bob&quot;</span>, <span class=\"hljs-string\">&quot;Adams&quot;</span>);  <span class=\"hljs-comment\">// ah, just right</span></code></pre>\n\n<p>可选参数必须跟在必须参数后面。 如果上例我们想让first name是可选的，那么就必须调整它们的位置，把first name放在后面。</p>\n<p>在TypeScript里，我们也可以为参数提供一个默认值当用户没有传递这个参数或传递的值是<code>undefined</code>时。 它们叫做有默认初始化值的参数。 让我们修改上例，把last name的默认值设置为<code>&quot;Smith&quot;</code>。</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">buildName</span>(<span class=\"hljs-params\">firstName: <span class=\"hljs-built_in\">string</span>, lastName = <span class=\"hljs-string\">&quot;Smith&quot;</span></span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> firstName + <span class=\"hljs-string\">&quot; &quot;</span> + lastName;\n&#125;\n\n<span class=\"hljs-keyword\">let</span> result1 = buildName(<span class=\"hljs-string\">&quot;Bob&quot;</span>);                  <span class=\"hljs-comment\">// works correctly now, returns &quot;Bob Smith&quot;</span>\n<span class=\"hljs-keyword\">let</span> result2 = buildName(<span class=\"hljs-string\">&quot;Bob&quot;</span>, <span class=\"hljs-literal\">undefined</span>);       <span class=\"hljs-comment\">// still works, also returns &quot;Bob Smith&quot;</span>\n<span class=\"hljs-keyword\">let</span> result3 = buildName(<span class=\"hljs-string\">&quot;Bob&quot;</span>, <span class=\"hljs-string\">&quot;Adams&quot;</span>, <span class=\"hljs-string\">&quot;Sr.&quot;</span>);  <span class=\"hljs-comment\">// error, too many parameters</span>\n<span class=\"hljs-keyword\">let</span> result4 = buildName(<span class=\"hljs-string\">&quot;Bob&quot;</span>, <span class=\"hljs-string\">&quot;Adams&quot;</span>);         <span class=\"hljs-comment\">// ah, just right</span></code></pre>\n\n<p>在所有必须参数后面的带默认初始化的参数都是可选的，与可选参数一样，在调用函数的时候可以省略。 也就是说可选参数与末尾的默认参数共享参数类型。</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">buildName</span>(<span class=\"hljs-params\">firstName: <span class=\"hljs-built_in\">string</span>, lastName?: <span class=\"hljs-built_in\">string</span></span>) </span>&#123;\n    <span class=\"hljs-comment\">// ...</span>\n&#125;</code></pre>\n\n<p>和</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">buildName</span>(<span class=\"hljs-params\">firstName: <span class=\"hljs-built_in\">string</span>, lastName = <span class=\"hljs-string\">&quot;Smith&quot;</span></span>) </span>&#123;\n    <span class=\"hljs-comment\">// ...</span>\n&#125;</code></pre>\n\n<p>共享同样的类型<code>(firstName: string, lastName?: string) =&gt; string</code>。 在函数类型中，默认参数的默认值不会显示，而只会显示它是一个可选参数。</p>\n<p>与普通可选参数不同的是，带默认值的参数不需要放在必须参数的后面。 如果带默认值的参数出现在必须参数前面，用户必须明确的传入<code>undefined</code>值来获得默认值。 例如，我们重写最后一个例子，让<code>firstName</code>是带默认值的参数：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">buildName</span>(<span class=\"hljs-params\">firstName = <span class=\"hljs-string\">&quot;Will&quot;</span>, lastName: <span class=\"hljs-built_in\">string</span></span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> firstName + <span class=\"hljs-string\">&quot; &quot;</span> + lastName;\n&#125;\n\n<span class=\"hljs-keyword\">let</span> result1 = buildName(<span class=\"hljs-string\">&quot;Bob&quot;</span>);                  <span class=\"hljs-comment\">// error, too few parameters</span>\n<span class=\"hljs-keyword\">let</span> result2 = buildName(<span class=\"hljs-string\">&quot;Bob&quot;</span>, <span class=\"hljs-string\">&quot;Adams&quot;</span>, <span class=\"hljs-string\">&quot;Sr.&quot;</span>);  <span class=\"hljs-comment\">// error, too many parameters</span>\n<span class=\"hljs-keyword\">let</span> result3 = buildName(<span class=\"hljs-string\">&quot;Bob&quot;</span>, <span class=\"hljs-string\">&quot;Adams&quot;</span>);         <span class=\"hljs-comment\">// okay and returns &quot;Bob Adams&quot;</span>\n<span class=\"hljs-keyword\">let</span> result4 = buildName(<span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">&quot;Adams&quot;</span>);     <span class=\"hljs-comment\">// okay and returns &quot;Will Adams&quot;</span></code></pre>\n\n<h2 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"剩余参数\"></a>剩余参数</h2><p>必要参数，默认参数和可选参数有个共同点：它们表示某一个参数。 有时，你想同时操作多个参数，或者你并不知道会有多少参数传递进来。 在JavaScript里，你可以使用<code>arguments</code>来访问所有传入的参数。</p>\n<p>在TypeScript里，你可以把所有参数收集到一个变量里：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">buildName</span>(<span class=\"hljs-params\">firstName: <span class=\"hljs-built_in\">string</span>, ...restOfName: <span class=\"hljs-built_in\">string</span>[]</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> firstName + <span class=\"hljs-string\">&quot; &quot;</span> + restOfName.join(<span class=\"hljs-string\">&quot; &quot;</span>);\n&#125;\n\n<span class=\"hljs-keyword\">let</span> employeeName = buildName(<span class=\"hljs-string\">&quot;Joseph&quot;</span>, <span class=\"hljs-string\">&quot;Samuel&quot;</span>, <span class=\"hljs-string\">&quot;Lucas&quot;</span>, <span class=\"hljs-string\">&quot;MacKinzie&quot;</span>);</code></pre>\n\n<p>剩余参数会被当做个数不限的可选参数。 可以一个都没有，同样也可以有任意个。 编译器创建参数数组，名字是你在省略号（<code>...</code>）后面给定的名字，你可以在函数体内使用这个数组。</p>\n<p>这个省略号也会在带有剩余参数的函数类型定义上使用到：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">buildName</span>(<span class=\"hljs-params\">firstName: <span class=\"hljs-built_in\">string</span>, ...restOfName: <span class=\"hljs-built_in\">string</span>[]</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> firstName + <span class=\"hljs-string\">&quot; &quot;</span> + restOfName.join(<span class=\"hljs-string\">&quot; &quot;</span>);\n&#125;\n\n<span class=\"hljs-keyword\">let</span> buildNameFun: <span class=\"hljs-function\">(<span class=\"hljs-params\">fname: <span class=\"hljs-built_in\">string</span>, ...rest: <span class=\"hljs-built_in\">string</span>[]</span>) =&gt;</span> <span class=\"hljs-built_in\">string</span> = buildName;</code></pre>\n\n<h2 id=\"this\"><a href=\"#this\" class=\"headerlink\" title=\"this\"></a><code>this</code></h2><p>学习如何在JavaScript里正确使用<code>this</code>就好比一场成年礼。 由于TypeScript是JavaScript的超集，TypeScript程序员也需要弄清<code>this</code>工作机制并且当有bug的时候能够找出错误所在。 幸运的是，TypeScript能通知你错误地使用了<code>this</code>的地方。 如果你想了解JavaScript里的<code>this</code>是如何工作的，那么首先阅读Yehuda Katz写的<a href=\"http://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/\">Understanding JavaScript Function Invocation and “this”</a>。 Yehuda的文章详细的阐述了<code>this</code>的内部工作原理，因此我们这里只做简单介绍。</p>\n<h3 id=\"this和箭头函数\"><a href=\"#this和箭头函数\" class=\"headerlink\" title=\"this和箭头函数\"></a><code>this</code>和箭头函数</h3><p>JavaScript里，<code>this</code>的值在函数被调用的时候才会指定。 这是个既强大又灵活的特点，但是你需要花点时间弄清楚函数调用的上下文是什么。 但众所周知，这不是一件很简单的事，尤其是在返回一个函数或将函数当做参数传递的时候。</p>\n<p>下面看一个例子：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">let</span> deck = &#123;\n    <span class=\"hljs-attr\">suits</span>: [<span class=\"hljs-string\">&quot;hearts&quot;</span>, <span class=\"hljs-string\">&quot;spades&quot;</span>, <span class=\"hljs-string\">&quot;clubs&quot;</span>, <span class=\"hljs-string\">&quot;diamonds&quot;</span>],\n    <span class=\"hljs-attr\">cards</span>: <span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">52</span>),\n    <span class=\"hljs-attr\">createCardPicker</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n            <span class=\"hljs-keyword\">let</span> pickedCard = <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">52</span>);\n            <span class=\"hljs-keyword\">let</span> pickedSuit = <span class=\"hljs-built_in\">Math</span>.floor(pickedCard / <span class=\"hljs-number\">13</span>);\n\n            <span class=\"hljs-keyword\">return</span> &#123;<span class=\"hljs-attr\">suit</span>: <span class=\"hljs-built_in\">this</span>.suits[pickedSuit], <span class=\"hljs-attr\">card</span>: pickedCard % <span class=\"hljs-number\">13</span>&#125;;\n        &#125;\n    &#125;\n&#125;\n\n<span class=\"hljs-keyword\">let</span> cardPicker = deck.createCardPicker();\n<span class=\"hljs-keyword\">let</span> pickedCard = cardPicker();\n\nalert(<span class=\"hljs-string\">&quot;card: &quot;</span> + pickedCard.card + <span class=\"hljs-string\">&quot; of &quot;</span> + pickedCard.suit);</code></pre>\n\n<p>可以看到<code>createCardPicker</code>是个函数，并且它又返回了一个函数。 如果我们尝试运行这个程序，会发现它并没有弹出对话框而是报错了。 因为<code>createCardPicker</code>返回的函数里的<code>this</code>被设置成了<code>window</code>而不是<code>deck</code>对象。 因为我们只是独立的调用了<code>cardPicker()</code>。 顶级的非方法式调用会将<code>this</code>视为<code>window</code>。 （注意：在严格模式下，<code>this</code>为<code>undefined</code>而不是<code>window</code>）。</p>\n<p>为了解决这个问题，我们可以在函数被返回时就绑好正确的<code>this</code>。 这样的话，无论之后怎么使用它，都会引用绑定的‘deck’对象。 我们需要改变函数表达式来使用ECMAScript 6箭头语法。 箭头函数能保存函数创建时的<code>this</code>值，而不是调用时的值：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">let</span> deck = &#123;\n    <span class=\"hljs-attr\">suits</span>: [<span class=\"hljs-string\">&quot;hearts&quot;</span>, <span class=\"hljs-string\">&quot;spades&quot;</span>, <span class=\"hljs-string\">&quot;clubs&quot;</span>, <span class=\"hljs-string\">&quot;diamonds&quot;</span>],\n    <span class=\"hljs-attr\">cards</span>: <span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">52</span>),\n    <span class=\"hljs-attr\">createCardPicker</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n        <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> the line below is now an arrow function, allowing us to capture &#x27;this&#x27; right here</span>\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> &#123;\n            <span class=\"hljs-keyword\">let</span> pickedCard = <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">52</span>);\n            <span class=\"hljs-keyword\">let</span> pickedSuit = <span class=\"hljs-built_in\">Math</span>.floor(pickedCard / <span class=\"hljs-number\">13</span>);\n\n            <span class=\"hljs-keyword\">return</span> &#123;<span class=\"hljs-attr\">suit</span>: <span class=\"hljs-built_in\">this</span>.suits[pickedSuit], <span class=\"hljs-attr\">card</span>: pickedCard % <span class=\"hljs-number\">13</span>&#125;;\n        &#125;\n    &#125;\n&#125;\n\n<span class=\"hljs-keyword\">let</span> cardPicker = deck.createCardPicker();\n<span class=\"hljs-keyword\">let</span> pickedCard = cardPicker();\n\nalert(<span class=\"hljs-string\">&quot;card: &quot;</span> + pickedCard.card + <span class=\"hljs-string\">&quot; of &quot;</span> + pickedCard.suit);</code></pre>\n\n<p>更好事情是，TypeScript会警告你犯了一个错误，如果你给编译器设置了<code>--noImplicitThis</code>标记。 它会指出<code>this.suits[pickedSuit]</code>里的<code>this</code>的类型为<code>any</code>。</p>\n<h3 id=\"this参数\"><a href=\"#this参数\" class=\"headerlink\" title=\"this参数\"></a><code>this</code>参数</h3><p>不幸的是，<code>this.suits[pickedSuit]</code>中的<code>this</code>的类型依旧为<code>any</code>。 这是因为<code>this</code>来自对象字面量里的函数表达式。 修改的方法是，提供一个显式的<code>this</code>参数。 <code>this</code>参数是个假的参数，它出现在参数列表的最前面：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">this</span>: <span class=\"hljs-built_in\">void</span></span>) </span>&#123;\n    <span class=\"hljs-comment\">// make sure `this` is unusable in this standalone function</span>\n&#125;</code></pre>\n\n<p>让我们往例子里添加一些接口，<code>Card</code> 和 <code>Deck</code>，让类型重用能够变得清晰简单些：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">interface</span> Card &#123;\n    <span class=\"hljs-attr\">suit</span>: <span class=\"hljs-built_in\">string</span>;\n    card: <span class=\"hljs-built_in\">number</span>;\n&#125;\n<span class=\"hljs-keyword\">interface</span> Deck &#123;\n    <span class=\"hljs-attr\">suits</span>: <span class=\"hljs-built_in\">string</span>[];\n    cards: <span class=\"hljs-built_in\">number</span>[];\n    createCardPicker(<span class=\"hljs-built_in\">this</span>: Deck): <span class=\"hljs-function\">() =&gt;</span> Card;\n&#125;\n<span class=\"hljs-keyword\">let</span> deck: Deck = &#123;\n    <span class=\"hljs-attr\">suits</span>: [<span class=\"hljs-string\">&quot;hearts&quot;</span>, <span class=\"hljs-string\">&quot;spades&quot;</span>, <span class=\"hljs-string\">&quot;clubs&quot;</span>, <span class=\"hljs-string\">&quot;diamonds&quot;</span>],\n    <span class=\"hljs-attr\">cards</span>: <span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">52</span>),\n    <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> The function now explicitly specifies that its callee must be of type Deck</span>\n    <span class=\"hljs-attr\">createCardPicker</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">this</span>: Deck</span>) </span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> &#123;\n            <span class=\"hljs-keyword\">let</span> pickedCard = <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">52</span>);\n            <span class=\"hljs-keyword\">let</span> pickedSuit = <span class=\"hljs-built_in\">Math</span>.floor(pickedCard / <span class=\"hljs-number\">13</span>);\n\n            <span class=\"hljs-keyword\">return</span> &#123;<span class=\"hljs-attr\">suit</span>: <span class=\"hljs-built_in\">this</span>.suits[pickedSuit], <span class=\"hljs-attr\">card</span>: pickedCard % <span class=\"hljs-number\">13</span>&#125;;\n        &#125;\n    &#125;\n&#125;\n\n<span class=\"hljs-keyword\">let</span> cardPicker = deck.createCardPicker();\n<span class=\"hljs-keyword\">let</span> pickedCard = cardPicker();\n\nalert(<span class=\"hljs-string\">&quot;card: &quot;</span> + pickedCard.card + <span class=\"hljs-string\">&quot; of &quot;</span> + pickedCard.suit);</code></pre>\n\n<p>现在TypeScript知道<code>createCardPicker</code>期望在某个<code>Deck</code>对象上调用。 也就是说<code>this</code>是<code>Deck</code>类型的，而非<code>any</code>，因此<code>--noImplicitThis</code>不会报错了。</p>\n<h4 id=\"回调函数里的this参数\"><a href=\"#回调函数里的this参数\" class=\"headerlink\" title=\"回调函数里的this参数\"></a>回调函数里的<code>this</code>参数</h4><p>当你将一个函数传递到某个库函数里在稍后被调用时，你可能也见到过回调函数里的<code>this</code>会报错。 因为当回调函数被调用时，它会被当成一个普通函数调用，<code>this</code>将为<code>undefined</code>。 稍做改动，你就可以通过<code>this</code>参数来避免错误。 首先，库函数的作者要指定<code>this</code>的类型：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">interface</span> UIElement &#123;\n    addClickListener(onclick: <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-built_in\">this</span>: <span class=\"hljs-built_in\">void</span>, e: Event</span>) =&gt;</span> <span class=\"hljs-built_in\">void</span>): <span class=\"hljs-built_in\">void</span>;\n&#125;</code></pre>\n\n<p><code>this: void</code>意味着<code>addClickListener</code>期望<code>onclick</code>是一个函数且它不需要一个<code>this</code>类型。 然后，为调用代码里的<code>this</code>添加类型注解：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Handler</span> </span>&#123;\n    <span class=\"hljs-attr\">info</span>: <span class=\"hljs-built_in\">string</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">onClickBad</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">this</span>: Handler, e: Event</span>)</span> &#123;\n        <span class=\"hljs-comment\">// oops, used this here. using this callback would crash at runtime</span>\n        <span class=\"hljs-built_in\">this</span>.info = e.message;\n    &#125;\n&#125;\n<span class=\"hljs-keyword\">let</span> h = <span class=\"hljs-keyword\">new</span> Handler();\nuiElement.addClickListener(h.onClickBad); <span class=\"hljs-comment\">// error!</span></code></pre>\n\n<p>指定了<code>this</code>类型后，你显式声明<code>onClickBad</code>必须在<code>Handler</code>的实例上调用。 然后TypeScript会检测到<code>addClickListener</code>要求函数带有<code>this: void</code>。 改变<code>this</code>类型来修复这个错误：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Handler</span> </span>&#123;\n    <span class=\"hljs-attr\">info</span>: <span class=\"hljs-built_in\">string</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-title\">onClickGood</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">this</span>: <span class=\"hljs-built_in\">void</span>, e: Event</span>)</span> &#123;\n        <span class=\"hljs-comment\">// can&#x27;t use this here because it&#x27;s of type void!</span>\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;clicked!&#x27;</span>);\n    &#125;\n&#125;\n<span class=\"hljs-keyword\">let</span> h = <span class=\"hljs-keyword\">new</span> Handler();\nuiElement.addClickListener(h.onClickGood);</code></pre>\n\n<p>因为<code>onClickGood</code>指定了<code>this</code>类型为<code>void</code>，因此传递<code>addClickListener</code>是合法的。 当然了，这也意味着不能使用<code>this.info</code>. 如果你两者都想要，你不得不使用箭头函数了：</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Handler</span> </span>&#123;\n    <span class=\"hljs-attr\">info</span>: <span class=\"hljs-built_in\">string</span>;\n    onClickGood = <span class=\"hljs-function\">(<span class=\"hljs-params\">e: Event</span>) =&gt;</span> &#123; <span class=\"hljs-built_in\">this</span>.info = e.message &#125;\n&#125;</code></pre>\n\n<p>这是可行的因为箭头函数使用外层的<code>this</code>，所以你总是可以把它们传给期望<code>this: void</code>的函数。 缺点是每个<code>Handler</code>对象都会创建一个箭头函数。 另一方面，方法只会被创建一次，添加到<code>Handler</code>的原型链上。 它们在不同<code>Handler</code>对象间是共享的。</p>\n<h2 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a>重载</h2><p>JavaScript本身是个动态语言。 JavaScript里函数根据传入不同的参数而返回不同类型的数据是很常见的。</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">let</span> suits = [<span class=\"hljs-string\">&quot;hearts&quot;</span>, <span class=\"hljs-string\">&quot;spades&quot;</span>, <span class=\"hljs-string\">&quot;clubs&quot;</span>, <span class=\"hljs-string\">&quot;diamonds&quot;</span>];\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">pickCard</span>(<span class=\"hljs-params\">x</span>): <span class=\"hljs-title\">any</span> </span>&#123;\n    <span class=\"hljs-comment\">// Check to see if we&#x27;re working with an object/array</span>\n    <span class=\"hljs-comment\">// if so, they gave us the deck and we&#x27;ll pick the card</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> x == <span class=\"hljs-string\">&quot;object&quot;</span>) &#123;\n        <span class=\"hljs-keyword\">let</span> pickedCard = <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * x.length);\n        <span class=\"hljs-keyword\">return</span> pickedCard;\n    &#125;\n    <span class=\"hljs-comment\">// Otherwise just let them pick the card</span>\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> x == <span class=\"hljs-string\">&quot;number&quot;</span>) &#123;\n        <span class=\"hljs-keyword\">let</span> pickedSuit = <span class=\"hljs-built_in\">Math</span>.floor(x / <span class=\"hljs-number\">13</span>);\n        <span class=\"hljs-keyword\">return</span> &#123; <span class=\"hljs-attr\">suit</span>: suits[pickedSuit], <span class=\"hljs-attr\">card</span>: x % <span class=\"hljs-number\">13</span> &#125;;\n    &#125;\n&#125;\n\n<span class=\"hljs-keyword\">let</span> myDeck = [&#123; <span class=\"hljs-attr\">suit</span>: <span class=\"hljs-string\">&quot;diamonds&quot;</span>, <span class=\"hljs-attr\">card</span>: <span class=\"hljs-number\">2</span> &#125;, &#123; <span class=\"hljs-attr\">suit</span>: <span class=\"hljs-string\">&quot;spades&quot;</span>, <span class=\"hljs-attr\">card</span>: <span class=\"hljs-number\">10</span> &#125;, &#123; <span class=\"hljs-attr\">suit</span>: <span class=\"hljs-string\">&quot;hearts&quot;</span>, <span class=\"hljs-attr\">card</span>: <span class=\"hljs-number\">4</span> &#125;];\n<span class=\"hljs-keyword\">let</span> pickedCard1 = myDeck[pickCard(myDeck)];\nalert(<span class=\"hljs-string\">&quot;card: &quot;</span> + pickedCard1.card + <span class=\"hljs-string\">&quot; of &quot;</span> + pickedCard1.suit);\n\n<span class=\"hljs-keyword\">let</span> pickedCard2 = pickCard(<span class=\"hljs-number\">15</span>);\nalert(<span class=\"hljs-string\">&quot;card: &quot;</span> + pickedCard2.card + <span class=\"hljs-string\">&quot; of &quot;</span> + pickedCard2.suit);</code></pre>\n\n<p><code>pickCard</code>方法根据传入参数的不同会返回两种不同的类型。 如果传入的是代表纸牌的对象，函数作用是从中抓一张牌。 如果用户想抓牌，我们告诉他抓到了什么牌。 但是这怎么在类型系统里表示呢。</p>\n<p>方法是为同一个函数提供多个函数类型定义来进行函数重载。 编译器会根据这个列表去处理函数的调用。 下面我们来重载<code>pickCard</code>函数。</p>\n<pre><code class=\"hljs typescript\"><span class=\"hljs-keyword\">let</span> suits = [<span class=\"hljs-string\">&quot;hearts&quot;</span>, <span class=\"hljs-string\">&quot;spades&quot;</span>, <span class=\"hljs-string\">&quot;clubs&quot;</span>, <span class=\"hljs-string\">&quot;diamonds&quot;</span>];\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">pickCard</span>(<span class=\"hljs-params\">x: &#123;suit: <span class=\"hljs-built_in\">string</span>; card: <span class=\"hljs-built_in\">number</span>; &#125;[]</span>): <span class=\"hljs-title\">number</span></span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">pickCard</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">number</span></span>): </span>&#123;suit: <span class=\"hljs-built_in\">string</span>; card: <span class=\"hljs-built_in\">number</span>; &#125;;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">pickCard</span>(<span class=\"hljs-params\">x</span>): <span class=\"hljs-title\">any</span> </span>&#123;\n    <span class=\"hljs-comment\">// Check to see if we&#x27;re working with an object/array</span>\n    <span class=\"hljs-comment\">// if so, they gave us the deck and we&#x27;ll pick the card</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> x == <span class=\"hljs-string\">&quot;object&quot;</span>) &#123;\n        <span class=\"hljs-keyword\">let</span> pickedCard = <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random() * x.length);\n        <span class=\"hljs-keyword\">return</span> pickedCard;\n    &#125;\n    <span class=\"hljs-comment\">// Otherwise just let them pick the card</span>\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> x == <span class=\"hljs-string\">&quot;number&quot;</span>) &#123;\n        <span class=\"hljs-keyword\">let</span> pickedSuit = <span class=\"hljs-built_in\">Math</span>.floor(x / <span class=\"hljs-number\">13</span>);\n        <span class=\"hljs-keyword\">return</span> &#123; <span class=\"hljs-attr\">suit</span>: suits[pickedSuit], <span class=\"hljs-attr\">card</span>: x % <span class=\"hljs-number\">13</span> &#125;;\n    &#125;\n&#125;\n\n<span class=\"hljs-keyword\">let</span> myDeck = [&#123; <span class=\"hljs-attr\">suit</span>: <span class=\"hljs-string\">&quot;diamonds&quot;</span>, <span class=\"hljs-attr\">card</span>: <span class=\"hljs-number\">2</span> &#125;, &#123; <span class=\"hljs-attr\">suit</span>: <span class=\"hljs-string\">&quot;spades&quot;</span>, <span class=\"hljs-attr\">card</span>: <span class=\"hljs-number\">10</span> &#125;, &#123; <span class=\"hljs-attr\">suit</span>: <span class=\"hljs-string\">&quot;hearts&quot;</span>, <span class=\"hljs-attr\">card</span>: <span class=\"hljs-number\">4</span> &#125;];\n<span class=\"hljs-keyword\">let</span> pickedCard1 = myDeck[pickCard(myDeck)];\nalert(<span class=\"hljs-string\">&quot;card: &quot;</span> + pickedCard1.card + <span class=\"hljs-string\">&quot; of &quot;</span> + pickedCard1.suit);\n\n<span class=\"hljs-keyword\">let</span> pickedCard2 = pickCard(<span class=\"hljs-number\">15</span>);\nalert(<span class=\"hljs-string\">&quot;card: &quot;</span> + pickedCard2.card + <span class=\"hljs-string\">&quot; of &quot;</span> + pickedCard2.suit);</code></pre>\n\n<p>这样改变后，重载的<code>pickCard</code>函数在调用的时候会进行正确的类型检查。</p>\n<p>为了让编译器能够选择正确的检查类型，它与JavaScript里的处理流程相似。 它查找重载列表，尝试使用第一个重载定义。 如果匹配的话就使用这个。 因此，在定义重载的时候，一定要把最精确的定义放在最前面。</p>\n<p>注意，<code>function pickCard(x): any</code>并不是重载列表的一部分，因此这里只有两个重载：一个是接收对象另一个接收数字。 以其它参数调用<code>pickCard</code>会产生错误。</p>\n","prev":{"title":" 你是哪种程序员？","slug":"other/a4323ac2b0"},"next":{"title":" 实时协同编辑的实现","slug":"javascript/18a23f4c21"},"categories":[{"name":"typescript","slug":"typescript","count":8,"path":"api/categories/typescript.json"}],"tags":[{"name":"typescript","slug":"typescript","count":8,"path":"api/tags/typescript.json"}]}