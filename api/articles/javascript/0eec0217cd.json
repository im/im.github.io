{"sort":10,"title":" JavaScript 实现前端下载图片","slug":"javascript/0eec0217cd","date":"2019-05-03T00:00:00.000Z","updated":"2021-06-17T11:25:09.047Z","comments":true,"path":"api/articles/javascript/0eec0217cd.json","photos":[],"link":"","excerpt":"实现思路  将图片装换成 Data URLs  下载图片Data URLsData URLs，即前缀为 data: 协议的的 URL，其允许内容创建者向文档中嵌入小文件。<br>Data URLs 由四个部分组成：前缀(data:)、指示数据类型的 MIME 类型、如果非文本则为可选的 base64 标记、数据本身：<br>data:[][;base64],<br>mediative 是个 MIME 类型的字符串，例如 “image/jpeg” 表示 JPEG 图像文件。如果被省略，则默认值为 text/plain;charset=US-ASCII<br>如果数据是文本类型，你可以直接将文本嵌入 (根据文档类型，使用合适的实体字符或转义字符)。如果是二进制数据，你可以将数据进行 base64 编码之后再进行嵌入。  详细请看 MDN 对 Data URLs 的解释。","covers":null,"content":"<h2 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h2><ul>\n<li>  将图片装换成 Data URLs</li>\n<li>  下载图片</li>\n</ul>\n<h4 id=\"Data-URLs\"><a href=\"#Data-URLs\" class=\"headerlink\" title=\"Data URLs\"></a>Data URLs</h4><blockquote>\n<p>Data URLs，即前缀为 data: 协议的的 URL，其允许内容创建者向文档中嵌入小文件。<br>Data URLs 由四个部分组成：前缀(data:)、指示数据类型的 MIME 类型、如果非文本则为可选的 base64 标记、数据本身：<br>data:[<mediatype>][;base64],<data><br>mediative 是个 MIME 类型的字符串，例如 “image/jpeg” 表示 JPEG 图像文件。如果被省略，则默认值为 text/plain;charset=US-ASCII<br>如果数据是文本类型，你可以直接将文本嵌入 (根据文档类型，使用合适的实体字符或转义字符)。如果是二进制数据，你可以将数据进行 base64 编码之后再进行嵌入。  </p>\n</blockquote>\n<p>详细请看 MDN 对 <a href=\"~https://developer.mozilla.org/zh-CN/docs/Web/HTTP/data_URIs~\">Data URLs</a> 的解释。</p>\n<a id=\"more\"></a>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>以下是获取图片 DataURL 的示例代码：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">/**</span>\n<span class=\"hljs-comment\">* 获取图片的 base64 编码 DataURL</span>\n<span class=\"hljs-comment\">* <span class=\"hljs-doctag\">@param </span>image JS 图像对象</span>\n<span class=\"hljs-comment\">* <span class=\"hljs-doctag\">@return <span class=\"hljs-type\">&#123;string&#125;</span> </span>已编码的 DataURL</span>\n<span class=\"hljs-comment\">*/</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">getImageDataURL</span>(<span class=\"hljs-params\">image</span>)</span> &#123;\n    <span class=\"hljs-comment\">// 创建画布</span>\n    <span class=\"hljs-keyword\">const</span> canvas = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">&#x27;canvas&#x27;</span>);\n    canvas.width = image.width;\n    canvas.height = image.height;\n    <span class=\"hljs-keyword\">const</span> ctx = canvas.getContext(<span class=\"hljs-string\">&#x27;2d&#x27;</span>);\n    <span class=\"hljs-comment\">// 以图片为背景剪裁画布</span>\n    ctx.drawImage(image, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, image.width, image.height);\n    <span class=\"hljs-comment\">// 获取图片后缀名</span>\n    <span class=\"hljs-keyword\">const</span> extension = image.src.substring(image.src.lastIndexOf(<span class=\"hljs-string\">&#x27;.&#x27;</span>) + <span class=\"hljs-number\">1</span>).toLowerCase();\n    <span class=\"hljs-comment\">// 某些图片 url 可能没有后缀名，默认是 png</span>\n    <span class=\"hljs-keyword\">return</span> canvas.toDataURL(<span class=\"hljs-string\">&#x27;image/&#x27;</span> + extension, <span class=\"hljs-number\">1</span>);\n&#125;</code></pre>\n\n<p>执行上面的函数后会返回如下面的格式一样的字符串</p>\n<pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">data</span>:image/png;base<span class=\"hljs-number\">64</span>,iVBORw<span class=\"hljs-number\">0</span>KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK<span class=\"hljs-number\">6</span>eAAAgAElEQVR<span class=\"hljs-number\">4</span>Xu<span class=\"hljs-number\">1</span>dB<span class=\"hljs-number\">3</span>hUxfb/bc<span class=\"hljs-number\">3</span>uppOeQOgIAioKCiqWJ/bysFd<span class=\"hljs-number\">89</span>vcXe<span class=\"hljs-number\">0</span>WfvSJ<span class=\"hljs-number\">2</span>wY<span class=\"hljs-number\">6</span>gPhX<span class=\"hljs-number\">1</span>WZ...</code></pre>\n\n<p>注意：图片越大，转换后的 base64 编码越长，尽量避免对大图进行 DataURL 转换，防止转换后的长度超出浏览器限制</p>\n<p>以下是下载图片的示例代码：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-title\">downLoad</span>(<span class=\"hljs-params\">downloadName, url</span>)</span> &#123;\n    <span class=\"hljs-keyword\">const</span> tag = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">&#x27;a&#x27;</span>);\n    <span class=\"hljs-comment\">// 此属性的值就是下载时图片的名称，注意，名称中不能有半角点，否则下载时后缀名会错误</span>\n    tag.setAttribute(<span class=\"hljs-string\">&#x27;download&#x27;</span>, downloadName.replace(<span class=\"hljs-regexp\">/\\./g</span>, <span class=\"hljs-string\">&#x27;。&#x27;</span>));\n\n    <span class=\"hljs-keyword\">const</span> image = <span class=\"hljs-keyword\">new</span> Image();\n    <span class=\"hljs-comment\">// 设置 image 的 url, 添加时间戳，防止浏览器缓存图片</span>\n    image.src = url + <span class=\"hljs-string\">&#x27;?time=&#x27;</span> + <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getTime();\n    <span class=\"hljs-comment\">//重要，设置 crossOrigin 属性，否则图片跨域会报错</span>\n    image.setAttribute(<span class=\"hljs-string\">&#x27;crossOrigin&#x27;</span>, <span class=\"hljs-string\">&#x27;Anonymous&#x27;</span>);\n    <span class=\"hljs-comment\">// 图片未加载完成时操作会报错</span>\n    image.onload = <span class=\"hljs-function\">() =&gt;</span> &#123;\n        tag.href = getImageDataURL(image);\n        tag.click();\n    &#125;;\n&#125;</code></pre>\n\n","prev":{"title":" git rebase -i","slug":"git/516fccc759"},"next":{"title":" JavaScript 内存泄漏教程","slug":"javascript/23d05c6dd2"},"categories":[{"name":"javascript","slug":"javascript","count":21,"path":"api/categories/javascript.json"}],"tags":[{"name":"javascript","slug":"javascript","count":25,"path":"api/tags/javascript.json"}]}