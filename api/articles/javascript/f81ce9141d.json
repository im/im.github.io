{"sort":14,"title":" Object.assign 是浅拷贝还是深拷贝？实现深拷贝的方法有哪些？","slug":"javascript/f81ce9141d","date":"2019-06-03T00:00:00.000Z","updated":"2021-06-17T11:25:09.047Z","comments":true,"path":"api/articles/javascript/f81ce9141d.json","photos":[],"link":"","excerpt":"Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。  如果目标对象中的属性具有相同的键，则属性将被源对象中的属性覆盖。后面的源对象的属性将类似地覆盖前面的源对象的属性。Object.assign 方法只会拷贝源对象自身的并且可枚举的属性到目标对象。该方法使用源对象的[[Get]]和目标对象的[[Set]]，所以它会调用相关 getter 和 setter。因此，它分配属性，而不仅仅是复制或定义新的属性。如果合并源包含getter，这可能使其不适合将新属性合并到原型中。为了将属性定义（包括其可枚举性）复制到原型，应使用Object.getOwnPropertyDescriptor()和Object.defineProperty() 。String类型和 Symbol 类型的属性都会被拷贝。在出现错误的情况下，例如，如果属性不可写，会引发TypeError，如果在引发错误之前添加了任何属性，则可以更改target对象。Object.assign 不会在那些source对象值为 null 或 undefined 的时候抛出错误。针对 深拷贝 ，需要使用其他办法，因为 Object.assign()拷贝的是属性值。假如源对象的属性值是一个对象的引用，那么它也只指向那个引用。也就是说，如果对象的属性值为简单类型（如string， number），通过Object.assign({},srcObj);得到的新对象为 深拷贝 ；如果属性值为对象或其它引用类型，那对于这个对象而言其实是 浅拷贝 的。","covers":null,"content":"<blockquote>\n<p>Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。  </p>\n</blockquote>\n<ul>\n<li><p>如果目标对象中的属性具有相同的键，则属性将被源对象中的属性覆盖。后面的源对象的属性将类似地覆盖前面的源对象的属性。</p>\n</li>\n<li><p>Object.assign 方法只会拷贝源对象自身的并且可枚举的属性到目标对象。该方法使用源对象的[[Get]]和目标对象的[[Set]]，所以它会调用相关 getter 和 setter。因此，它分配属性，而不仅仅是复制或定义新的属性。如果合并源包含getter，这可能使其不适合将新属性合并到原型中。为了将属性定义（包括其可枚举性）复制到原型，应使用Object.getOwnPropertyDescriptor()和Object.defineProperty() 。</p>\n</li>\n<li><p>String类型和 Symbol 类型的属性都会被拷贝。</p>\n</li>\n<li><p>在出现错误的情况下，例如，如果属性不可写，会引发TypeError，如果在引发错误之前添加了任何属性，则可以更改target对象。</p>\n</li>\n<li><p>Object.assign 不会在那些source对象值为 <code>null</code> 或 <code>undefined</code> 的时候抛出错误。</p>\n</li>\n<li><p>针对 <strong>深拷贝</strong> ，需要使用其他办法，因为 Object.assign()拷贝的是属性值。假如源对象的属性值是一个对象的引用，那么它也只指向那个引用。也就是说，如果对象的属性值为简单类型（如string， number），通过Object.assign({},srcObj);得到的新对象为 <code>深拷贝</code> ；如果属性值为对象或其它引用类型，那对于这个对象而言其实是 <code>浅拷贝</code> 的。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>用 JSON.stringify 把对象转换成字符串，再用 JSON.parse 把字符串转换成新的对象。  </p>\n</blockquote>\n</li>\n</ul>\n<p>可以转成 JSON 格式的对象才能使用这种方法，如果对象中包含 function 或 RegExp 这些就不能用这种方法了。</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">//通过js的内置对象JSON来进行数组对象的深拷贝</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">deepClone</span>(<span class=\"hljs-params\">obj</span>) </span>&#123;\n  <span class=\"hljs-keyword\">let</span> _obj = <span class=\"hljs-built_in\">JSON</span>.stringify(obj);\n  <span class=\"hljs-keyword\">let</span> objClone = <span class=\"hljs-built_in\">JSON</span>.parse(_obj);\n  <span class=\"hljs-keyword\">return</span> objClone;\n&#125;</code></pre>\n\n<h3 id=\"Object-assign-拷贝\"><a href=\"#Object-assign-拷贝\" class=\"headerlink\" title=\"Object.assign()拷贝\"></a>Object.assign()拷贝</h3><p>当对象中只有一级属性，没有二级属性的时候，此方法为深拷贝，但是对象中有对象的时候，此方法，在二级属性以后就是浅拷贝。</p>\n<h3 id=\"通过jQuery的extend方法实现深拷贝\"><a href=\"#通过jQuery的extend方法实现深拷贝\" class=\"headerlink\" title=\"通过jQuery的extend方法实现深拷贝\"></a>通过jQuery的extend方法实现深拷贝</h3><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> $ = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;jquery&#x27;</span>);\n<span class=\"hljs-keyword\">let</span> obj1 = &#123;\n   <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>,\n   <span class=\"hljs-attr\">b</span>: &#123;\n     <span class=\"hljs-attr\">f</span>: &#123;\n       <span class=\"hljs-attr\">g</span>: <span class=\"hljs-number\">1</span>\n     &#125;\n   &#125;,\n   <span class=\"hljs-attr\">c</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n&#125;;\n<span class=\"hljs-keyword\">let</span> obj2 = $.extend(<span class=\"hljs-literal\">true</span>, &#123;&#125;, obj1);</code></pre>\n\n<h3 id=\"lodash-cloneDeep-实现深拷贝\"><a href=\"#lodash-cloneDeep-实现深拷贝\" class=\"headerlink\" title=\"lodash.cloneDeep()实现深拷贝\"></a>lodash.cloneDeep()实现深拷贝</h3><pre><code class=\"hljs reasonml\"><span class=\"hljs-keyword\">let</span> _ = require(&#x27;lodash&#x27;);\n<span class=\"hljs-keyword\">let</span> obj1 = &#123;\n    a: <span class=\"hljs-number\">1</span>,\n    b: &#123; f: &#123; g: <span class=\"hljs-number\">1</span> &#125; &#125;,\n    c: <span class=\"hljs-literal\">[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]</span>\n&#125;;\n<span class=\"hljs-keyword\">let</span> obj2 = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_</span>.</span></span>clone<span class=\"hljs-constructor\">Deep(<span class=\"hljs-params\">obj1</span>)</span>;</code></pre>\n\n<h3 id=\"使用递归的方式实现深拷贝\"><a href=\"#使用递归的方式实现深拷贝\" class=\"headerlink\" title=\"使用递归的方式实现深拷贝\"></a>使用递归的方式实现深拷贝</h3><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">_deepClone</span>(<span class=\"hljs-params\">source</span>) </span>&#123;\n  <span class=\"hljs-keyword\">let</span> target;\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> source === <span class=\"hljs-string\">&#x27;object&#x27;</span>) &#123;\n    target = <span class=\"hljs-built_in\">Array</span>.isArray(source) ? [] : &#123;&#125;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> source) &#123;\n      <span class=\"hljs-keyword\">if</span> (source.hasOwnProperty(key)) &#123;\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> source[key] !== <span class=\"hljs-string\">&#x27;object&#x27;</span>) &#123;\n          target[key] = source[key]\n        &#125; <span class=\"hljs-keyword\">else</span> &#123;\n          target[key] = _deepClone(source[key])\n        &#125;\n      &#125;\n    &#125;\n  &#125; <span class=\"hljs-keyword\">else</span> &#123;\n    target = source\n  &#125;\n  <span class=\"hljs-keyword\">return</span> target\n&#125;</code></pre>\n\n\n<p><a href=\"https://www.cnblogs.com/LVBingo/p/11290637.html\">经典前端面试题: Object.assign 是浅拷贝还是深拷贝？实现深拷贝的方法有哪些？</a></p>\n","prev":{"title":" element-ui tabs的label slot不能及时动态更新","slug":"vue/017ad82dfe"},"next":{"title":" Mac 设置环境变量 path 的几种方法","slug":"other/4a3b3f2e02"},"categories":[{"name":"javascript","slug":"javascript","count":21,"path":"api/categories/javascript.json"}],"tags":[{"name":"javascript","slug":"javascript","count":25,"path":"api/tags/javascript.json"}]}