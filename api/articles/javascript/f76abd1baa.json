{"sort":26,"title":" 高阶函数","slug":"javascript/f76abd1baa","date":"2020-06-01T00:00:00.000Z","updated":"2021-06-17T11:25:09.047Z","comments":true,"path":"api/articles/javascript/f76abd1baa.json","photos":[],"link":"","excerpt":"JavaScript的函数可以指向某个变量，变量也可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。简单的高阶函数function add(x, y, f) &#123;    return f(x) + f(y);&#125;//当调用add(-5, 6, Math.abs)时，参数x，y和f分别接收-5，6和函数Math.abs，根据函数定义，可以推导计算过程为：//x = -5;//y = 6;//f = Math.abs;//f(x) + f(y) ==&gt; Math.abs(-5) + Math.abs(6) ==&gt; 11;//return 11;//用代码验证一下：add(-5, 6, Math.abs); // 11","covers":null,"content":"<p>JavaScript的函数可以指向某个变量，变量也可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为<code>高阶函数</code>。</p>\n<h2 id=\"简单的高阶函数\"><a href=\"#简单的高阶函数\" class=\"headerlink\" title=\"简单的高阶函数\"></a>简单的高阶函数</h2><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">x, y, f</span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> f(x) + f(y);\n&#125;\n<span class=\"hljs-comment\">//当调用add(-5, 6, Math.abs)时，参数x，y和f分别接收-5，6和函数Math.abs，根据函数定义，可以推导计算过程为：</span>\n<span class=\"hljs-comment\">//x = -5;</span>\n<span class=\"hljs-comment\">//y = 6;</span>\n<span class=\"hljs-comment\">//f = Math.abs;</span>\n<span class=\"hljs-comment\">//f(x) + f(y) ==&gt; Math.abs(-5) + Math.abs(6) ==&gt; 11;</span>\n<span class=\"hljs-comment\">//return 11;</span>\n\n<span class=\"hljs-comment\">//用代码验证一下：</span>\nadd(-<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-built_in\">Math</span>.abs); <span class=\"hljs-comment\">// 11</span></code></pre>\n<a id=\"more\"></a>\n<h2 id=\"常用的高阶函数\"><a href=\"#常用的高阶函数\" class=\"headerlink\" title=\"常用的高阶函数\"></a>常用的高阶函数</h2><h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h3><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">pow</span>(<span class=\"hljs-params\">x</span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> x * x;\n&#125;\n\n<span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>];\narr.map(pow); <span class=\"hljs-comment\">// [1, 4, 9, 16, 25, 36, 49, 64, 81]</span>\n\n<span class=\"hljs-comment\">//map()传入的参数是pow，即函数对象本身。</span>\n\n<span class=\"hljs-comment\">//不需要map()，写一个循环，也可以计算出结果：</span>\n\n<span class=\"hljs-keyword\">var</span> f = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">x</span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> x * x;\n&#125;;\n<span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>];\n<span class=\"hljs-keyword\">var</span> result = [];\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>; i&lt;arr.length; i++) &#123;\n    result.push(f(arr[i]));\n&#125;\n<span class=\"hljs-comment\">//的确可以，但是，从上面的循环代码，我们无法一眼看明白“把f(x)作用在Array的每一个元素并把结果生成一个新的Array”。</span></code></pre>\n\n<p>所以，map() 作为高阶函数，事实上它把运算规则抽象了，因此，我们不但可以计算简单的 f(x)=x2，还可以计算任意复杂的函数，比如，把 Array 的所有数字转为字符串：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>];\narr.map(<span class=\"hljs-built_in\">String</span>); <span class=\"hljs-comment\">// [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;]</span>\n<span class=\"hljs-comment\">//只需要一行代码。</span></code></pre>\n\n<h3 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h3><p>再看 <code>reduce</code> 的用法。Array 的 <code>reduce()</code> 把一个函数作用在这个 Array 的 [x1, x2, x3…] 上，这个函数必须接收两个参数，reduce() 把<strong>结果继续和序列的下一个元素</strong>做累积计算，其效果就是：</p>\n<pre><code class=\"hljs js\">[x1, x2, x3, x4].reduce(f) = f(f(f(x1, x2), x3), x4)\n<span class=\"hljs-comment\">//比方说对一个Array求和，就可以用reduce实现：</span>\n\n<span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>];\narr.reduce(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">x, y</span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> x + y;\n&#125;); <span class=\"hljs-comment\">// 25</span></code></pre>\n\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h3><p>filter 也是一个常用的操作，它用于把 Array 的某些元素过滤掉，然后返回剩下的元素。和 map() 类似，Array 的 filter() 也接收一个函数。和 map() 不同的是，filter() 把传入的函数依次作用于每个元素，然后根据返回值是 true 还是 false 决定保留还是丢弃该元素。</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">//例如，在一个Array中，删掉偶数，只保留奇数，可以这么写：</span>\n<span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">15</span>];\n<span class=\"hljs-keyword\">var</span> r = arr.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">x</span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> x % <span class=\"hljs-number\">2</span> !== <span class=\"hljs-number\">0</span>;\n&#125;);\nr; <span class=\"hljs-comment\">// [1, 5, 9, 15]</span>\n\n<span class=\"hljs-comment\">//把一个Array中的空字符串删掉，可以这么写：</span>\n<span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-string\">&#x27;B&#x27;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-string\">&#x27;C&#x27;</span>, <span class=\"hljs-string\">&#x27;  &#x27;</span>];\n<span class=\"hljs-keyword\">var</span> r = arr.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">s</span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> s &amp;&amp; s.trim(); <span class=\"hljs-comment\">// 注意：IE9以下的版本没有trim()方法</span>\n&#125;);\narr; <span class=\"hljs-comment\">// [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span></code></pre>\n\n<p>回调函数：filter() 接收的回调函数，其实可以有多个参数。通常我们仅使用第一个参数，表示 Array 的某个元素。回调函数还可以接收另外两个参数，表示元素的位置和数组本身：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-string\">&#x27;B&#x27;</span>, <span class=\"hljs-string\">&#x27;C&#x27;</span>];\n<span class=\"hljs-keyword\">var</span> r = arr.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">element, index, self</span>) </span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(element); <span class=\"hljs-comment\">// 依次打印&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;</span>\n    <span class=\"hljs-built_in\">console</span>.log(index); <span class=\"hljs-comment\">// 依次打印0, 1, 2</span>\n    <span class=\"hljs-built_in\">console</span>.log(self); <span class=\"hljs-comment\">// self就是变量arr</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n&#125;);\n\n<span class=\"hljs-comment\">//利用filter，可以巧妙地去除Array的重复元素：</span>\n\n<span class=\"hljs-meta\">&#x27;use strict&#x27;</span>;\n<span class=\"hljs-keyword\">var</span> r,\n    arr = [<span class=\"hljs-string\">&#x27;apple&#x27;</span>, <span class=\"hljs-string\">&#x27;strawberry&#x27;</span>, <span class=\"hljs-string\">&#x27;banana&#x27;</span>, <span class=\"hljs-string\">&#x27;pear&#x27;</span>, <span class=\"hljs-string\">&#x27;apple&#x27;</span>, <span class=\"hljs-string\">&#x27;orange&#x27;</span>, <span class=\"hljs-string\">&#x27;orange&#x27;</span>, <span class=\"hljs-string\">&#x27;strawberry&#x27;</span>];\nr = arr.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">element, index, self</span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> self.indexOf(element) === index;\n&#125;);\nalert(r.toString());\n<span class=\"hljs-comment\">//去除重复元素依靠的是indexOf总是返回第一个元素的位置，后续的重复元素位置与indexOf返回的位置不相等，因此被filter滤掉了。</span></code></pre>\n\n<h3 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort\"></a>sort</h3><p>因为 Array 的 <strong>sort()方法默认把所有元素先转换为String再排序，结果’10’排在了’2’的前面</strong>，因为字符’1’比字符’2’的ASCII码小。如果不知道 sort() 方法的默认排序规则，直接对数字排序，绝对栽进坑里！</p>\n<p>幸运的是，sort() 方法也是一个高阶函数，它还可以接收一个比较函数来实现自定义的排序。</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">//要按数字大小排序，我们可以这么写：</span>\n<span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>];\narr.sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">x, y</span>) </span>&#123;\n    <span class=\"hljs-keyword\">if</span> (x &lt; y) &#123;\n        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\n    &#125;\n    <span class=\"hljs-keyword\">if</span> (x &gt; y) &#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    &#125;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n&#125;); <span class=\"hljs-comment\">// [1, 2, 10, 20]</span>\n\n<span class=\"hljs-comment\">//如果要倒序排序，我们可以把大的数放前面：</span>\n<span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>];\narr.sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">x, y</span>) </span>&#123;\n    <span class=\"hljs-keyword\">if</span> (x &lt; y) &#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    &#125;\n    <span class=\"hljs-keyword\">if</span> (x &gt; y) &#123;\n        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\n    &#125;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n&#125;); <span class=\"hljs-comment\">// [20, 10, 2, 1]</span>\n\n<span class=\"hljs-comment\">//默认情况下，对字符串排序，是按照ASCII的大小比较的，现在，排序应该忽略大小写，按照字母序排序。</span>\n<span class=\"hljs-comment\">//要实现这个算法，不必对现有代码大加改动，只要我们能定义出忽略大小写的比较算法就可以：</span>\n\n<span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-string\">&#x27;Google&#x27;</span>, <span class=\"hljs-string\">&#x27;apple&#x27;</span>, <span class=\"hljs-string\">&#x27;Microsoft&#x27;</span>];\narr.sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">s1, s2</span>) </span>&#123;\n    x1 = s1.toUpperCase();\n    x2 = s2.toUpperCase();\n    <span class=\"hljs-keyword\">if</span> (x1 &lt; x2) &#123;\n        <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;\n    &#125;\n    <span class=\"hljs-keyword\">if</span> (x1 &gt; x2) &#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    &#125;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n&#125;); <span class=\"hljs-comment\">// [&#x27;apple&#x27;, &#x27;Google&#x27;, &#x27;Microsoft&#x27;]</span>\n\n<span class=\"hljs-comment\">//忽略大小写来比较两个字符串，实际上就是先把字符串都变成大写（或者都变成小写），再比较。</span>\n\n<span class=\"hljs-comment\">//sort()方法会直接对Array进行修改，它返回的结果仍是当前Array：</span>\n<span class=\"hljs-keyword\">var</span> a1 = [<span class=\"hljs-string\">&#x27;B&#x27;</span>, <span class=\"hljs-string\">&#x27;A&#x27;</span>, <span class=\"hljs-string\">&#x27;C&#x27;</span>];\n<span class=\"hljs-keyword\">var</span> a2 = a1.sort();\na1; <span class=\"hljs-comment\">// [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span>\na2; <span class=\"hljs-comment\">// [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span>\na1 === a2; <span class=\"hljs-comment\">// true, a1和a2是同一对象 </span></code></pre>\n\n\n\n\n","prev":{"title":" 7. HTML全局属性(global attribute)有哪些（包含H5）？","slug":"interview/09a7ebb8b8"},"next":{"title":" 编写JavaScript的10个小技巧","slug":"javascript/23752932d8"},"categories":[{"name":"javascript","slug":"javascript","count":21,"path":"api/categories/javascript.json"}],"tags":[{"name":"javascript","slug":"javascript","count":25,"path":"api/tags/javascript.json"}]}