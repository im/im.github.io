{"sort":38,"title":" 数组扁平化","slug":"javascript/fa59b4bb32","date":"2021-02-03T05:36:57.000Z","updated":"2021-06-17T11:25:09.047Z","comments":true,"path":"api/articles/javascript/fa59b4bb32.json","photos":[],"link":"","excerpt":"Array.prototype.flat()flat() 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。const arr1 = [0, 1, 2, [3, 4]];console.log(arr1.flat());// expected output: [0, 1, 2, 3, 4]const arr2 = [0, 1, 2, [[[3, 4]]]];console.log(arr2.flat(2));// expected output: [0, 1, 2, [3, 4]]","covers":null,"content":"<h1 id=\"Array-prototype-flat\"><a href=\"#Array-prototype-flat\" class=\"headerlink\" title=\"Array.prototype.flat()\"></a>Array.prototype.flat()</h1><p><strong>flat()</strong> 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> arr1 = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]];\n\n<span class=\"hljs-built_in\">console</span>.log(arr1.flat());\n<span class=\"hljs-comment\">// expected output: [0, 1, 2, 3, 4]</span>\n\n<span class=\"hljs-keyword\">const</span> arr2 = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, [[[<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]]]];\n\n<span class=\"hljs-built_in\">console</span>.log(arr2.flat(<span class=\"hljs-number\">2</span>));\n<span class=\"hljs-comment\">// expected output: [0, 1, 2, [3, 4]]</span>\n</code></pre>\n\n<a id=\"more\"></a>\n\n<h2 id=\"替代方案\"><a href=\"#替代方案\" class=\"headerlink\" title=\"替代方案\"></a>替代方案</h2><p>使用 reduce 与 concat</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]];\n\n<span class=\"hljs-comment\">// 展开一层数组</span>\narr.flat();\n<span class=\"hljs-comment\">// 等效于</span>\narr.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, val</span>) =&gt;</span> acc.concat(val), []);\n<span class=\"hljs-comment\">// [1, 2, 3, 4]</span>\n\n<span class=\"hljs-comment\">// 使用扩展运算符 ...</span>\n<span class=\"hljs-keyword\">const</span> flattened = <span class=\"hljs-function\"><span class=\"hljs-params\">arr</span> =&gt;</span> [].concat(...arr);\n</code></pre>\n\n<h2 id=\"reduce-concat-isArray-recursivity\"><a href=\"#reduce-concat-isArray-recursivity\" class=\"headerlink\" title=\"reduce + concat + isArray + recursivity\"></a>reduce + concat + isArray + recursivity</h2><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 使用 reduce、concat 和递归展开无限多层嵌套的数组</span>\n<span class=\"hljs-keyword\">var</span> arr1 = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>, [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>]]];\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">flatDeep</span>(<span class=\"hljs-params\">arr, d = <span class=\"hljs-number\">1</span></span>) </span>&#123;\n   <span class=\"hljs-keyword\">return</span> d &gt; <span class=\"hljs-number\">0</span> ? arr.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, val</span>) =&gt;</span> acc.concat(<span class=\"hljs-built_in\">Array</span>.isArray(val) ? flatDeep(val, d - <span class=\"hljs-number\">1</span>) : val), [])\n                : arr.slice();\n&#125;;\n\nflatDeep(arr1, <span class=\"hljs-literal\">Infinity</span>);\n<span class=\"hljs-comment\">// [1, 2, 3, 1, 2, 3, 4, 2, 3, 4]</span>\n</code></pre>\n\n<h3 id=\"forEach-isArray-push-recursivity\"><a href=\"#forEach-isArray-push-recursivity\" class=\"headerlink\" title=\"forEach + isArray + push + recursivity\"></a>forEach + isArray + push + recursivity</h3><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// forEach 遍历数组会自动跳过空元素</span>\n<span class=\"hljs-keyword\">const</span> eachFlat = <span class=\"hljs-function\">(<span class=\"hljs-params\">arr = [], depth = <span class=\"hljs-number\">1</span></span>) =&gt;</span> &#123;\n  <span class=\"hljs-keyword\">const</span> result = []; <span class=\"hljs-comment\">// 缓存递归结果</span>\n  <span class=\"hljs-comment\">// 开始递归</span>\n  (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">flat</span>(<span class=\"hljs-params\">arr, depth</span>) </span>&#123;\n    <span class=\"hljs-comment\">// forEach 会自动去除数组空位</span>\n    arr.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> &#123;\n      <span class=\"hljs-comment\">// 控制递归深度</span>\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Array</span>.isArray(item) &amp;&amp; depth &gt; <span class=\"hljs-number\">0</span>) &#123;\n        <span class=\"hljs-comment\">// 递归数组</span>\n        flat(item, depth - <span class=\"hljs-number\">1</span>)\n      &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        <span class=\"hljs-comment\">// 缓存元素</span>\n        result.push(item)\n      &#125;\n    &#125;)\n  &#125;)(arr, depth)\n  <span class=\"hljs-comment\">// 返回递归结果</span>\n  <span class=\"hljs-keyword\">return</span> result;\n&#125;\n\n<span class=\"hljs-comment\">// for of 循环不能去除数组空位，需要手动去除</span>\n<span class=\"hljs-keyword\">const</span> forFlat = <span class=\"hljs-function\">(<span class=\"hljs-params\">arr = [], depth = <span class=\"hljs-number\">1</span></span>) =&gt;</span> &#123;\n  <span class=\"hljs-keyword\">const</span> result = [];\n  (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">flat</span>(<span class=\"hljs-params\">arr, depth</span>) </span>&#123;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> item <span class=\"hljs-keyword\">of</span> arr) &#123;\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Array</span>.isArray(item) &amp;&amp; depth &gt; <span class=\"hljs-number\">0</span>) &#123;\n        flat(item, depth - <span class=\"hljs-number\">1</span>)\n      &#125; <span class=\"hljs-keyword\">else</span> &#123;\n        <span class=\"hljs-comment\">// 去除空元素，添加非undefined元素</span>\n        item !== <span class=\"hljs-keyword\">void</span> <span class=\"hljs-number\">0</span> &amp;&amp; result.push(item);\n      &#125;\n    &#125;\n  &#125;)(arr, depth)\n  <span class=\"hljs-keyword\">return</span> result;\n&#125;\n</code></pre>\n\n<h2 id=\"使用堆栈stack\"><a href=\"#使用堆栈stack\" class=\"headerlink\" title=\"使用堆栈stack\"></a>使用堆栈stack</h2><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 无递归数组扁平化，使用堆栈</span>\n<span class=\"hljs-comment\">// 注意：深度的控制比较低效，因为需要检查每一个值的深度</span>\n<span class=\"hljs-comment\">// 也可能在 shift / unshift 上进行 w/o 反转，但是末端的数组 OPs 更快</span>\n<span class=\"hljs-keyword\">var</span> arr1 = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>, [<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>]]];\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">flatten</span>(<span class=\"hljs-params\">input</span>) </span>&#123;\n  <span class=\"hljs-keyword\">const</span> stack = [...input];\n  <span class=\"hljs-keyword\">const</span> res = [];\n  <span class=\"hljs-keyword\">while</span> (stack.length) &#123;\n    <span class=\"hljs-comment\">// 使用 pop 从 stack 中取出并移除值</span>\n    <span class=\"hljs-keyword\">const</span> next = stack.pop();\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Array</span>.isArray(next)) &#123;\n      <span class=\"hljs-comment\">// 使用 push 送回内层数组中的元素，不会改动原始输入</span>\n      stack.push(...next);\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n      res.push(next);\n    &#125;\n  &#125;\n  <span class=\"hljs-comment\">// 反转恢复原数组的顺序</span>\n  <span class=\"hljs-keyword\">return</span> res.reverse();\n&#125;\nflatten(arr1);<span class=\"hljs-comment\">// [1, 2, 3, 1, 2, 3, 4, 2, 3, 4]</span>\n</code></pre>\n\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 递归版本的反嵌套</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">flatten</span>(<span class=\"hljs-params\">array</span>) </span>&#123;\n  <span class=\"hljs-keyword\">var</span> flattend = [];\n  (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">flat</span>(<span class=\"hljs-params\">array</span>) </span>&#123;\n    array.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el</span>) </span>&#123;\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Array</span>.isArray(el)) flat(el);\n      <span class=\"hljs-keyword\">else</span> flattend.push(el);\n    &#125;);\n  &#125;)(array);\n  <span class=\"hljs-keyword\">return</span> flattend;\n&#125;\n</code></pre>\n\n","prev":{"title":" 函数柯里化","slug":"javascript/9b990bb119"},"next":{"title":" 你是哪种程序员？","slug":"other/a4323ac2b0"},"categories":[{"name":"javascript","slug":"javascript","count":21,"path":"api/categories/javascript.json"}],"tags":[{"name":"javascript","slug":"javascript","count":25,"path":"api/tags/javascript.json"}]}