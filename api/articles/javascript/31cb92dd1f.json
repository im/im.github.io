{"sort":34,"title":" 偏函数","slug":"javascript/31cb92dd1f","date":"2021-01-03T00:00:00.000Z","updated":"2021-06-17T11:25:09.047Z","comments":true,"path":"api/articles/javascript/31cb92dd1f.json","photos":[],"link":"","excerpt":"偏函数是 [[函数柯里化]]  运算的一种特定应用场景。简单描述，就是把一个函数的某些参数先固化，也就是设置默认值，返回一个新的函数，在新函数中继续接收剩余参数，这样调用这个新函数会更简单。下面是一个类型检测函数，接收两个参数，第 1 个表示类型字符串，第 2 个表示检测的数据。var isType = function (type, obj) &#123;  //偏函数    return Object.prototype.toString.call(obj) == &#x27;[object &#x27; + type + &#x27;]&#x27;;&#125;","covers":null,"content":"<p>偏函数是 [[函数柯里化]]  运算的一种特定应用场景。简单描述，就是把一个函数的某些参数先固化，也就是设置默认值，返回一个新的函数，在新函数中继续接收剩余参数，这样调用这个新函数会更简单。</p>\n<p><strong>下面是一个类型检测函数，接收两个参数，第 1 个表示类型字符串，第 2 个表示检测的数据。</strong></p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> isType = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">type, obj</span>) </span>&#123;  <span class=\"hljs-comment\">//偏函数</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Object</span>.prototype.toString.call(obj) == <span class=\"hljs-string\">&#x27;[object &#x27;</span> + type + <span class=\"hljs-string\">&#x27;]&#x27;</span>;\n&#125;</code></pre>\n<a id=\"more\"></a>\n\n<p><strong>该函数包含两个设置参数，使用时比较繁琐。一般常按以下方式进行设计。</strong></p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> isString = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">obj</span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Object</span>.prototype.toString.call(obj) == <span class=\"hljs-string\">&#x27;[object  String]&#x27;</span>;\n&#125;;\n<span class=\"hljs-keyword\">var</span> isFunction = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">obj</span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Object</span>.prototype.toString.call(obj) == <span class=\"hljs-string\">&#x27;[object  Function]&#x27;</span>;\n&#125;;</code></pre>\n\n<p><strong>函数接收的参数单一，检测的功能也单一和明确，这样更便于在表达式运算中有针对性的调用。下面对 isType() 函数进行扁平化设计，代码如下：</strong></p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> isType = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">type</span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">obj</span>) </span>&#123;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Object</span>.prototype.toString.call(obj) == <span class=\"hljs-string\">&#x27;[object &#x27;</span> + type + <span class=\"hljs-string\">&#x27;]&#x27;</span>;\n    &#125;\n&#125;</code></pre>\n\n<p><strong>然后根据 JS 偏函数获取不同类型检测函数。</strong></p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> isString = isType(<span class=\"hljs-string\">&quot;String&quot;</span>);  <span class=\"hljs-comment\">//专一功能检测函数，检测字符串</span>\n<span class=\"hljs-keyword\">var</span> isFunction = isType(<span class=\"hljs-string\">&quot;Function&quot;</span>);  <span class=\"hljs-comment\">//专一功能检测函数，检测字符串</span></code></pre>\n\n<p><strong>应用代码如下：</strong></p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">console</span>.log(isString(<span class=\"hljs-string\">&quot;12&quot;</span>));  <span class=\"hljs-comment\">//true</span>\n<span class=\"hljs-built_in\">console</span>.log(isFunction(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;&#125;));  <span class=\"hljs-comment\">//true</span>\n<span class=\"hljs-built_in\">console</span>.log(isFunction(&#123;&#125;));  <span class=\"hljs-comment\">//false</span></code></pre>\n\n<p><strong>下面示例设计一个 wrap() 偏函数，该函数的主要功能是产生一个 HTML 包裹函数，即样式标签。</strong></p>\n<pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">wrap</span>(<span class=\"hljs-params\">tag</span>) </span>&#123;\n    <span class=\"hljs-keyword\">var</span> stag = <span class=\"hljs-string\">&#x27;&lt;&#x27;</span> + tag + <span class=\"hljs-string\">&#x27;&gt;&#x27;</span>;\n    <span class=\"hljs-keyword\">var</span> etag = <span class=\"hljs-string\">&#x27;&lt;/&#x27;</span> + tag.replace(<span class=\"hljs-regexp\">/s.*/</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>) + <span class=\"hljs-string\">&#x27;&gt;&#x27;</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x</span>) </span>&#123;\n        <span class=\"hljs-keyword\">return</span> stag + x + etag;\n    &#125;\n&#125;\n<span class=\"hljs-keyword\">var</span> b = wrap(<span class=\"hljs-string\">&#x27;b&#x27;</span>);\n<span class=\"hljs-built_in\">document</span>.write(b(<span class=\"hljs-string\">&#x27;粗体字&#x27;</span>));\n<span class=\"hljs-keyword\">var</span> i = wrap(<span class=\"hljs-string\">&#x27;i&#x27;</span>);\n<span class=\"hljs-built_in\">document</span>.write(i(<span class=\"hljs-string\">&#x27;斜体字&#x27;</span>));\n<span class=\"hljs-keyword\">var</span> u = wrap(<span class=\"hljs-string\">&#x27;u&#x27;</span>);\n<span class=\"hljs-built_in\">document</span>.write(u(<span class=\"hljs-string\">&#x27;下划线字&#x27;</span>));</code></pre>\n\n","prev":{"title":" 实时协同编辑的实现","slug":"javascript/18a23f4c21"},"next":{"title":" JS事件循环（Event Loop）","slug":"javascript/ef320f6e2a"},"categories":[{"name":"javascript","slug":"javascript","count":21,"path":"api/categories/javascript.json"}],"tags":[{"name":"javascript","slug":"javascript","count":25,"path":"api/tags/javascript.json"}]}