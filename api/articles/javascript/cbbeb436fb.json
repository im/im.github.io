{"sort":44,"title":" JavaScript里的循环方法：forEach，for-in，for-of","slug":"javascript/cbbeb436fb","date":"2021-04-03T02:02:28.000Z","updated":"2021-06-17T11:25:09.047Z","comments":true,"path":"api/articles/javascript/cbbeb436fb.json","photos":[],"link":"","excerpt":"JavaScript诞生已经有20多年了，我们一直使用的用来循环一个数组的方法是这样的：for (var index = 0; index &lt; myArray.length; index++) &#123;  console.log(myArray[index]);&#125;自从JavaScript5起，我们开始可以使用内置的 forEach 方法：myArray.forEach(function (value) &#123;  console.log(value);&#125;);写法简单了许多，但也有短处：你不能中断循环(使用break语句或使用return语句。<br>JavaScript里还有一种循环方法：for–in。<br>for-in 循环实际是为循环enumerable对象而设计的：var obj = &#123;a:1, b:2, c:3&#125;;    for (var prop in obj) &#123;  console.log(&quot;obj.&quot; + prop + &quot; = &quot; + obj[prop]);&#125;// 输出:// &quot;obj.a = 1&quot;// &quot;obj.b = 2&quot;// &quot;obj.c = 3&quot;你也可以用它来循环一个数组：for (var index in myArray) &#123;    // 不推荐这样  console.log(myArray[index]);&#125;不推荐用for-in来循环一个数组，因为，不像对象，数组的index跟普通的对象属性不一样，是重要的数值序列指标。<br>总之，for–in是用来循环带有字符串key的对象的方法。","covers":null,"content":"<p>JavaScript诞生已经有20多年了，我们一直使用的用来循环一个数组的方法是这样的：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> index = <span class=\"hljs-number\">0</span>; index &lt; myArray.length; index++) &#123;\n  <span class=\"hljs-built_in\">console</span>.log(myArray[index]);\n&#125;</code></pre>\n\n<p>自从JavaScript5起，我们开始可以使用内置的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\">forEach</a> 方法：</p>\n<pre><code class=\"hljs js\">myArray.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) </span>&#123;\n  <span class=\"hljs-built_in\">console</span>.log(value);\n&#125;);</code></pre>\n\n<p>写法简单了许多，但也有短处：你不能中断循环(使用break语句或使用return语句。<br>JavaScript里还有一种循环方法：for–in。<br>for-in 循环实际是为循环<strong>enumerable</strong>对象而设计的：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> obj = &#123;<span class=\"hljs-attr\">a</span>:<span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>:<span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">c</span>:<span class=\"hljs-number\">3</span>&#125;;\n    \n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> prop <span class=\"hljs-keyword\">in</span> obj) &#123;\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&quot;obj.&quot;</span> + prop + <span class=\"hljs-string\">&quot; = &quot;</span> + obj[prop]);\n&#125;\n\n<span class=\"hljs-comment\">// 输出:</span>\n<span class=\"hljs-comment\">// &quot;obj.a = 1&quot;</span>\n<span class=\"hljs-comment\">// &quot;obj.b = 2&quot;</span>\n<span class=\"hljs-comment\">// &quot;obj.c = 3&quot;</span></code></pre>\n\n<p>你也可以用它来循环一个数组：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> index <span class=\"hljs-keyword\">in</span> myArray) &#123;    <span class=\"hljs-comment\">// 不推荐这样</span>\n  <span class=\"hljs-built_in\">console</span>.log(myArray[index]);\n&#125;</code></pre>\n\n<p>不推荐用for-in来循环一个数组，因为，不像对象，数组的index跟普通的对象属性不一样，是重要的数值序列指标。<br>总之，for–in是用来循环带有字符串key的对象的方法。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"for-of循环\"><a href=\"#for-of循环\" class=\"headerlink\" title=\"for-of循环\"></a>for-of循环</h2><p>JavaScript6里引入了一种新的循环方法，它就是for-of循环，它既比传统的for循环简洁，同时弥补了forEach和for-in循环的短板。<br>我们看一下它的for-of的语法：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> value <span class=\"hljs-keyword\">of</span> myArray) &#123;\n  <span class=\"hljs-built_in\">console</span>.log(value);\n&#125;</code></pre>\n\n<p>for-of的语法看起来跟for-in很相似，但它的功能却丰富的多，它能循环很多东西。</p>\n<h2 id=\"for-of循环使用例子：\"><a href=\"#for-of循环使用例子：\" class=\"headerlink\" title=\"for-of循环使用例子：\"></a>for-of循环使用例子：</h2><h3 id=\"循环一个数组-Array\"><a href=\"#循环一个数组-Array\" class=\"headerlink\" title=\"循环一个数组(Array):\"></a>循环一个数组(Array):</h3><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> iterable = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>];\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> value <span class=\"hljs-keyword\">of</span> iterable) &#123;\n  <span class=\"hljs-built_in\">console</span>.log(value);\n&#125;\n<span class=\"hljs-comment\">// 10</span>\n<span class=\"hljs-comment\">// 20</span>\n<span class=\"hljs-comment\">// 30</span></code></pre>\n\n<p>我们可以使用const来替代let，这样它就变成了在循环里的不可修改的静态变量。</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> iterable = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>];\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> value <span class=\"hljs-keyword\">of</span> iterable) &#123;\n  <span class=\"hljs-built_in\">console</span>.log(value);\n&#125;\n<span class=\"hljs-comment\">// 10</span>\n<span class=\"hljs-comment\">// 20</span>\n<span class=\"hljs-comment\">// 30</span></code></pre>\n\n<h3 id=\"循环一个字符串：\"><a href=\"#循环一个字符串：\" class=\"headerlink\" title=\"循环一个字符串：\"></a>循环一个字符串：</h3><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> iterable = <span class=\"hljs-string\">&quot;boo&quot;</span>;\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> value <span class=\"hljs-keyword\">of</span> iterable) &#123;\n  <span class=\"hljs-built_in\">console</span>.log(value);\n&#125;\n<span class=\"hljs-comment\">// &quot;b&quot;</span>\n<span class=\"hljs-comment\">// &quot;o&quot;</span>\n<span class=\"hljs-comment\">// &quot;o&quot;</span></code></pre>\n\n<h3 id=\"循环一个类型化的数组-TypedArray-：\"><a href=\"#循环一个类型化的数组-TypedArray-：\" class=\"headerlink\" title=\"循环一个类型化的数组(TypedArray)：\"></a>循环一个类型化的数组(TypedArray)：</h3><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> iterable = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Uint8Array</span>([<span class=\"hljs-number\">0x00</span>, <span class=\"hljs-number\">0xff</span>]);\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> value <span class=\"hljs-keyword\">of</span> iterable) &#123;\n  <span class=\"hljs-built_in\">console</span>.log(value);\n&#125;\n<span class=\"hljs-comment\">// 0</span>\n<span class=\"hljs-comment\">// 255</span></code></pre>\n\n<h3 id=\"循环一个Map\"><a href=\"#循环一个Map\" class=\"headerlink\" title=\"循环一个Map:\"></a>循环一个Map:</h3><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> iterable = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([[<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-number\">3</span>]]);\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> [key, value] <span class=\"hljs-keyword\">of</span> iterable) &#123;\n  <span class=\"hljs-built_in\">console</span>.log(value);\n&#125;\n<span class=\"hljs-comment\">// 1</span>\n<span class=\"hljs-comment\">// 2</span>\n<span class=\"hljs-comment\">// 3</span>\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> entry <span class=\"hljs-keyword\">of</span> iterable) &#123;\n  <span class=\"hljs-built_in\">console</span>.log(entry);\n&#125;\n<span class=\"hljs-comment\">// [a, 1]</span>\n<span class=\"hljs-comment\">// [b, 2]</span>\n<span class=\"hljs-comment\">// [c, 3]</span></code></pre>\n\n<h3 id=\"循环一个Set\"><a href=\"#循环一个Set\" class=\"headerlink\" title=\"循环一个Set:\"></a>循环一个Set:</h3><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> iterable = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Set</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>]);\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> value <span class=\"hljs-keyword\">of</span> iterable) &#123;\n  <span class=\"hljs-built_in\">console</span>.log(value);\n&#125;\n<span class=\"hljs-comment\">// 1</span>\n<span class=\"hljs-comment\">// 2</span>\n<span class=\"hljs-comment\">// 3</span></code></pre>\n\n<h3 id=\"循环一个-DOM-collection\"><a href=\"#循环一个-DOM-collection\" class=\"headerlink\" title=\"循环一个 DOM collection\"></a>循环一个 DOM collection</h3><p>循环一个DOM collections，比如NodeList，之前我们讨论过 <a href=\"http://www.webhek.com/foreach-queryselectorall-nodelist\">如何循环一个NodeList</a> ，现在方便了，可以直接使用for-of循环：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">// Note: This will only work in platforms that have</span>\n<span class=\"hljs-comment\">// implemented NodeList.prototype[Symbol.iterator]</span>\n<span class=\"hljs-keyword\">let</span> articleParagraphs = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">&quot;article &gt; p&quot;</span>);\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> paragraph <span class=\"hljs-keyword\">of</span> articleParagraphs) &#123;\n  paragraph.classList.add(<span class=\"hljs-string\">&quot;read&quot;</span>);\n&#125;</code></pre>\n\n<h3 id=\"循环一个拥有enumerable属性的对象\"><a href=\"#循环一个拥有enumerable属性的对象\" class=\"headerlink\" title=\"循环一个拥有enumerable属性的对象\"></a>循环一个拥有enumerable属性的对象</h3><p>for–of循环并不能直接使用在普通的对象上，但如果我们按对象所拥有的属性进行循环，可使用内置的Object.keys()方法：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> key <span class=\"hljs-keyword\">of</span> <span class=\"hljs-built_in\">Object</span>.keys(someObject)) &#123;\n  <span class=\"hljs-built_in\">console</span>.log(key + <span class=\"hljs-string\">&quot;: &quot;</span> + someObject[key]);\n&#125;</code></pre>\n\n<h3 id=\"循环一个生成器-generators\"><a href=\"#循环一个生成器-generators\" class=\"headerlink\" title=\"循环一个生成器(generators)\"></a>循环一个生成器(generators)</h3><p>我们可循环一个生成器( <a href=\"https://www.webhek.com/en-US/docs/Web/JavaScript/Reference/Statements/function*\">generators</a> ):</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title\">fibonacci</span>(<span class=\"hljs-params\"></span>) </span>&#123; <span class=\"hljs-comment\">// a generator function</span>\n  <span class=\"hljs-keyword\">let</span> [prev, curr] = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>];\n  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;\n    [prev, curr] = [curr, prev + curr];\n    <span class=\"hljs-keyword\">yield</span> curr;\n  &#125;\n&#125;\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> n <span class=\"hljs-keyword\">of</span> fibonacci()) &#123;\n  <span class=\"hljs-built_in\">console</span>.log(n);\n  <span class=\"hljs-comment\">// truncate the sequence at 1000</span>\n  <span class=\"hljs-keyword\">if</span> (n &gt;= <span class=\"hljs-number\">1000</span>) &#123;\n    <span class=\"hljs-keyword\">break</span>;\n  &#125;\n&#125;</code></pre>\n\n\n","prev":{"title":" 类","slug":"typescript/98dfa9bae0"},"next":{"title":" nodejs 搭建本地服务器 展示文件夹","slug":"javascript/51fcfc72c9"},"categories":[{"name":"javascript","slug":"javascript","count":21,"path":"api/categories/javascript.json"}],"tags":[{"name":"javascript","slug":"javascript","count":25,"path":"api/tags/javascript.json"}]}