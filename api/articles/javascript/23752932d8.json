{"sort":25,"title":" 编写JavaScript的10个小技巧","slug":"javascript/23752932d8","date":"2020-04-05T00:00:00.000Z","updated":"2021-06-17T11:25:09.047Z","comments":true,"path":"api/articles/javascript/23752932d8.json","photos":[],"link":"","excerpt":"简化条件表达式经常碰到这种情况，要判断某个变量是否为指定的某些值，用常规的逻辑表达式会很长。我的做法是把这些值放进数组里：// 太长的逻辑表达式if (x === &#x27;abc&#x27; || x === &#x27;def&#x27; || x === &#x27;ghi&#x27; || x ===&#x27;jkl&#x27;) &#123;    //其他逻辑&#125;// 简写if ([&#x27;abc&#x27;, &#x27;def&#x27;, &#x27;ghi&#x27;, &#x27;jkl&#x27;].includes(x)) &#123;   //其他逻辑&#125;","covers":null,"content":"<h2 id=\"简化条件表达式\"><a href=\"#简化条件表达式\" class=\"headerlink\" title=\"简化条件表达式\"></a>简化条件表达式</h2><p>经常碰到这种情况，要判断某个变量是否为指定的某些值，用常规的逻辑表达式会很长。我的做法是把这些值放进数组里：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 太长的逻辑表达式</span>\n<span class=\"hljs-keyword\">if</span> (x === <span class=\"hljs-string\">&#x27;abc&#x27;</span> || x === <span class=\"hljs-string\">&#x27;def&#x27;</span> || x === <span class=\"hljs-string\">&#x27;ghi&#x27;</span> || x ===<span class=\"hljs-string\">&#x27;jkl&#x27;</span>) &#123;\n    <span class=\"hljs-comment\">//其他逻辑</span>\n&#125;\n<span class=\"hljs-comment\">// 简写</span>\n<span class=\"hljs-keyword\">if</span> ([<span class=\"hljs-string\">&#x27;abc&#x27;</span>, <span class=\"hljs-string\">&#x27;def&#x27;</span>, <span class=\"hljs-string\">&#x27;ghi&#x27;</span>, <span class=\"hljs-string\">&#x27;jkl&#x27;</span>].includes(x)) &#123;\n   <span class=\"hljs-comment\">//其他逻辑</span>\n&#125;</code></pre>\n<a id=\"more\"></a>\n<h2 id=\"简化-if-…-else\"><a href=\"#简化-if-…-else\" class=\"headerlink\" title=\"简化 if … else\"></a>简化 if … else</h2><p>if…else太常用了，以至于很多人都忘了其实还有其他方式来判断条件。比如简单的变量赋值，完全没必要用这种冗长的语句，一行表达式就搞定了：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 新手的写法</span>\n<span class=\"hljs-keyword\">let</span> test= boolean;\n<span class=\"hljs-keyword\">if</span> (x &gt; <span class=\"hljs-number\">100</span>) &#123;\n    test = <span class=\"hljs-literal\">true</span>;\n&#125; <span class=\"hljs-keyword\">else</span> &#123;\n    test = <span class=\"hljs-literal\">false</span>;\n&#125;\n<span class=\"hljs-comment\">// 简写表达式</span>\n<span class=\"hljs-keyword\">let</span> test = (x &gt; <span class=\"hljs-number\">10</span>) ? <span class=\"hljs-literal\">true</span> : <span class=\"hljs-literal\">false</span>;\n<span class=\"hljs-comment\">// 更直接的</span>\n<span class=\"hljs-keyword\">let</span> test = x &gt; <span class=\"hljs-number\">10</span>;\n<span class=\"hljs-built_in\">console</span>.log(test);</code></pre>\n\n<p>三元表达式可以做复杂的条件分支判断，不过牺牲了一些可读性：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">300</span>,\n<span class=\"hljs-keyword\">let</span> test2 = (x &gt; <span class=\"hljs-number\">100</span>) ? <span class=\"hljs-string\">&#x27;greater 100&#x27;</span> : (x &lt; <span class=\"hljs-number\">50</span>) ? <span class=\"hljs-string\">&#x27;less 50&#x27;</span> : <span class=\"hljs-string\">&#x27;between 50 and 100&#x27;</span>;\n<span class=\"hljs-built_in\">console</span>.log(test2); <span class=\"hljs-comment\">// &quot;greater than 100&quot;</span></code></pre>\n\n<h2 id=\"判空并赋默认值\"><a href=\"#判空并赋默认值\" class=\"headerlink\" title=\"判空并赋默认值\"></a>判空并赋默认值</h2><p>Code Review 的时候我经常看到这样的代码，判断变量不是null，undefined，’’的时候赋值给第二个变量，否则给个默认值：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">if</span> (first !== <span class=\"hljs-literal\">null</span> || first !== <span class=\"hljs-literal\">undefined</span> || first !== <span class=\"hljs-string\">&#x27;&#x27;</span>) &#123;\n    <span class=\"hljs-keyword\">let</span> second = first;\n&#125;\n<span class=\"hljs-comment\">// 简写</span>\n<span class=\"hljs-keyword\">let</span> second = first || <span class=\"hljs-string\">&#x27;&#x27;</span>;</code></pre>\n\n<h2 id=\"简写循环遍历\"><a href=\"#简写循环遍历\" class=\"headerlink\" title=\"简写循环遍历\"></a>简写循环遍历</h2><p>for  循环是最基本的，但是有点繁琐。可以用 for…in、for…of 或者 forEach 代替：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// Longhand</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; testData.length; i++)\n\n<span class=\"hljs-comment\">// Shorthand</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i <span class=\"hljs-keyword\">in</span> testData) or  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i <span class=\"hljs-keyword\">of</span> testData)</code></pre>\n\n<p>数组遍历：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">testData</span>(<span class=\"hljs-params\">element, index, array</span>) </span>&#123;\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;test[&#x27;</span> + index + <span class=\"hljs-string\">&#x27;] = &#x27;</span> + element);\n&#125;\n\n[<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">32</span>].forEach(testData);\n<span class=\"hljs-comment\">// 打印输出: test[0] = 11, test[1] = 24, test[2] = 32</span></code></pre>\n\n<h2 id=\"简化-switch\"><a href=\"#简化-switch\" class=\"headerlink\" title=\"简化 switch\"></a>简化 switch</h2><p>这个技巧也很常用，把switch  转换成对象的key-value形式，代码简洁多了：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// Longhand</span>\n<span class=\"hljs-keyword\">switch</span> (data) &#123;\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">1</span>:\n    test1();\n  <span class=\"hljs-keyword\">break</span>;\n\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">2</span>:\n    test2();\n  <span class=\"hljs-keyword\">break</span>;\n\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-number\">3</span>:\n    test();\n  <span class=\"hljs-keyword\">break</span>;\n  <span class=\"hljs-comment\">// And so on...</span>\n&#125;\n\n<span class=\"hljs-comment\">// Shorthand</span>\n<span class=\"hljs-keyword\">var</span> data = &#123;\n  <span class=\"hljs-number\">1</span>: test1,\n  <span class=\"hljs-number\">2</span>: test2,\n  <span class=\"hljs-number\">3</span>: test\n&#125;;\n\ndata[anything] &amp;&amp; data[anything]();</code></pre>\n\n<h2 id=\"简化多行字符串拼接\"><a href=\"#简化多行字符串拼接\" class=\"headerlink\" title=\"简化多行字符串拼接\"></a>简化多行字符串拼接</h2><p>如果一个字符串表达式过长，我们可能会拆成多行拼接的方式。不过随着 ES6 的普及，更好的做法是用模板字符串：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//longhand</span>\n<span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-string\">&#x27;abc abc abc abc abc abc\\n\\t&#x27;</span>\n    + <span class=\"hljs-string\">&#x27;test test,test test test test\\n\\t&#x27;</span>\n<span class=\"hljs-comment\">//shorthand</span>\n<span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-string\">`abc abc abc abc abc abc</span>\n<span class=\"hljs-string\">         test test,test test test test`</span></code></pre>\n\n<h2 id=\"善用箭头函数简化-return\"><a href=\"#善用箭头函数简化-return\" class=\"headerlink\" title=\"善用箭头函数简化 return\"></a>善用箭头函数简化 return</h2><p>ES6 的箭头函数真是个好东西，当函数简单到只需要返回一个表达式时，用箭头函数最合适不过了，return都不用写：</p>\n<pre><code class=\"hljs javascript\">Longhand:\n<span class=\"hljs-comment\">//longhand</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getArea</span>(<span class=\"hljs-params\">diameter</span>) </span>&#123;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.PI * diameter\n&#125;\n<span class=\"hljs-comment\">//shorthand</span>\ngetArea = <span class=\"hljs-function\"><span class=\"hljs-params\">diameter</span> =&gt;</span> (\n  <span class=\"hljs-built_in\">Math</span>.PI * diameter;\n)</code></pre>\n\n<h2 id=\"简化分支条件语句\"><a href=\"#简化分支条件语句\" class=\"headerlink\" title=\"简化分支条件语句\"></a>简化分支条件语句</h2><p>又是你，if…else if…else！跟 switch类似，也可以用key-value形式简化：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// Longhand</span>\n<span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-string\">&#x27;test1&#x27;</span>) &#123;\n  test1();\n&#125;\n<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-string\">&#x27;test2&#x27;</span>) &#123;\n  test2();\n&#125;\n<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-string\">&#x27;test3&#x27;</span>) &#123;\n  test3();\n&#125;\n<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (type === <span class=\"hljs-string\">&#x27;test4&#x27;</span>) &#123;\n  test4();\n&#125; <span class=\"hljs-keyword\">else</span> &#123;\n  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&#x27;Invalid value &#x27;</span> + type);\n&#125;\n<span class=\"hljs-comment\">// Shorthand</span>\n<span class=\"hljs-keyword\">var</span> types = &#123;\n  <span class=\"hljs-attr\">test1</span>: test1,\n  <span class=\"hljs-attr\">test2</span>: test2,\n  <span class=\"hljs-attr\">test3</span>: test3,\n  <span class=\"hljs-attr\">test4</span>: test4\n&#125;;\n\n<span class=\"hljs-keyword\">var</span> func = types[type];\n(!func) &amp;&amp; <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&#x27;Invalid value &#x27;</span> + type); func();</code></pre>\n\n<h2 id=\"重复字符串-N-次\"><a href=\"#重复字符串-N-次\" class=\"headerlink\" title=\"重复字符串 N 次\"></a>重复字符串 N 次</h2><p>有时候出于某种目的需要将字符串重复 N 次，最笨的方法就是用for循环拼接。其实更简单的方法是用repeat：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//longhand </span>\n<span class=\"hljs-keyword\">let</span> test = <span class=\"hljs-string\">&#x27;&#x27;</span>; \n<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i ++) &#123; \n  test += <span class=\"hljs-string\">&#x27;test &#x27;</span>; \n&#125; \n<span class=\"hljs-built_in\">console</span>.log(str); <span class=\"hljs-comment\">// test test test test test </span>\n<span class=\"hljs-comment\">//shorthand </span>\n<span class=\"hljs-string\">&#x27;test &#x27;</span>.repeat(<span class=\"hljs-number\">5</span>);</code></pre>\n\n<h2 id=\"指数运算\"><a href=\"#指数运算\" class=\"headerlink\" title=\"指数运算\"></a>指数运算</h2><p>能省则省，低碳环保。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//longhand</span>\n<span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// 8</span>\n<span class=\"hljs-comment\">//shorthand</span>\n<span class=\"hljs-number\">2</span>**<span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">// 8</span></code></pre>\n\n<h2 id=\"数字分隔符\"><a href=\"#数字分隔符\" class=\"headerlink\" title=\"数字分隔符\"></a>数字分隔符</h2><p>这是比较新的语法，ES2021 提出来的，数字字面量可以用下划线分割，提高了大数字的可读性：</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// 旧语法</span>\n<span class=\"hljs-keyword\">let</span> number = <span class=\"hljs-number\">98234567</span>\n<span class=\"hljs-comment\">// 新语法</span>\n<span class=\"hljs-keyword\">let</span> number = <span class=\"hljs-number\">98_234_567</span></code></pre>\n\n","prev":{"title":" 高阶函数","slug":"javascript/f76abd1baa"},"next":{"title":" SVN与Git比较的优缺点差异","slug":"git/91c8e247e4"},"categories":[{"name":"javascript","slug":"javascript","count":21,"path":"api/categories/javascript.json"}],"tags":[{"name":"javascript","slug":"javascript","count":25,"path":"api/tags/javascript.json"}]}