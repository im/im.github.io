{"sort":39,"title":" 函数柯里化","slug":"javascript/9b990bb119","date":"2021-02-27T00:00:00.000Z","updated":"2021-06-17T11:25:09.047Z","comments":true,"path":"api/articles/javascript/9b990bb119.json","photos":[],"link":"","excerpt":"柯里化 - 维基百科，自由的百科全书<br>把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。  柯里化有3个常见作用：参数复用提前确定延迟计算/运行基本实现var foo = function(a) &#123;    return function(b) &#123;        return a * a + b * b;    &#125;&#125;调用上述函数：(foo(3))(4)，或直接foo(3)(4)","covers":null,"content":"<blockquote>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E6%9F%AF%E9%87%8C%E5%8C%96\">柯里化 - 维基百科，自由的百科全书</a><br>把接受多个<code>参数</code>的<code>函数</code>变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。  </p>\n</blockquote>\n<h2 id=\"柯里化有3个常见作用：\"><a href=\"#柯里化有3个常见作用：\" class=\"headerlink\" title=\"柯里化有3个常见作用：\"></a>柯里化有3个常见作用：</h2><ol>\n<li>参数复用</li>\n<li>提前确定</li>\n<li>延迟计算/运行</li>\n</ol>\n<h2 id=\"基本实现\"><a href=\"#基本实现\" class=\"headerlink\" title=\"基本实现\"></a>基本实现</h2><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a</span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">b</span>) </span>&#123;\n        <span class=\"hljs-keyword\">return</span> a * a + b * b;\n    &#125;\n&#125;</code></pre>\n\n<p>调用上述函数：<code>(foo(3))(4)</code>，或直接<code>foo(3)(4)</code></p>\n<a id=\"more\"></a>\n<h2 id=\"参数复用\"><a href=\"#参数复用\" class=\"headerlink\" title=\"参数复用\"></a>参数复用</h2><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 正常正则验证字符串 reg.test(txt)</span>\n\n<span class=\"hljs-comment\">// 函数封装后</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">check</span>(<span class=\"hljs-params\">reg, txt</span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> reg.test(txt)\n&#125;\n\ncheck(<span class=\"hljs-regexp\">/\\d+/g</span>, <span class=\"hljs-string\">&#x27;test&#x27;</span>)       <span class=\"hljs-comment\">//false</span>\ncheck(<span class=\"hljs-regexp\">/[a-z]+/g</span>, <span class=\"hljs-string\">&#x27;test&#x27;</span>)    <span class=\"hljs-comment\">//true</span>\n\n<span class=\"hljs-comment\">// Currying后</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">curryingCheck</span>(<span class=\"hljs-params\">reg</span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">txt</span>) </span>&#123;\n        <span class=\"hljs-keyword\">return</span> reg.test(txt)\n    &#125;\n&#125;\n\n<span class=\"hljs-keyword\">var</span> hasNumber = curryingCheck(<span class=\"hljs-regexp\">/\\d+/g</span>)\n<span class=\"hljs-keyword\">var</span> hasLetter = curryingCheck(<span class=\"hljs-regexp\">/[a-z]+/g</span>)\n\nhasNumber(<span class=\"hljs-string\">&#x27;test1&#x27;</span>)      <span class=\"hljs-comment\">// true</span>\nhasNumber(<span class=\"hljs-string\">&#x27;testtest&#x27;</span>)   <span class=\"hljs-comment\">// false</span>\nhasLetter(<span class=\"hljs-string\">&#x27;21212&#x27;</span>)      <span class=\"hljs-comment\">// false</span></code></pre>\n\n<p>上面的示例是一个正则的校验，正常来说直接调用check函数就可以了，但是如果我有很多地方都要校验是否有数字，其实就是需要将第一个参数reg进行复用，这样别的地方就能够直接调用hasNumber，hasLetter等函数，让参数能够复用，调用起来也更方便。</p>\n<h2 id=\"提前确定\"><a href=\"#提前确定\" class=\"headerlink\" title=\"提前确定\"></a>提前确定</h2><pre><code class=\"hljs js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeMap</span>(<span class=\"hljs-params\">str</span>) </span>&#123;\n  <span class=\"hljs-keyword\">var</span> map = <span class=\"hljs-built_in\">Object</span>.create(<span class=\"hljs-literal\">null</span>);\n  <span class=\"hljs-keyword\">var</span> list = str.split(<span class=\"hljs-string\">&quot;,&quot;</span>);\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; list.length; i++) &#123;\n    map[list[i]] = <span class=\"hljs-literal\">true</span>;\n  &#125;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">val</span>) </span>&#123;\n    <span class=\"hljs-keyword\">return</span> map[val.toLowerCase()];\n  &#125;;\n&#125;\n</code></pre>\n\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> isHTMLTag = makeMap(\n    <span class=\"hljs-string\">&#x27;html,body,base,head,link,meta,style,title,&#x27;</span> +\n    <span class=\"hljs-string\">&#x27;address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,&#x27;</span> +\n    <span class=\"hljs-string\">&#x27;div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,&#x27;</span> +\n    <span class=\"hljs-string\">&#x27;a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,&#x27;</span> +\n    <span class=\"hljs-string\">&#x27;s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,&#x27;</span> +\n    <span class=\"hljs-string\">&#x27;embed,object,param,source,canvas,script,noscript,del,ins,&#x27;</span> +\n    <span class=\"hljs-string\">&#x27;caption,col,colgroup,table,thead,tbody,td,th,tr,&#x27;</span> +\n    <span class=\"hljs-string\">&#x27;button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,&#x27;</span> +\n    <span class=\"hljs-string\">&#x27;output,progress,select,textarea,&#x27;</span> +\n    <span class=\"hljs-string\">&#x27;details,dialog,menu,menuitem,summary,&#x27;</span> +\n    <span class=\"hljs-string\">&#x27;content,element,shadow,template,blockquote,iframe,tfoot&#x27;</span>\n  );</code></pre>\n\n\n\n<p>这是vue源码中的一个方法，用这个方法来判断当前自定义标签跟html，这里就用了提前确认， 先将所有的标签都存入一个对象，然后每次查找只需要匹配对象里面是否存在该标签，这样就能防止多次循环遍历查找对应的标签</p>\n<pre><code class=\"hljs js\">isHTMLTag(<span class=\"hljs-string\">&#x27;div&#x27;</span>)</code></pre>\n\n<h3 id=\"延迟执行\"><a href=\"#延迟执行\" class=\"headerlink\" title=\"延迟执行\"></a>延迟执行</h3><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> curryAdd = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">...rest</span>) </span>&#123;\n  <span class=\"hljs-keyword\">const</span> _args = rest\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">cb</span>(<span class=\"hljs-params\">...rest</span>) </span>&#123;\n    <span class=\"hljs-keyword\">if</span> (rest.length === <span class=\"hljs-number\">0</span>) &#123;\n      <span class=\"hljs-keyword\">return</span> _args.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">sum, single</span>) =&gt;</span> sum += single)\n    &#125; <span class=\"hljs-keyword\">else</span> &#123;\n      _args.push(...rest)\n      <span class=\"hljs-keyword\">return</span> cb\n    &#125;\n  &#125;\n&#125;()                        <span class=\"hljs-comment\">// 为了保存添加的数，这里要返回一个闭包</span>\ncurryAdd(<span class=\"hljs-number\">1</span>)\ncurryAdd(<span class=\"hljs-number\">2</span>)\ncurryAdd(<span class=\"hljs-number\">3</span>)\ncurryAdd(<span class=\"hljs-number\">4</span>)\ncurryAdd()               <span class=\"hljs-comment\">// 最后计算输出:10</span></code></pre>\n\n<h2 id=\"经典面试题\"><a href=\"#经典面试题\" class=\"headerlink\" title=\"经典面试题\"></a>经典面试题</h2><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">// 实现一个add方法，使计算结果能够满足如下预期：</span>\nadd(<span class=\"hljs-number\">1</span>)(<span class=\"hljs-number\">2</span>)(<span class=\"hljs-number\">3</span>) = <span class=\"hljs-number\">6</span>;\nadd(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)(<span class=\"hljs-number\">4</span>) = <span class=\"hljs-number\">10</span>;\nadd(<span class=\"hljs-number\">1</span>)(<span class=\"hljs-number\">2</span>)(<span class=\"hljs-number\">3</span>)(<span class=\"hljs-number\">4</span>)(<span class=\"hljs-number\">5</span>) = <span class=\"hljs-number\">15</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n    <span class=\"hljs-comment\">// 第一次执行时，定义一个数组专门用来存储所有的参数</span>\n    <span class=\"hljs-keyword\">var</span> _args = <span class=\"hljs-built_in\">Array</span>.prototype.slice.call(<span class=\"hljs-built_in\">arguments</span>);\n\n    <span class=\"hljs-comment\">// 在内部声明一个函数，利用闭包的特性保存_args并收集所有的参数值</span>\n    <span class=\"hljs-keyword\">var</span> _adder = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n        _args.push(...arguments);\n        <span class=\"hljs-keyword\">return</span> _adder;\n    &#125;;\n\n    <span class=\"hljs-comment\">// 利用toString隐式转换的特性，当最后执行时隐式转换，并计算最终的值返回</span>\n    _adder.toString = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n        <span class=\"hljs-keyword\">return</span> _args.reduce(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">a, b</span>) </span>&#123;\n            <span class=\"hljs-keyword\">return</span> a + b;\n        &#125;);\n    &#125;\n    <span class=\"hljs-keyword\">return</span> _adder;\n&#125;\n\nadd(<span class=\"hljs-number\">1</span>)(<span class=\"hljs-number\">2</span>)(<span class=\"hljs-number\">3</span>)                <span class=\"hljs-comment\">// 6</span>\nadd(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)(<span class=\"hljs-number\">4</span>)             <span class=\"hljs-comment\">// 10</span>\nadd(<span class=\"hljs-number\">1</span>)(<span class=\"hljs-number\">2</span>)(<span class=\"hljs-number\">3</span>)(<span class=\"hljs-number\">4</span>)(<span class=\"hljs-number\">5</span>)          <span class=\"hljs-comment\">// 15</span>\nadd(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">6</span>)(<span class=\"hljs-number\">1</span>)                <span class=\"hljs-comment\">// 9</span></code></pre>\n\n","prev":{"title":" 揭开在线协作的神秘面纱 – OT 算法","slug":"javascript/9e1f204749"},"next":{"title":" 数组扁平化","slug":"javascript/fa59b4bb32"},"categories":[{"name":"javascript","slug":"javascript","count":21,"path":"api/categories/javascript.json"}],"tags":[{"name":"javascript","slug":"javascript","count":25,"path":"api/tags/javascript.json"}]}