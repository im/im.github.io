{"sort":5,"title":" JS - CommonJS、ES2015、AMD、CMD模块规范对比与介绍","slug":"javascript/465c78e370","date":"2019-03-03T00:00:00.000Z","updated":"2021-06-17T11:25:09.047Z","comments":true,"path":"api/articles/javascript/465c78e370.json","photos":[],"link":"","excerpt":"CommonJS 基本介绍CommonJS 是一种思想，它是为 JS 的表现来制定规范。由于 JS 没有模块系统、标准库较少、缺乏包管理工具，因此 CommonJS 应运而生。CommonJS 的目标是希望 JS 可以在任何地方运行，不只是浏览器中。只要我们的 JavaScript 是根据 CommonJS API 编写的，那么就可以在与 CommonJS 兼容的系统上运行。根据 CommonJS API 编写的 JavaScript 可以做下面这些事情：编写服务端应用编写命令行工具编写基于 GUI 的桌面应用CommonJS 规范有很多实现，最有名要数 NodeJS 了。CommonJS 的模块规范一个文件就是一个模块，拥有单独的作用域。普通方式定义的变量、函数、对象都属于该模块内。<br>    * 通过 require 来加载模块。<br>    * 通过 exports 和 modul.exports 来暴露模块中的内容。","covers":["/images/2017052214293263636.png","/images/2017052214293263636%202.png","/images/2017052310253156591.png","/images/2017052310253156591%202.png","/images/2017052215410526448.png","/images/2017052216214198614.png","/images/2017052216214198614%202.png"],"content":"<h3 id=\"CommonJS-基本介绍\"><a href=\"#CommonJS-基本介绍\" class=\"headerlink\" title=\"CommonJS 基本介绍\"></a>CommonJS 基本介绍</h3><ol>\n<li>CommonJS 是一种思想，它是为 JS 的表现来制定规范。由于 JS 没有模块系统、标准库较少、缺乏包管理工具，因此 CommonJS 应运而生。</li>\n<li>CommonJS 的目标是希望 JS 可以在任何地方运行，不只是浏览器中。只要我们的 JavaScript 是根据 CommonJS API 编写的，那么就可以在与 CommonJS 兼容的系统上运行。</li>\n<li>根据 CommonJS API 编写的 JavaScript 可以做下面这些事情：<ul>\n<li>编写服务端应用</li>\n<li>编写命令行工具</li>\n<li>编写基于 GUI 的桌面应用</li>\n</ul>\n</li>\n<li>CommonJS 规范有很多实现，最有名要数 NodeJS 了。</li>\n</ol>\n<h3 id=\"CommonJS-的模块规范\"><a href=\"#CommonJS-的模块规范\" class=\"headerlink\" title=\"CommonJS 的模块规范\"></a>CommonJS 的模块规范</h3><p>一个文件就是一个模块，拥有单独的作用域。普通方式定义的变量、函数、对象都属于该模块内。<br>    * 通过 require 来加载模块。<br>    * 通过 exports 和 modul.exports 来暴露模块中的内容。</p>\n<a id=\"more\"></a>\n<h3 id=\"使用-exports-暴露模块接口\"><a href=\"#使用-exports-暴露模块接口\" class=\"headerlink\" title=\"使用 exports 暴露模块接口\"></a>使用 exports 暴露模块接口</h3><ol>\n<li><p>下面我们在 Node.js 中创建一个模块，文件名为：hangge.js</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">exports</span>.hello = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;Hello hangge.com&#x27;</span>);\n&#125;</code></pre>\n</li>\n<li><p>创建一个 main.js 文件，引入这个模块并调用。</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> hangge = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./hangge&#x27;</span>);\nhangge.hello();</code></pre>\n</li>\n<li><p>运行结果如下：</p>\n</li>\n</ol>\n<p><img src=\"/images/2017052214293263636.png\"></p>\n<h3 id=\"使用-modul-exports-暴露模块对象\"><a href=\"#使用-modul-exports-暴露模块对象\" class=\"headerlink\" title=\"使用 modul.exports 暴露模块对象\"></a>使用 modul.exports 暴露模块对象</h3><ol>\n<li><p>下面我们把一个对象封装到模块中，文件名为：hangge.js</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">//私有变量</span>\n<span class=\"hljs-keyword\">var</span> test = <span class=\"hljs-number\">110</span>;\n\n<span class=\"hljs-comment\">//公开方法</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Hangge</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n <span class=\"hljs-keyword\">var</span> name;\n <span class=\"hljs-built_in\">this</span>.setName = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">thyName</span>) </span>&#123;\n     name = thyName;\n &#125;;\n <span class=\"hljs-built_in\">this</span>.hello = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n     <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;Hello &#x27;</span> + name);\n &#125;;\n&#125;;\n\n<span class=\"hljs-built_in\">module</span>.exports = Hangge;</code></pre>\n</li>\n<li><p>创建一个 main.js 文件，引入这个模块并调用。</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> Hangge = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./hangge&#x27;</span>);\n<span class=\"hljs-keyword\">var</span> hello = <span class=\"hljs-keyword\">new</span> Hangge();\nhello.setName(<span class=\"hljs-string\">&#x27;hangge.com&#x27;</span>);\nhello.hello();</code></pre>\n</li>\n<li><p>运行结果如下：</p>\n</li>\n</ol>\n<p><img src=\"/images/2017052214293263636%202.png\"></p>\n<h3 id=\"ES2015-基本介绍\"><a href=\"#ES2015-基本介绍\" class=\"headerlink\" title=\"ES2015 基本介绍\"></a>ES2015 基本介绍</h3><p>2015 年 6 月， ES2015（即 ECMAScript 6、ES6） 正式发布。ES2015 是该语言的一个显著更新，也是自 2009 年 ES5 标准确定后的第一个重大更新。<br>虽然 ES2015 提出了许多令人激动的新特性，但由于目前 JavaScript 的运行环境众多，对 ECMAScript 标准的支持程度也不一样。</p>\n<h3 id=\"ES2015-的模块规范\"><a href=\"#ES2015-的模块规范\" class=\"headerlink\" title=\"ES2015 的模块规范\"></a>ES2015 的模块规范</h3><ul>\n<li>一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。</li>\n<li>export 命令用于规定模块的对外接口。</li>\n<li>import 命令用于输入其他模块提供的功能。</li>\n<li>ES6 模块的设计思想是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。</li>\n</ul>\n<h3 id=\"使用-export-命令规定对外接口\"><a href=\"#使用-export-命令规定对外接口\" class=\"headerlink\" title=\"使用 export 命令规定对外接口\"></a>使用 export 命令规定对外接口</h3><ol>\n<li><p>下面我们在 Node.js 中创建一个模块，文件名为：hangge.js</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//圆面积计算</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">area</span>(<span class=\"hljs-params\">radius</span>) </span>&#123;\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.PI * radius * radius;\n&#125;\n\n<span class=\"hljs-comment\">//圆周长计算</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">circumference</span>(<span class=\"hljs-params\">radius</span>) </span>&#123;\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">Math</span>.PI * radius;\n&#125;</code></pre>\n</li>\n<li><p>创建一个 main.js 文件，引入这个模块并调用。这里 import 命令使用大括号的形式加载模块对外的接口。</p>\n<pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">import</span> &#123;area,circumference&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./hangge&#x27;</span>;\nconsole.log(<span class=\"hljs-string\">&#x27;圆面积：&#x27;</span> + area(<span class=\"hljs-number\">10</span>));\nconsole.log(<span class=\"hljs-string\">&#x27;圆周长：&#x27;</span> + circumference(<span class=\"hljs-number\">11</span>));</code></pre>\n<p>当然也可以使用星号（*）指定一个对象，实现模块的整体加载。</p>\n<pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> <span class=\"hljs-type\">circle</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./hangge&#x27;</span>;\nconsole.log(<span class=\"hljs-string\">&#x27;圆面积：&#x27;</span> + <span class=\"hljs-type\">circle</span>.area(<span class=\"hljs-number\">10</span>));\nconsole.log(<span class=\"hljs-string\">&#x27;圆周长：&#x27;</span> + <span class=\"hljs-type\">circle</span>.circumference(<span class=\"hljs-number\">11</span>));</code></pre>\n</li>\n<li><p>由于 NodeJS 目前还不支持 ES2015 的 Module，这里我们借助 babel-node 来执行，运行结果如下：</p>\n</li>\n</ol>\n<p><img src=\"/images/2017052310253156591.png\"></p>\n<h3 id=\"使用-export-default-命令来输出模块\"><a href=\"#使用-export-default-命令来输出模块\" class=\"headerlink\" title=\"使用 export default 命令来输出模块\"></a>使用 export default 命令来输出模块</h3><ol>\n<li><p>下面我们使用 export default 命令用于指定模块的默认输出。模块文件名为：hangge.js</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//圆面积计算（作为默认接口）</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">radius</span>) </span>&#123;\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.PI * radius * radius;\n&#125;\n\n<span class=\"hljs-comment\">//圆周长计算</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">circumference</span>(<span class=\"hljs-params\">radius</span>) </span>&#123;\n<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">Math</span>.PI * radius;\n&#125;</code></pre>\n</li>\n<li><p>创建一个 main.js 文件，引入这个模块并调用。注意：对于 export default 指定模块的默认输出，import 语句不需要使用大括号。</p>\n<pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">import</span> area, &#123;circumference&#125; <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./hangge&#x27;</span>;\nconsole.log(<span class=\"hljs-string\">&#x27;圆面积：&#x27;</span> + area(<span class=\"hljs-number\">10</span>));\nconsole.log(<span class=\"hljs-string\">&#x27;圆周长：&#x27;</span> + circumference(<span class=\"hljs-number\">11</span>));</code></pre>\n</li>\n<li><p>同样借助 babel-node 来执行，运行结果如下：</p>\n</li>\n</ol>\n<p><img src=\"/images/2017052310253156591%202.png\"></p>\n<h3 id=\"1，AMD-基本介绍\"><a href=\"#1，AMD-基本介绍\" class=\"headerlink\" title=\"1，AMD 基本介绍\"></a>1，AMD 基本介绍</h3><ul>\n<li>AMD 全称为 Asynchromous Module Definition（异步模块定义）</li>\n<li>AMD 是 RequireJS 在推广过程中对模块定义的规范化产出，它是一个在浏览器端模块化开发的规范。</li>\n<li>AMD 模式可以用于浏览器环境并且允许非同步加载模块，也可以按需动态加载模块。</li>\n</ul>\n<h3 id=\"2，AMD-的模块规范\"><a href=\"#2，AMD-的模块规范\" class=\"headerlink\" title=\"2，AMD 的模块规范\"></a>2，AMD 的模块规范</h3><ul>\n<li>AMD 通过异步加载模块。模块加载不影响后面语句的运行。所有依赖某些模块的语句均放置在回调函数中。</li>\n<li>AMD 规范只定义了一个函数 define，通过 define 方法定义模块。该函数的描述如下：</li>\n</ul>\n<h3 id=\"define-id-dependencies-factory\"><a href=\"#define-id-dependencies-factory\" class=\"headerlink\" title=\"define(id?, dependencies?, factory)\"></a>define(id?, dependencies?, factory)</h3><pre><code>* id：指定义中模块的名字（可选）。如果没有提供该参数，模块的名字应该默认为模块加载器请求的指定脚本的名字。如果提供了该参数，模块名必须是“顶级”的和绝对的（不允许相对名字）。\n* dependencies：当前模块依赖的，已被模块定义的模块标识的数组字面量（可选）。\n* factory：一个需要进行实例化的函数或者一个对象。\n* AMD 规范允许输出模块兼容 CommonJS 规范，这时 define 方法如下：\n</code></pre>\n<pre><code class=\"hljs javascript\">define(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"><span class=\"hljs-built_in\">require</span>, <span class=\"hljs-built_in\">exports</span>, <span class=\"hljs-built_in\">module</span></span>) </span>&#123;\n    <span class=\"hljs-keyword\">var</span> reqModule = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;./someModule&quot;</span>);\n    requModule.test();\n      \n    <span class=\"hljs-built_in\">exports</span>.asplode = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;\n        <span class=\"hljs-comment\">//someing</span>\n    &#125;\n&#125;);</code></pre>\n\n<h3 id=\"独立模块\"><a href=\"#独立模块\" class=\"headerlink\" title=\"独立模块\"></a>独立模块</h3><ol>\n<li><p>我们使用 RequireJS 定义一个不依赖其他模块得独立模块，文件名：hangge.js</p>\n<pre><code class=\"hljs sas\">define(functi<span class=\"hljs-meta\">on(</span>)&#123;\n var <span class=\"hljs-meta\">add</span> = functi<span class=\"hljs-meta\">on(</span><span class=\"hljs-meta\">x</span>,y) &#123;\n     <span class=\"hljs-meta\">return</span> <span class=\"hljs-meta\">x</span> + y;\n &#125;;\n <span class=\"hljs-meta\">return</span> &#123;\n     <span class=\"hljs-meta\">add</span> : <span class=\"hljs-meta\">add</span>\n &#125;\n&#125;);</code></pre>\n</li>\n<li><p>接着创建一个 html 页面，其内部加载并调用这个模块。</p>\n<pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;require.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span>\n<span class=\"javascript\">          <span class=\"hljs-built_in\">require</span>([<span class=\"hljs-string\">&#x27;hangge&#x27;</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">m</span>)</span>&#123;</span>\n<span class=\"javascript\">            <span class=\"hljs-built_in\">console</span>.log(m.add(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>));</span>\n<span class=\"javascript\">          &#125;);</span>\n<span class=\"javascript\">        </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></code></pre>\n</li>\n<li><p>控制台输出如下：<br><img src=\"/images/2017052215410526448.png\"></p>\n</li>\n</ol>\n<h3 id=\"使用样例2：存在依赖的函数式定义\"><a href=\"#使用样例2：存在依赖的函数式定义\" class=\"headerlink\" title=\"使用样例2：存在依赖的函数式定义\"></a>使用样例2：存在依赖的函数式定义</h3><p>下面定义的模块又依赖于 cart 和 inventory 这两个模块（它们都处在同一个文件夹下）</p>\n<pre><code class=\"hljs actionscript\">define([<span class=\"hljs-string\">&quot;./cart&quot;</span>, <span class=\"hljs-string\">&quot;./inventory&quot;</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(cart, inventory)</span> </span>&#123;\n        <span class=\"hljs-comment\">//return an object to define the &quot;my/shirt&quot; module.</span>\n        <span class=\"hljs-keyword\">return</span> &#123;\n            color: <span class=\"hljs-string\">&quot;blue&quot;</span>,\n            size: <span class=\"hljs-string\">&quot;large&quot;</span>,\n            addToCart: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>&#123;\n                inventory.decrement(<span class=\"hljs-keyword\">this</span>);\n                cart.add(<span class=\"hljs-keyword\">this</span>);\n            &#125;\n        &#125;\n    &#125;\n);</code></pre>\n\n<h3 id=\"CMD-基本介绍\"><a href=\"#CMD-基本介绍\" class=\"headerlink\" title=\"CMD 基本介绍\"></a>CMD 基本介绍</h3><ol>\n<li><p>CMD 全称为 Common Module Definition，它是国内玉伯大神在开发 SeaJS 的时候提出来的。 </p>\n</li>\n<li><p>CMD 与 AMD 挺相近，二者区别如下：</p>\n<ul>\n<li><p>对于依赖的模块 CMD 是延迟执行，而 AMD 是提前执行（不过 RequireJS 从 2.0 开始，也改成可以延迟执行。 ）</p>\n</li>\n<li><p>CMD 推崇依赖就近，AMD 推崇依赖前置。</p>\n</li>\n<li><p>AMD 的 api 默认是一个当多个用，CMD 严格的区分推崇职责单一，其每个 API 都简单纯粹。例如：AMD 里 require 分全局的和局部的。CMD 里面没有全局的 require，提供 seajs.use() 来实现模块系统的加载启动。</p>\n<h3 id=\"使用-exports-暴露模块接口-1\"><a href=\"#使用-exports-暴露模块接口-1\" class=\"headerlink\" title=\"使用 exports 暴露模块接口\"></a>使用 exports 暴露模块接口</h3></li>\n</ul>\n</li>\n<li><p>下面使用 sea.js 创建一个模块，文件名为：hangge.js</p>\n<pre><code class=\"hljs javascript\">define(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">require</span>, <span class=\"hljs-built_in\">exports</span></span>) </span>&#123;\n <span class=\"hljs-comment\">// 对外提供name属性</span>\n <span class=\"hljs-built_in\">exports</span>.name = <span class=\"hljs-string\">&#x27;hangge&#x27;</span>;\n <span class=\"hljs-comment\">// 对外提供hello方法</span>\n <span class=\"hljs-built_in\">exports</span>.hello = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n   <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;Hello hangge.com&#x27;</span>);\n &#125;;\n&#125;);</code></pre>\n</li>\n<li><p>接着创建一个 html 页面，其内部加载并调用这个模块。</p>\n</li>\n</ol>\n<pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sea.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span>\n<span class=\"javascript\">          <span class=\"hljs-comment\">//加载一个模块，在加载完成时，执行回调</span></span>\n<span class=\"javascript\">          seajs.use(<span class=\"hljs-string\">&#x27;hangge&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a</span>) </span>&#123;</span>\n<span class=\"javascript\">            a.hello();</span>\n<span class=\"javascript\">          &#125;);</span>\n<span class=\"javascript\">        </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></code></pre>\n\n<ol start=\"3\">\n<li>控制台输出如下：<br><img src=\"/images/2017052216214198614.png\"></li>\n</ol>\n<h3 id=\"使用-modul-exports-暴露模块对象-1\"><a href=\"#使用-modul-exports-暴露模块对象-1\" class=\"headerlink\" title=\"使用 modul.exports 暴露模块对象\"></a>使用 modul.exports 暴露模块对象</h3><ol>\n<li><p>下面我们把一个对象封装到模块中，文件名为：hangge.js</p>\n<pre><code class=\"hljs javascript\">define(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">require</span>, <span class=\"hljs-built_in\">exports</span>, <span class=\"hljs-built_in\">module</span></span>) </span>&#123;\n <span class=\"hljs-comment\">// 对外提供接口</span>\n <span class=\"hljs-built_in\">module</span>.exports = &#123;\n     <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;hangge&#x27;</span>,\n     <span class=\"hljs-attr\">hello</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n       <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;Hello hangge.com&#x27;</span>);\n     &#125;\n &#125;;\n&#125;);</code></pre>\n</li>\n<li><p>接着创建一个 html 页面，其内部加载并调用这个模块。</p>\n</li>\n</ol>\n<pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;sea.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span>\n<span class=\"javascript\">          <span class=\"hljs-comment\">//加载一个模块，在加载完成时，执行回调</span></span>\n<span class=\"javascript\">          seajs.use(<span class=\"hljs-string\">&#x27;hangge&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a</span>) </span>&#123;</span>\n<span class=\"javascript\">            a.hello();</span>\n<span class=\"javascript\">          &#125;);</span>\n<span class=\"javascript\">        </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></code></pre>\n\n<ol start=\"3\">\n<li>控制台输出如下：<br><img src=\"/images/2017052216214198614%202.png\"></li>\n</ol>\n","prev":{"title":" git 修改远程仓库地址","slug":"git/c4b1781fcc"},"next":{"title":" HTML5 Canvas生成粒子效果","slug":"javascript/8fe0756f8c"},"categories":[{"name":"javascript","slug":"javascript","count":21,"path":"api/categories/javascript.json"}],"tags":[{"name":"javascript","slug":"javascript","count":25,"path":"api/tags/javascript.json"}]}