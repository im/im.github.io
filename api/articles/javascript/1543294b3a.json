{"sort":64,"title":" 详解valueOf() 与toString()是做什么的以及其在各种情况下的应用","slug":"javascript/1543294b3a","date":"2021-06-17T07:24:35.000Z","updated":"2021-06-17T11:25:09.047Z","comments":true,"path":"api/articles/javascript/1543294b3a.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>各种引用对象都继承或最终继承于 Object ，使用着Object的原型，所以它们不管何时都有 toString() 和 valueOf() 方法，只不过有些类型的原型重写了这两个方法，比如 Function 实例的原型就重写了 toString() 方法，按照原型链的规则，如果方法和属性在原型链的各原型中有重名，则优先使用最近的方法和属性。</p>\n<hr>\n<p>先看看常用的引用类型重写了这两个方法的情况</p>\n<ul>\n<li>Function 重写了 toString()</li>\n<li>Date 重写了 toString() 也重写了 valueOf()</li>\n<li>Array 重写了 toString()</li>\n<li><h2 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString()\"></a>toString()</h2>对于不同的引用对象，使用的toString()也不一定相同<br>我们来看看其对三个最常见的引用对象的处理。</li>\n</ul>\n<h3 id=\"Function\"><a href=\"#Function\" class=\"headerlink\" title=\"Function\"></a>Function</h3><p>很简单，就是function本身的样子</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> fn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;&#125;\n<span class=\"hljs-built_in\">console</span>.log(fn == <span class=\"hljs-string\">&#x27;function () &#123;&#125;&#x27;</span>) <span class=\"hljs-comment\">//true</span>\n<span class=\"hljs-comment\">//上一篇讲到如果用双等号的一边是引用类型</span>\n<span class=\"hljs-comment\">//（除了Date直接用toString（）转换）则先将元素进行valueOf()转换，再把它用toString()转换后进行比较</span>\n<span class=\"hljs-comment\">//https://blog.csdn.net/weixin_42476799/article/details/89296873</span></code></pre>\n\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> fn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>) &#125;\n<span class=\"hljs-built_in\">console</span>.log(fn == <span class=\"hljs-string\">&#x27;function() &#123; console.log(1) &#125;&#x27;</span>)<span class=\"hljs-comment\">//true</span></code></pre>\n\n<p>这时候问题来了</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> fn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>)&#125;<span class=\"hljs-comment\">//这边末尾大括号前缺了个空格</span>\n<span class=\"hljs-built_in\">console</span>.log(fn == <span class=\"hljs-string\">&#x27;function() &#123; console.log(1) &#125;&#x27;</span>)<span class=\"hljs-comment\">//它是true呢还是false呢</span></code></pre>\n\n<p>结果是false<br>也就是说function进行了toString()转换后与我们书写的function完全一样，多个空格少个空格都不行</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> fn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<span class=\"hljs-comment\">//没有空格</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>)\n&#125;\n<span class=\"hljs-built_in\">console</span>.log(fn == <span class=\"hljs-string\">&#x27;function() &#123;\\nconsole.log(1)\\n&#125;&#x27;</span>)<span class=\"hljs-comment\">//它是true呢还是false呢</span></code></pre>\n\n<p>false,这又是为什么呢，因为toString()时会把注释也给加进去。。</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> fn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<span class=\"hljs-comment\">//没有空格</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>)\n&#125;\n<span class=\"hljs-built_in\">console</span>.log(fn == <span class=\"hljs-string\">&#x27;function() &#123;//没有空格\\nconsole.log(1)\\n&#125;&#x27;</span>)<span class=\"hljs-comment\">//true</span></code></pre>\n\n<p>所以现在可以得出结论了function对象的toString()到底做了些什么呢，把我们写function内容完完全全复制成为了字符串。<br>如果你觉得写一些\\n什么的麻烦，可以试试es6的``,也就是模板字符串。比如：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> fn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<span class=\"hljs-comment\">//没有空格</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>)\n&#125;\n<span class=\"hljs-built_in\">console</span>.log(fn == <span class=\"hljs-string\">`function() &#123;//没有空格</span>\n<span class=\"hljs-string\">console.log(1)</span>\n<span class=\"hljs-string\">&#125;`</span>)<span class=\"hljs-comment\">//true</span></code></pre>\n\n<h3 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h3><p>我们先来看一下 Array 是怎样的</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">5</span>]\n<span class=\"hljs-built_in\">console</span>.log(arr == <span class=\"hljs-string\">&#x27;1,2,3,4,5,2,1,5,2,1,5&#x27;</span>)<span class=\"hljs-comment\">//true</span></code></pre>\n\n<p>它就简单多了我们再来看看它会不会出现function那种要与原函数写得完全一样</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">5</span>]\n<span class=\"hljs-built_in\">console</span>.log(arr == <span class=\"hljs-string\">&#x27;1,2,3,4,5,2,1,5,2,1,5&#x27;</span>)<span class=\"hljs-comment\">//true</span></code></pre>\n\n<p>所以就可以得出结论了arr.toString()就是将每个元素用逗号隔开类似于arr.join(’,’)</p>\n<h3 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h3><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> date = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">&#x27;1998-02-23&#x27;</span>)\n<span class=\"hljs-built_in\">console</span>.log(date == <span class=\"hljs-string\">&#x27;Mon Feb 23 1998 08:00:00 GMT+0800 (中国标准时间)&#x27;</span>)<span class=\"hljs-comment\">//true</span></code></pre>\n\n<p>它也比较直接，只要你传的值是它能解析的日期格式，toString()后给你的是和上边格式一样的字符串</p>\n<h3 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h3><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> obj1 = &#123;&#125;,obj2 = &#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;name&#x27;</span>&#125;\n<span class=\"hljs-built_in\">console</span>.log(obj2 == <span class=\"hljs-string\">&#x27;[object Object]&#x27;</span>)<span class=\"hljs-comment\">//true</span>\n<span class=\"hljs-built_in\">console</span>.log(obj1 == <span class=\"hljs-string\">&#x27;[object Object]&#x27;</span>)<span class=\"hljs-comment\">//true</span></code></pre>\n\n<p>Object不管写成啥样，都会变成’[object Object]’这个字符串</p>\n<h2 id=\"valueOf-NaN\"><a href=\"#valueOf-NaN\" class=\"headerlink\" title=\"valueOf()\"></a>valueOf()</h2><h3 id=\"Function-1\"><a href=\"#Function-1\" class=\"headerlink\" title=\"Function\"></a>Function</h3><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> fn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123;&#125;\n<span class=\"hljs-built_in\">console</span>.log(fn.valueOf() === fn)<span class=\"hljs-comment\">//true</span></code></pre>\n\n<p>也就是说fn.valueOf()返回的是fn本身。是不是很无聊。</p>\n<h3 id=\"Array-1\"><a href=\"#Array-1\" class=\"headerlink\" title=\"Array\"></a>Array</h3><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">5</span>]\n<span class=\"hljs-built_in\">console</span>.log(arr.valueOf() === arr)<span class=\"hljs-comment\">//Array也是返回自身</span></code></pre>\n\n<h3 id=\"Object-1\"><a href=\"#Object-1\" class=\"headerlink\" title=\"Object\"></a>Object</h3><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> obj = &#123;&#125;\n<span class=\"hljs-built_in\">console</span>.log(obj.valueOf() === obj)<span class=\"hljs-comment\">//Object也是返回自身</span></code></pre>\n\n<h3 id=\"Date-1\"><a href=\"#Date-1\" class=\"headerlink\" title=\"Date\"></a>Date</h3><p>难道date也是返回自身吗</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> date = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">&#x27;1998-02-23&#x27;</span>)\n<span class=\"hljs-built_in\">console</span>.log(date.valueOf() === date)<span class=\"hljs-comment\">//false</span></code></pre>\n\n<p>前文提到，三个常用的引用对象中只有Date重写了valueOf()方法，那肯定有它的独到之处，我们来看看它是什么</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> date = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">&#x27;1998-02-23&#x27;</span>)\n<span class=\"hljs-built_in\">console</span>.log(date.valueOf() === <span class=\"hljs-number\">888192000000</span> )<span class=\"hljs-comment\">//true</span></code></pre>\n\n<p>原来它是返回从 1970 年 1 月 1 日午夜开始计的毫秒数。</p>\n<p>我们现在知道了这四个引用对象用上toString和valueOf后会变成啥样，但我们还不知道它们各自在什么时候使用<br>那我们来看看</p>\n<p>从上一篇中我们发现，双等号一边如果是引用类型的话首先会使用valueOf(),再使用toString()</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> arr = []\narr.toString = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;arrtoString&#x27;</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>&#125;\narr.valueOf = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;arrvalueOf&#x27;</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span> &#125;\n<span class=\"hljs-built_in\">console</span>.log(arr)<span class=\"hljs-comment\">//直接返回arr本身，不进行转换</span>\nalert(arr)<span class=\"hljs-comment\">//只用toString</span>\n<span class=\"hljs-built_in\">Number</span>(arr)<span class=\"hljs-comment\">//先用valueOf再用toString</span>\n<span class=\"hljs-built_in\">String</span>(arr)<span class=\"hljs-comment\">//只用toString</span>\n<span class=\"hljs-built_in\">console</span>.log(+arr)<span class=\"hljs-comment\">//先用valueOf再用toString</span></code></pre>\n\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> fn = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;&#125;\nfn.toString = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;fntoString&#x27;</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>&#125;\nfn.valueOf = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;fnvalueOf&#x27;</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>&#125;\n<span class=\"hljs-built_in\">console</span>.log(fn)<span class=\"hljs-comment\">//先用toString再用valueOf</span>\nalert(fn)<span class=\"hljs-comment\">//用toString</span>\n<span class=\"hljs-built_in\">Number</span>(fn)<span class=\"hljs-comment\">//先用valueOf再用toString</span>\n<span class=\"hljs-built_in\">String</span>(fn)<span class=\"hljs-comment\">//只用toString</span>\n<span class=\"hljs-built_in\">console</span>.log(+fn)<span class=\"hljs-comment\">//先用valueOf再用toString</span></code></pre>\n\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> date = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()\ndate.toString = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;datetoString&#x27;</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>&#125;\ndate.valueOf = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;datevalueOf&#x27;</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>&#125;\n<span class=\"hljs-built_in\">console</span>.log(date)<span class=\"hljs-comment\">//执行两次toString(),不太明白</span>\nalert(date)<span class=\"hljs-comment\">//用一次toString</span>\n<span class=\"hljs-built_in\">Number</span>(date)<span class=\"hljs-comment\">//先用valueOf再用toString</span>\n<span class=\"hljs-built_in\">String</span>(date)<span class=\"hljs-comment\">//只用toString</span>\n<span class=\"hljs-built_in\">console</span>.log(+date)<span class=\"hljs-comment\">//先用valueOf再用toString</span></code></pre>\n\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">let</span> obj = &#123;&#125;\nobj.toString = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;objtoString&#x27;</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>&#125;\nobj.valueOf = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>&#123; <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;objvalueOf&#x27;</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>&#125;\n<span class=\"hljs-built_in\">console</span>.log(obj)<span class=\"hljs-comment\">//直接展现，不用任何转换</span>\nalert(obj)<span class=\"hljs-comment\">//用一次toString</span>\n<span class=\"hljs-built_in\">Number</span>(obj)<span class=\"hljs-comment\">//先用valueOf再用toString</span>\n<span class=\"hljs-built_in\">String</span>(obj)<span class=\"hljs-comment\">//只用toString</span>\n<span class=\"hljs-built_in\">console</span>.log(+obj)<span class=\"hljs-comment\">//先用valueOf再用toString</span></code></pre>\n\n<p>所以可以得出结论了，</p>\n<ul>\n<li>console.log()直接打印的话中除了object直接打印、date执行两次toString,其余都toString再用valueOf,</li>\n<li>alert(),String()中都只使用了toString()，</li>\n<li>如果需要进行运算，都是先进行valueOf再toString</li>\n<li>总而言之，与数字、运算有关的用valueOf优先,其他都是toString优先</li>\n</ul>\n","prev":false,"next":{"title":" Mac怎么刷新DNS缓存","slug":"macos/579cc29de2"},"categories":[{"name":"javascript","slug":"javascript","count":21,"path":"api/categories/javascript.json"}],"tags":[{"name":"javascript","slug":"javascript","count":25,"path":"api/tags/javascript.json"}]}