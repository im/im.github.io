{"sort":58,"title":" src 与 href 的区别","slug":"interview/f426fb17e9","date":"2021-06-07T02:13:24.000Z","updated":"2021-06-17T11:25:09.047Z","comments":true,"path":"api/articles/interview/f426fb17e9.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<h2 id=\"src\"><a href=\"#src\" class=\"headerlink\" title=\"src\"></a>src</h2><ul>\n<li>src用于替换当前元素，href用于在当前文档和引用资源之间确立联系。</li>\n<li>src是source的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求src资源时会将其指向的资源下载并应用到文档内，例如js脚本，img图片和frame等元素</li>\n</ul>\n<pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span> =<span class=\"hljs-string\">&quot;js.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n\n<p>  当浏览器解析到该元素时，<strong>会暂停其他资源的下载和处理</strong>，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。<strong>这也是为什么将js脚本放在底部而不是头部</strong> </p>\n<h2 id=\"href\"><a href=\"#href\" class=\"headerlink\" title=\"href\"></a>href</h2><ul>\n<li>href是Hypertext Reference的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，如果我们在文档中添加</li>\n</ul>\n<pre><code class=\"hljs routeros\">&lt;link <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-string\">&quot;common.css&quot;</span> <span class=\"hljs-attribute\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span>/&gt;</code></pre>\n\n<ul>\n<li> 那么浏览器会识别该文档为css文件，就会并行下载资源并且<strong>不会</strong>停止对当前文档的处理。这也是为什么建议使用link方式来加载css，而不是使用@import方式</li>\n</ul>\n","prev":{"title":" sessionStorage 、localStorage 和 cookie 之间的区别","slug":"interview/a6f7da3b77"},"next":{"title":" vue3.0 是如何变快的？","slug":"vue3/ac6163e9d3"},"categories":[{"name":"interview","slug":"interview","count":9,"path":"api/categories/interview.json"}],"tags":[{"name":"interview","slug":"interview","count":9,"path":"api/tags/interview.json"},{"name":"html","slug":"html","count":2,"path":"api/tags/html.json"}]}