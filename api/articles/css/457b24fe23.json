{"sort":1,"title":" Flex 布局教程：语法篇","slug":"css/457b24fe23","date":"2019-01-03T00:00:00.000Z","updated":"2021-06-17T11:25:09.043Z","comments":true,"path":"api/articles/css/457b24fe23.json","photos":[],"link":"","excerpt":"网页布局（layout）是 CSS 的一个重点应用。 [Figure] Flex 布局将成为未来布局的首选方案。本文介绍它的语法， 下一篇文章 给出常见布局的 Flex 写法。网友 JailBreak 为本文的所有示例制作了 Demo ，也可以参考。以下内容主要参考了下面两篇文章： A Complete Guide to Flexbox 和 A Visual Guide to CSS3 Flexbox Properties 。","covers":["/images/bg2015071001.gif","/images/bg2015071002.png","/images/bg2015071003.jpg","/images/bg2015071004.png","/images/bg2015071005.png","/images/bg2015071006.png","/images/bg2015071007.png","/images/bg2015071008.jpg","/images/bg2015071009.jpg","/images/bg2015071010.png","/images/bg2015071011.png","/images/bg2015071012.png","/images/bg2015071013.png","/images/bg2015071014.png","/images/bg2015071015.jpg","/images/bg2015071016.png"],"content":"<p>网页布局（layout）是 CSS 的一个重点应用。</p>\n<p><img src=\"/images/bg2015071001.gif\"><br>布局的传统解决方案，基于 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/box_model\">盒状模型</a> ，依赖 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/display\">display</a> 属性 + <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/position\">position</a> 属性 + <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/float\">float</a> 属性。它对于那些特殊布局非常不方便，比如， <a href=\"https://css-tricks.com/centering-css-complete-guide/\">垂直居中</a> 就不容易实现。</p>\n<p><img src=\"/images/bg2015071002.png\"><br>2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p>\n<p><img src=\"/images/bg2015071003.jpg\"><br>Flex 布局将成为未来布局的首选方案。本文介绍它的语法， <a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-examples.html\">下一篇文章</a> 给出常见布局的 Flex 写法。网友 <a href=\"http://vgee.cn/\">JailBreak</a> 为本文的所有示例制作了 <a href=\"http://static.vgee.cn/static/index.html\">Demo</a> ，也可以参考。</p>\n<p>以下内容主要参考了下面两篇文章： <a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">A Complete Guide to Flexbox</a> 和 <a href=\"https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties\">A Visual Guide to CSS3 Flexbox Properties</a> 。</p>\n<a id=\"more\"></a>\n<h2 id=\"一、Flex-布局是什么？\"><a href=\"#一、Flex-布局是什么？\" class=\"headerlink\" title=\"一、Flex 布局是什么？\"></a>一、Flex 布局是什么？</h2><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p>\n<p>任何一个容器都可以指定为 Flex 布局。</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.box</span>&#123;\n  <span class=\"hljs-attribute\">display</span>: flex;\n&#125;</code></pre>\n\n<p>行内元素也可以使用 Flex 布局。</p>\n<pre><code class=\"hljs arduino\">.box&#123;\n  display: <span class=\"hljs-keyword\">inline</span>-flex;\n&#125;</code></pre>\n\n<p>Webkit 内核的浏览器，必须加上 <code>-webkit</code> 前缀。</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.box</span>&#123;\n  <span class=\"hljs-attribute\">display</span>: -webkit-flex; <span class=\"hljs-comment\">/* Safari */</span>\n  <span class=\"hljs-attribute\">display</span>: flex;\n&#125;</code></pre>\n\n<p>注意，设为 Flex 布局以后，子元素的 <code>float</code>、<code>clear</code> 和 <code>vertical-align</code> 属性将失效。</p>\n<h2 id=\"二、基本概念\"><a href=\"#二、基本概念\" class=\"headerlink\" title=\"二、基本概念\"></a>二、基本概念</h2><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p>\n<p><img src=\"/images/bg2015071004.png\"><br>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做 <code>main start</code> ，结束位置叫做 <code>main end</code> ；交叉轴的开始位置叫做 <code>cross start</code> ，结束位置叫做 <code>cross end</code> 。</p>\n<p>项目默认沿主轴排列。单个项目占据的主轴空间叫做 <code>main size</code> ，占据的交叉轴空间叫做 <code>cross size</code> 。</p>\n<h2 id=\"三、容器的属性\"><a href=\"#三、容器的属性\" class=\"headerlink\" title=\"三、容器的属性\"></a>三、容器的属性</h2><p>以下6个属性设置在容器上。</p>\n<ul>\n<li>flex-direction</li>\n<li>flex-wrap</li>\n<li>flex-flow</li>\n<li>justify-content</li>\n<li>align-items</li>\n<li>align-content</li>\n</ul>\n<h3 id=\"3-1-flex-direction属性\"><a href=\"#3-1-flex-direction属性\" class=\"headerlink\" title=\"3.1 flex-direction属性\"></a>3.1 flex-direction属性</h3><p><code>flex-direction</code> 属性决定主轴的方向（即项目的排列方向）。</p>\n<pre><code class=\"hljs pgsql\">.box &#123;\n  flex-direction: <span class=\"hljs-keyword\">row</span> | <span class=\"hljs-keyword\">row</span>-<span class=\"hljs-keyword\">reverse</span> | <span class=\"hljs-keyword\">column</span> | <span class=\"hljs-keyword\">column</span>-<span class=\"hljs-keyword\">reverse</span>;\n&#125;</code></pre>\n\n<p><img src=\"/images/bg2015071005.png\"><br>它可能有4个值。</p>\n<ul>\n<li><code>row</code> （默认值）：主轴为水平方向，起点在左端。</li>\n<li><code>row-reverse</code> ：主轴为水平方向，起点在右端。</li>\n<li><code>column</code> ：主轴为垂直方向，起点在上沿。</li>\n<li><code>column-reverse</code> ：主轴为垂直方向，起点在下沿。</li>\n</ul>\n<h3 id=\"3-2-flex-wrap属性\"><a href=\"#3-2-flex-wrap属性\" class=\"headerlink\" title=\"3.2 flex-wrap属性\"></a>3.2 flex-wrap属性</h3><p>默认情况下，项目都排在一条线（又称”轴线”）上。 <code>flex-wrap</code> 属性定义，如果一条轴线排不下，如何换行。</p>\n<p><img src=\"/images/bg2015071006.png\"></p>\n<pre><code class=\"hljs lua\">.box&#123;\n  flex-<span class=\"hljs-built_in\">wrap</span>: nowrap | <span class=\"hljs-built_in\">wrap</span> | <span class=\"hljs-built_in\">wrap</span>-<span class=\"hljs-built_in\">reverse</span>;\n&#125;</code></pre>\n\n<p>它可能取三个值。</p>\n<p>（1） <code>nowrap</code> （默认）：不换行。</p>\n<p><img src=\"/images/bg2015071007.png\"><br>（2） <code>wrap</code> ：换行，第一行在上方。</p>\n<p><img src=\"/images/bg2015071008.jpg\"><br>（3） <code>wrap-reverse</code> ：换行，第一行在下方。</p>\n<p><img src=\"/images/bg2015071009.jpg\"></p>\n<h3 id=\"3-3-flex-flow\"><a href=\"#3-3-flex-flow\" class=\"headerlink\" title=\"3.3 flex-flow\"></a>3.3 flex-flow</h3><p><code>flex-flow</code> 属性是 <code>flex-direction</code> 属性和 <code>flex-wrap</code> 属性的简写形式，默认值为 <code>row nowrap</code> 。</p>\n<pre><code class=\"hljs dts\">.<span class=\"hljs-class\">box </span>&#123;\n  flex-flow: <span class=\"hljs-params\">&lt;flex-direction&gt;</span> || <span class=\"hljs-params\">&lt;flex-wrap&gt;</span>;\n&#125;</code></pre>\n\n<h3 id=\"3-4-justify-content属性\"><a href=\"#3-4-justify-content属性\" class=\"headerlink\" title=\"3.4 justify-content属性\"></a>3.4 justify-content属性</h3><p><code>justify-content</code> 属性定义了项目在主轴上的对齐方式。</p>\n<pre><code class=\"hljs applescript\">.box &#123;\n  justify-content: flex-start | flex-<span class=\"hljs-keyword\">end</span> | center | <span class=\"hljs-literal\">space</span>-<span class=\"hljs-keyword\">between</span> | <span class=\"hljs-literal\">space</span>-<span class=\"hljs-keyword\">around</span>;\n&#125;</code></pre>\n\n<p><img src=\"/images/bg2015071010.png\"><br>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p>\n<ul>\n<li><code>flex-start</code> （默认值）：左对齐</li>\n<li><code>flex-end</code> ：右对齐</li>\n<li><code>center</code> ： 居中</li>\n<li><code>space-between</code> ：两端对齐，项目之间的间隔都相等。</li>\n<li><code>space-around</code> ：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>\n</ul>\n<h3 id=\"3-5-align-items属性\"><a href=\"#3-5-align-items属性\" class=\"headerlink\" title=\"3.5 align-items属性\"></a>3.5 align-items属性</h3><p><code>align-items</code> 属性定义项目在交叉轴上如何对齐。</p>\n<pre><code class=\"hljs coq\">.box &#123;\n  align-items: flex-start | <span class=\"hljs-type\">flex</span>-<span class=\"hljs-keyword\">end</span> | <span class=\"hljs-type\">center</span> | <span class=\"hljs-type\">baseline</span> | <span class=\"hljs-type\">stretch</span>;\n&#125;</code></pre>\n\n<p><img src=\"/images/bg2015071011.png\"><br>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p>\n<ul>\n<li><code>flex-start</code> ：交叉轴的起点对齐。</li>\n<li><code>flex-end</code> ：交叉轴的终点对齐。</li>\n<li><code>center</code> ：交叉轴的中点对齐。</li>\n<li><code>baseline</code>: 项目的第一行文字的基线对齐。</li>\n<li><code>stretch</code> （默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>\n</ul>\n<h3 id=\"3-6-align-content属性\"><a href=\"#3-6-align-content属性\" class=\"headerlink\" title=\"3.6 align-content属性\"></a>3.6 align-content属性</h3><p><code>align-content</code> 属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>\n<pre><code class=\"hljs coq\">.box &#123;\n  align-content: flex-start | <span class=\"hljs-type\">flex</span>-<span class=\"hljs-keyword\">end</span> | <span class=\"hljs-type\">center</span> | <span class=\"hljs-type\">space</span>-between | <span class=\"hljs-type\">space</span>-around | <span class=\"hljs-type\">stretch</span>;\n&#125;</code></pre>\n\n<p><img src=\"/images/bg2015071012.png\"><br>该属性可能取6个值。</p>\n<ul>\n<li><code>flex-start</code> ：与交叉轴的起点对齐。</li>\n<li><code>flex-end</code> ：与交叉轴的终点对齐。</li>\n<li><code>center</code> ：与交叉轴的中点对齐。</li>\n<li><code>space-between</code> ：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>\n<li><code>space-around</code> ：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>\n<li><code>stretch</code> （默认值）：轴线占满整个交叉轴。</li>\n</ul>\n<h2 id=\"四、项目的属性\"><a href=\"#四、项目的属性\" class=\"headerlink\" title=\"四、项目的属性\"></a>四、项目的属性</h2><p>以下6个属性设置在项目上。</p>\n<ul>\n<li><code>order</code></li>\n<li><code>flex-grow</code></li>\n<li><code>flex-shrink</code></li>\n<li><code>flex-basis</code></li>\n<li><code>flex</code></li>\n<li><code>align-self</code></li>\n</ul>\n<h3 id=\"4-1-order属性\"><a href=\"#4-1-order属性\" class=\"headerlink\" title=\"4.1 order属性\"></a>4.1 order属性</h3><p><code>order</code> 属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p>\n<pre><code class=\"hljs dts\">.<span class=\"hljs-class\">item </span>&#123;\n<span class=\"hljs-symbol\">  order:</span> <span class=\"hljs-params\">&lt;integer&gt;</span>;\n&#125;</code></pre>\n\n<p><img src=\"/images/bg2015071013.png\"></p>\n<h3 id=\"4-2-flex-grow属性\"><a href=\"#4-2-flex-grow属性\" class=\"headerlink\" title=\"4.2 flex-grow属性\"></a>4.2 flex-grow属性</h3><p><code>flex-grow</code> 属性定义项目的放大比例，默认为 <code>0</code> ，即如果存在剩余空间，也不放大。</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.item</span> &#123;\n  <span class=\"hljs-attribute\">flex-grow</span>: &lt;number&gt;; <span class=\"hljs-comment\">/* default 0 */</span>\n&#125;</code></pre>\n\n<p><img src=\"/images/bg2015071014.png\"><br>如果所有项目的 <code>flex-grow</code> 属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的 <code>flex-grow</code> 属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>\n<h3 id=\"4-3-flex-shrink属性\"><a href=\"#4-3-flex-shrink属性\" class=\"headerlink\" title=\"4.3 flex-shrink属性\"></a>4.3 flex-shrink属性</h3><p><code>flex-shrink</code> 属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.item</span> &#123;\n  <span class=\"hljs-attribute\">flex-shrink</span>: &lt;number&gt;; <span class=\"hljs-comment\">/* default 1 */</span>\n&#125;</code></pre>\n\n<p><img src=\"/images/bg2015071015.jpg\"><br>如果所有项目的 <code>flex-shrink</code> 属性都为1，当空间不足时，都将等比例缩小。如果一个项目的 <code>flex-shrink</code> 属性为0，其他项目都为1，则空间不足时，前者不缩小。</p>\n<p>负值对该属性无效。</p>\n<h3 id=\"4-4-flex-basis属性\"><a href=\"#4-4-flex-basis属性\" class=\"headerlink\" title=\"4.4 flex-basis属性\"></a>4.4 flex-basis属性</h3><p><code>flex-basis</code> 属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为 <code>auto</code> ，即项目的本来大小。</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.item</span> &#123;\n  <span class=\"hljs-attribute\">flex-basis</span>: &lt;length&gt; | auto; <span class=\"hljs-comment\">/* default auto */</span>\n&#125;</code></pre>\n\n<p>它可以设为跟 <code>width</code> 或 <code>height</code> 属性一样的值（比如350px），则项目将占据固定空间。</p>\n<h3 id=\"4-5-flex属性\"><a href=\"#4-5-flex属性\" class=\"headerlink\" title=\"4.5 flex属性\"></a>4.5 flex属性</h3><p><code>flex</code> 属性是 <code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code> 的简写，默认值为 <code>0 1 auto</code> 。后两个属性可选。</p>\n<pre><code class=\"hljs sml\">.item &#123;\n  flex: none | [ &lt;<span class=\"hljs-symbol\">&#x27;flex</span>-grow&#x27;&gt; &lt;<span class=\"hljs-symbol\">&#x27;flex</span>-shrink&#x27;&gt;? || &lt;<span class=\"hljs-symbol\">&#x27;flex</span>-basis&#x27;&gt; ]\n&#125;</code></pre>\n\n<p>该属性有两个快捷值： <code>auto</code> ( <code>1 1 auto</code> ) 和 none ( <code>0 0 auto</code> )。</p>\n<p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>\n<h3 id=\"4-6-align-self属性\"><a href=\"#4-6-align-self属性\" class=\"headerlink\" title=\"4.6 align-self属性\"></a>4.6 align-self属性</h3><p><code>align-self</code> 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 <code>align-items</code> 属性。默认值为 <code>auto</code> ，表示继承父元素的 <code>align-items</code> 属性，如果没有父元素，则等同于 <code>stretch</code> 。</p>\n<pre><code class=\"hljs coq\">.item &#123;\n  align-self: <span class=\"hljs-built_in\">auto</span> | <span class=\"hljs-type\">flex</span>-start | <span class=\"hljs-type\">flex</span>-<span class=\"hljs-keyword\">end</span> | <span class=\"hljs-type\">center</span> | <span class=\"hljs-type\">baseline</span> | <span class=\"hljs-type\">stretch</span>;\n&#125;</code></pre>\n\n<p><img src=\"/images/bg2015071016.png\"><br>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>\n<p>（完）</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\">Flex 布局教程：语法篇</a></p>\n","prev":{"title":" git 添加 ssh key","slug":"git/59a209dce6"},"next":false,"categories":[{"name":"css","slug":"css","count":3,"path":"api/categories/css.json"}],"tags":[{"name":"css","slug":"css","count":3,"path":"api/tags/css.json"}]}